import { Vector3, Entity, Vehicle, Player, LocalPlayer, Ped } from '../client/index.stub.js';
export declare function toggleStrictChecks(enable: boolean): void;
export declare function wait(ms: number): void;
export declare function startNewScript(scriptName: string | null, stackSize: number): number;
export declare function startNewScriptWithArgs(scriptName: string | null, args: any | null, argCount: number, stackSize: number): [number, any];
export declare function startNewScriptWithNameHash(scriptHash: number, stackSize: number): number;
export declare function startNewScriptWithNameHashAndArgs(scriptHash: number, args: any | null, argCount: number, stackSize: number): [number, any];
export declare function timera(): number;
export declare function timerb(): number;
export declare function settimera(value: number): void;
export declare function settimerb(value: number): void;
export declare function timestep(): number;
export declare function sin(value: number): number;
export declare function cos(value: number): number;
export declare function sqrt(value: number): number;
export declare function pow(base: number, exponent: number): number;
export declare function log10(value: number): number;
export declare function vmag(x: number, y: number, z: number): number;
export declare function vmag2(x: number, y: number, z: number): number;
export declare function vdist(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
export declare function vdist2(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
export declare function shiftLeft(value: number, bitShift: number): number;
export declare function shiftRight(value: number, bitShift: number): number;
export declare function floor(value: number): number;
export declare function ceil(value: number): number;
export declare function round(value: number): number;
export declare function toFloat(value: number): number;
export declare function setThisThreadPriority(priority: number): void;
export declare function appDataValid(): boolean;
export declare function appGetInt(property: string | null): number;
export declare function appGetFloat(property: string | null): number;
export declare function appGetString(property: string | null): string | null;
export declare function appSetInt(property: string | null, value: number): void;
export declare function appSetFloat(property: string | null, value: number): void;
export declare function appSetString(property: string | null, value: string | null): void;
export declare function appSetApp(appName: string | null): void;
export declare function appSetBlock(blockName: string | null): void;
export declare function appClearBlock(): void;
export declare function appCloseApp(): void;
export declare function appCloseBlock(): void;
export declare function appHasLinkedSocialClubAccount(): boolean;
export declare function appHasSyncedData(appName: string | null): boolean;
export declare function appSaveData(): void;
export declare function appGetDeletedFileStatus(): number;
export declare function appDeleteAppData(appName: string | null): boolean;
export declare function playPedRingtone(ringtoneName: string | null, ped: Ped | Player | LocalPlayer | number, p2: boolean): void;
export declare function isPedRingtonePlaying(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function stopPedRingtone(ped: Ped | Player | LocalPlayer | number): void;
export declare function isMobilePhoneCallOngoing(): boolean;
export declare function isMobileInterferenceActive(): boolean;
export declare function getCurrentTvShowPlayTime(): number;
export declare function createNewScriptedConversation(): void;
export declare function addLineToConversation(index: number, p1: string | null, p2: string | null, p3: number, p4: number, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: number, p10: boolean, p11: boolean, p12: boolean): void;
export declare function addPedToConversation(index: number, ped: Ped | Player | LocalPlayer | number, p2: string | null): void;
export declare function setPositionForNullConvPed(p0: any, p1: number, p2: number, p3: number): void;
export declare function setEntityForNullConvPed(p0: number, entity: Entity | number): void;
export declare function setMicrophonePosition(toggle: boolean, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number): void;
export declare function setConversationAudioControlledByAnim(p0: boolean): void;
export declare function setConversationAudioPlaceholder(p0: boolean): void;
export declare function startScriptPhoneConversation(p0: boolean, p1: boolean): void;
export declare function preloadScriptPhoneConversation(p0: boolean, p1: boolean): void;
export declare function startScriptConversation(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
export declare function preloadScriptConversation(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
export declare function startPreloadedConversation(): void;
export declare function getIsPreloadedConversationReady(): boolean;
export declare function isScriptedConversationOngoing(): boolean;
export declare function isScriptedConversationLoaded(): boolean;
export declare function getCurrentScriptedConversationLine(): number;
export declare function pauseScriptedConversation(p0: boolean): void;
export declare function restartScriptedConversation(): void;
export declare function stopScriptedConversation(p0: boolean): number;
export declare function skipToNextScriptedConversationLine(): void;
export declare function interruptConversation(ped: Ped | Player | LocalPlayer | number, voiceline: string | null, speaker: string | null): void;
export declare function interruptConversationAndPause(ped: Ped | Player | LocalPlayer | number, p1: string | null, speaker: string | null): void;
export declare function getVariationChosenForScriptedLine(p0?: any | null): [number, any];
export declare function setNoDuckingForConversation(p0: boolean): void;
export declare function registerScriptWithAudio(p0: number): void;
export declare function unregisterScriptWithAudio(): void;
export declare function requestMissionAudioBank(audioBank: string | null, p1: boolean, p2: any): boolean;
export declare function requestAmbientAudioBank(audioBank: string | null, p1: boolean, p2: any): boolean;
export declare function requestScriptAudioBank(audioBank: string | null, p1: boolean, p2: any): boolean;
export declare function hintMissionAudioBank(audioBank: string | null, p1: boolean, p2: any): boolean;
export declare function hintAmbientAudioBank(audioBank: string | null, p1: boolean, p2: any): boolean;
export declare function hintScriptAudioBank(audioBank: string | null, p1: boolean, p2: any): boolean;
export declare function releaseMissionAudioBank(): void;
export declare function releaseAmbientAudioBank(): void;
export declare function releaseNamedScriptAudioBank(audioBank: string | null): void;
export declare function releaseScriptAudioBank(): void;
export declare function unhintAmbientAudioBank(): void;
export declare function unhintScriptAudioBank(): void;
export declare function unhintNamedScriptAudioBank(audioBank: string | null): void;
export declare function getSoundId(): number;
export declare function releaseSoundId(soundId: number): void;
export declare function playSound(soundId: number, audioName: string | null, audioRef: string | null, p3: boolean, p4: any, p5: boolean): void;
export declare function playSoundFrontend(soundId: number, audioName: string | null, audioRef: string | null, p3: boolean): void;
export declare function playDeferredSoundFrontend(soundName: string | null, soundsetName: string | null): void;
export declare function playSoundFromEntity(soundId: number, audioName: string | null, entity: Entity | number, audioRef: string | null, isNetwork: boolean, p5: any): void;
export declare function playSoundFromEntityHash(soundId: number, model: number, entity: Entity | number, soundSetHash: number, p4: any, p5: any): void;
export declare function playSoundFromCoord(soundId: number, audioName: string | null, x: number, y: number, z: number, audioRef: string | null, isNetwork: boolean, range: number, p8: boolean): void;
export declare function updateSoundCoord(soundId: number, x: number, y: number, z: number): void;
export declare function stopSound(soundId: number): void;
export declare function getNetworkIdFromSoundId(soundId: number): number;
export declare function getSoundIdFromNetworkId(netId: number): number;
export declare function setVariableOnSound(soundId: number, variable: string | null, p2: number): void;
export declare function setVariableOnStream(variable: string | null, p1: number): void;
export declare function overrideUnderwaterStream(p0: string | null, p1: boolean): void;
export declare function setVariableOnUnderWaterStream(variableName: string | null, value: number): void;
export declare function hasSoundFinished(soundId: number): boolean;
export declare function playPedAmbientSpeechNative(ped: Ped | Player | LocalPlayer | number, speechName: string | null, speechParam: string | null, p3: any): void;
export declare function playPedAmbientSpeechAndCloneNative(ped: Ped | Player | LocalPlayer | number, speechName: string | null, speechParam: string | null, p3: any): void;
export declare function playPedAmbientSpeechWithVoiceNative(ped: Ped | Player | LocalPlayer | number, speechName: string | null, voiceName: string | null, speechParam: string | null, p4: boolean): void;
export declare function playAmbientSpeechFromPositionNative(speechName: string | null, voiceName: string | null, x: number, y: number, z: number, speechParam: string | null): void;
export declare function overrideTrevorRage(voiceEffect: string | null): void;
export declare function resetTrevorRage(): void;
export declare function setPlayerAngry(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function playPain(ped: Ped | Player | LocalPlayer | number, painID: number, p1: number, p3: any): void;
export declare function releaseWeaponAudio(): void;
export declare function activateAudioSlowmoMode(mode: string | null): void;
export declare function deactivateAudioSlowmoMode(mode: string | null): void;
export declare function setAmbientVoiceName(ped: Ped | Player | LocalPlayer | number, name: string | null): void;
export declare function setAmbientVoiceNameHash(ped: Ped | Player | LocalPlayer | number, hash: number): void;
export declare function getAmbientVoiceNameHash(ped: Ped | Player | LocalPlayer | number): number;
export declare function setPedVoiceFull(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedRaceAndVoiceGroup(ped: Ped | Player | LocalPlayer | number, p1: number, voiceGroup: number): void;
export declare function setPedVoiceGroup(ped: Ped | Player | LocalPlayer | number, voiceGroupHash: number): void;
export declare function setPedVoiceGroupFromRaceToPvg(ped: Ped | Player | LocalPlayer | number, voiceGroupHash: number): void;
export declare function setPedGender(ped: Ped | Player | LocalPlayer | number, p1: boolean): void;
export declare function stopCurrentPlayingSpeech(ped: Ped | Player | LocalPlayer | number): void;
export declare function stopCurrentPlayingAmbientSpeech(ped: Ped | Player | LocalPlayer | number): void;
export declare function isAmbientSpeechPlaying(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isScriptedSpeechPlaying(p0: Ped | Player | LocalPlayer | number): boolean;
export declare function isAnySpeechPlaying(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isAnyPositionalSpeechPlaying(): boolean;
export declare function doesContextExistForThisPed(ped: Ped | Player | LocalPlayer | number, speechName: string | null, p2: boolean): boolean;
export declare function isPedInCurrentConversation(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedIsDrunk(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function playAnimalVocalization(pedHandle: Ped | Player | LocalPlayer | number, p1: number, speechName: string | null): void;
export declare function isAnimalVocalizationPlaying(pedHandle: Ped | Player | LocalPlayer | number): boolean;
export declare function setAnimalMood(animal: Ped | Player | LocalPlayer | number, mood: number): void;
export declare function isMobilePhoneRadioActive(): boolean;
export declare function setMobilePhoneRadioState(state: boolean): void;
export declare function getPlayerRadioStationIndex(): number;
export declare function getPlayerRadioStationName(): string | null;
export declare function getRadioStationName(radioStation: number): string | null;
export declare function getPlayerRadioStationGenre(): number;
export declare function isRadioRetuning(): boolean;
export declare function isRadioFadedOut(): boolean;
export declare function setRadioRetuneUp(): void;
export declare function setRadioRetuneDown(): void;
export declare function setRadioToStationName(stationName: string | null): void;
export declare function setVehRadioStation(vehicle: Vehicle | number, radioStation: string | null): void;
export declare function setVehHasNormalRadio(vehicle: Vehicle | number): void;
export declare function isVehicleRadioOn(vehicle: Vehicle | number): boolean;
export declare function setVehForcedRadioThisFrame(vehicle: Vehicle | number): void;
export declare function setEmitterRadioStation(emitterName: string | null, radioStation: string | null, p2: any): void;
export declare function setStaticEmitterEnabled(emitterName: string | null, toggle: boolean): void;
export declare function linkStaticEmitterToEntity(emitterName: string | null, entity: Entity | number): void;
export declare function setRadioToStationIndex(radioStation: number): void;
export declare function setFrontendRadioActive(active: boolean): void;
export declare function unlockMissionNewsStory(newsStory: number): void;
export declare function isMissionNewsStoryUnlocked(newsStory: number): boolean;
export declare function getAudibleMusicTrackTextId(): number;
export declare function playEndCreditsMusic(play: boolean): void;
export declare function skipRadioForward(): void;
export declare function freezeRadioStation(radioStation: string | null): void;
export declare function unfreezeRadioStation(radioStation: string | null): void;
export declare function setRadioAutoUnfreeze(toggle: boolean): void;
export declare function setInitialPlayerStation(radioStation: string | null): void;
export declare function setUserRadioControlEnabled(toggle: boolean): void;
export declare function setRadioTrack(radioStation: string | null, radioTrack: string | null): void;
export declare function setRadioTrackWithStartOffset(radioStationName: string | null, mixName: string | null, p2: number): void;
export declare function setNextRadioTrack(radioName: string | null, radioTrack: string | null, p2: string | null, p3: string | null): void;
export declare function setVehicleRadioLoud(vehicle: Vehicle | number, toggle: boolean): void;
export declare function canVehicleReceiveCbRadio(vehicle: Vehicle | number): boolean;
export declare function setMobileRadioEnabledDuringGameplay(toggle: boolean): void;
export declare function doesPlayerVehHaveRadio(): boolean;
export declare function isPlayerVehRadioEnable(): boolean;
export declare function setVehicleRadioEnabled(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setPositionedPlayerVehicleRadioEmitterEnabled(p0: any): void;
export declare function setCustomRadioTrackList(radioStation: string | null, trackListName: string | null, p2: boolean): void;
export declare function clearCustomRadioTrackList(radioStation: string | null): void;
export declare function getNumUnlockedRadioStations(): number;
export declare function findRadioStationIndex(stationNameHash: number): number;
export declare function setRadioStationMusicOnly(radioStation: string | null, toggle: boolean): void;
export declare function setRadioFrontendFadeTime(fadeTime: number): void;
export declare function unlockRadioStationTrackList(radioStation: string | null, trackListName: string | null): void;
export declare function lockRadioStationTrackList(radioStation: string | null, trackListName: string | null): void;
export declare function updateUnlockableDjRadioTracks(enableMixes: boolean): void;
export declare function lockRadioStation(radioStationName: string | null, toggle: boolean): void;
export declare function setRadioStationAsFavourite(radioStation: string | null, toggle: boolean): void;
export declare function isRadioStationFavourited(radioStation: string | null): boolean;
export declare function getNextAudibleBeat(out1?: number | null, out2?: number | null, out3?: number | null): [boolean, number, number, number];
export declare function forceMusicTrackList(radioStation: string | null, trackListName: string | null, milliseconds: number): void;
export declare function getCurrentTrackPlayTime(radioStationName: string | null): number;
export declare function getCurrentTrackSoundName(radioStationName: string | null): number;
export declare function setVehicleMissileWarningEnabled(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setAmbientZoneState(zoneName: string | null, p1: boolean, p2: boolean): void;
export declare function clearAmbientZoneState(zoneName: string | null, p1: boolean): void;
export declare function setAmbientZoneListState(ambientZone: string | null, p1: boolean, p2: boolean): void;
export declare function clearAmbientZoneListState(ambientZone: string | null, p1: boolean): void;
export declare function setAmbientZoneStatePersistent(ambientZone: string | null, p1: boolean, p2: boolean): void;
export declare function setAmbientZoneListStatePersistent(ambientZone: string | null, p1: boolean, p2: boolean): void;
export declare function isAmbientZoneEnabled(ambientZone: string | null): boolean;
export declare function refreshClosestOceanShoreline(): void;
export declare function setCutsceneAudioOverride(name: string | null): void;
export declare function setVariableOnSynchSceneAudio(variableName: string | null, value: number): void;
export declare function playPoliceReport(name: string | null, p1: number): number;
export declare function cancelAllPoliceReports(): void;
export declare function blipSiren(vehicle: Vehicle | number): void;
export declare function overrideVehHorn(vehicle: Vehicle | number, override: boolean, hornHash: number): void;
export declare function isHornActive(vehicle: Vehicle | number): boolean;
export declare function setAggressiveHorns(toggle: boolean): void;
export declare function setRadioPositionAudioMute(p0: boolean): void;
export declare function setVehicleConversationsPersist(p0: boolean, p1: boolean): void;
export declare function setVehicleConversationsPersistNew(p0: boolean, p1: boolean, p2: boolean): void;
export declare function isStreamPlaying(): boolean;
export declare function getStreamPlayTime(): number;
export declare function loadStream(streamName: string | null, soundSet: string | null): boolean;
export declare function loadStreamWithStartOffset(streamName: string | null, startOffset: number, soundSet: string | null): boolean;
export declare function playStreamFromPed(ped: Ped | Player | LocalPlayer | number): void;
export declare function playStreamFromVehicle(vehicle: Vehicle | number): void;
export declare function playStreamFromObject(object: number): void;
export declare function playStreamFrontend(): void;
export declare function playStreamFromPosition(x: number, y: number, z: number): void;
export declare function stopStream(): void;
export declare function stopPedSpeaking(ped: Ped | Player | LocalPlayer | number, shaking: boolean): void;
export declare function blockAllSpeechFromPed(ped: Ped | Player | LocalPlayer | number, p1: boolean, p2: boolean): void;
export declare function stopPedSpeakingSynced(ped: Ped | Player | LocalPlayer | number, p1: boolean): void;
export declare function disablePedPainAudio(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function isAmbientSpeechDisabled(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function blockSpeechContextGroup(p0: string | null, p1: number): void;
export declare function unblockSpeechContextGroup(p0: string | null): void;
export declare function setSirenWithNoDriver(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setSirenBypassMpDriverCheck(vehicle: Vehicle | number, toggle: boolean): void;
export declare function triggerSirenAudio(vehicle: Vehicle | number): void;
export declare function setHornPermanentlyOn(vehicle: Vehicle | number): void;
export declare function setHornEnabled(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setAudioVehiclePriority(vehicle: Vehicle | number, p1: any): void;
export declare function setHornPermanentlyOnTime(vehicle: Vehicle | number, time: number): void;
export declare function useSirenAsHorn(vehicle: Vehicle | number, toggle: boolean): void;
export declare function forceUseAudioGameObject(vehicle: Vehicle | number, audioName: string | null): void;
export declare function preloadVehicleAudioBank(vehicleModel: number): void;
export declare function setVehicleStartupRevSound(vehicle: Vehicle | number, p1: string | null, p2: string | null): void;
export declare function resetVehicleStartupRevSound(vehicle: Vehicle | number): void;
export declare function setVehicleForceReverseWarning(p0: any, p1: any): void;
export declare function isVehicleAudiblyDamaged(vehicle: Vehicle | number): boolean;
export declare function setVehicleAudioEngineDamageFactor(vehicle: Vehicle | number, damageFactor: number): void;
export declare function setVehicleAudioBodyDamageFactor(vehicle: Vehicle | number, intensity: number): void;
export declare function enableVehicleFanbeltDamage(vehicle: Vehicle | number, toggle: boolean): void;
export declare function enableVehicleExhaustPops(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleBoostActive(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setPlayerVehicleAlarmAudioActive(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setScriptUpdateDoorAudio(doorHash: number, toggle: boolean): void;
export declare function playVehicleDoorOpenSound(vehicle: Vehicle | number, doorId: number): void;
export declare function playVehicleDoorCloseSound(vehicle: Vehicle | number, doorId: number): void;
export declare function enableStallWarningSounds(vehicle: Vehicle | number, toggle: boolean): void;
export declare function enableDragRaceStationaryWarningSounds(vehicle: Vehicle | number, enable: boolean): void;
export declare function isGameInControlOfMusic(): boolean;
export declare function setGpsActive(active: boolean): void;
export declare function playMissionCompleteAudio(audioName: string | null): void;
export declare function isMissionCompletePlaying(): boolean;
export declare function isMissionCompleteReadyForUi(): boolean;
export declare function blockDeathJingle(toggle: boolean): void;
export declare function startAudioScene(scene: string | null): boolean;
export declare function stopAudioScene(scene: string | null): void;
export declare function stopAudioScenes(): void;
export declare function isAudioSceneActive(scene: string | null): boolean;
export declare function setAudioSceneVariable(scene: string | null, variable: string | null, value: number): void;
export declare function setAudioScriptCleanupTime(time: number): void;
export declare function addEntityToAudioMixGroup(entity: Entity | number, groupName: string | null, p2: number): void;
export declare function removeEntityFromAudioMixGroup(entity: Entity | number, p1: number): void;
export declare function audioIsMusicPlaying(): boolean;
export declare function audioIsScriptedMusicPlaying(): boolean;
export declare function prepareMusicEvent(eventName: string | null): boolean;
export declare function cancelMusicEvent(eventName: string | null): boolean;
export declare function triggerMusicEvent(eventName: string | null): boolean;
export declare function isMusicOneshotPlaying(): boolean;
export declare function getMusicPlaytime(): number;
export declare function setGlobalRadioSignalLevel(p0: any): void;
export declare function recordBrokenGlass(x: number, y: number, z: number, radius: number): void;
export declare function clearAllBrokenGlass(): void;
export declare function scriptOverridesWindElevation(p0: boolean, p1: any): void;
export declare function setPedWallaDensity(p0: number, p1: number): void;
export declare function setPedInteriorWallaDensity(p0: number, p1: number): void;
export declare function forcePedPanicWalla(): void;
export declare function prepareAlarm(alarmName: string | null): boolean;
export declare function startAlarm(alarmName: string | null, p2: boolean): void;
export declare function stopAlarm(alarmName: string | null, toggle: boolean): void;
export declare function stopAllAlarms(stop: boolean): void;
export declare function isAlarmPlaying(alarmName: string | null): boolean;
export declare function getVehicleDefaultHorn(vehicle: Vehicle | number): number;
export declare function getVehicleDefaultHornIgnoreMods(vehicle: Vehicle | number): number;
export declare function resetPedAudioFlags(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedFootstepsEventsEnabled(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedClothEventsEnabled(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function overridePlayerGroundMaterial(hash: number, toggle: boolean): void;
export declare function useFootstepScriptSweeteners(ped: Ped | Player | LocalPlayer | number, p1: boolean, hash: number): void;
export declare function overrideMicrophoneSettings(hash: number, toggle: boolean): void;
export declare function freezeMicrophone(): void;
export declare function distantCopCarSirens(value: boolean): void;
export declare function setSirenCanBeControlledByAudio(vehicle: Vehicle | number, p1: boolean): void;
export declare function enableStuntJumpAudio(): void;
export declare function setAudioFlag(flagName: string | null, toggle: boolean): void;
export declare function prepareSynchronizedAudioEvent(audioEvent: string | null, p1: any): boolean;
export declare function prepareSynchronizedAudioEventForScene(sceneID: number, audioEvent: string | null): boolean;
export declare function playSynchronizedAudioEvent(sceneID: number): boolean;
export declare function stopSynchronizedAudioEvent(sceneID: number): boolean;
export declare function initSynchSceneAudioWithPosition(audioEvent: string | null, x: number, y: number, z: number): void;
export declare function initSynchSceneAudioWithEntity(audioEvent: string | null, entity: Entity | number): void;
export declare function setAudioSpecialEffectMode(mode: number): void;
export declare function setPortalSettingsOverride(p0: string | null, p1: string | null): void;
export declare function removePortalSettingsOverride(p0: string | null): void;
export declare function stopSmokeGrenadeExplosionSounds(): void;
export declare function getMusicVolSlider(): number;
export declare function requestTennisBanks(ped: Ped | Player | LocalPlayer | number): void;
export declare function unrequestTennisBanks(): void;
export declare function setSkipMinigunSpinUpAudio(p0: boolean): void;
export declare function stopCutsceneAudio(): void;
export declare function hasLoadedMpDataSet(): boolean;
export declare function hasLoadedSpDataSet(): boolean;
export declare function getVehicleHornSoundIndex(vehicle: Vehicle | number): number;
export declare function setVehicleHornSoundIndex(vehicle: Vehicle | number, value: number): void;
export declare function addScriptToRandomPed(name: string | null, model: number, p2: number, p3: number): void;
export declare function registerObjectScriptBrain(scriptName: string | null, modelHash: number, p2: number, activationRange: number, p4: number, p5: number): void;
export declare function isObjectWithinBrainActivationRange(object: number): boolean;
export declare function registerWorldPointScriptBrain(scriptName: string | null, activationRange: number, p2: number): void;
export declare function isWorldPointWithinBrainActivationRange(): boolean;
export declare function enableScriptBrainSet(brainSet: number): void;
export declare function disableScriptBrainSet(brainSet: number): void;
export declare function reactivateAllWorldBrainsThatAreWaitingTillOutOfRange(): void;
export declare function reactivateAllObjectBrainsThatAreWaitingTillOutOfRange(): void;
export declare function reactivateNamedWorldBrainsWaitingTillOutOfRange(scriptName: string | null): void;
export declare function reactivateNamedObjectBrainsWaitingTillOutOfRange(scriptName: string | null): void;
export declare function renderScriptCams(render: boolean, ease: boolean, easeTime: number, p3: boolean, p4: boolean, p5: any): void;
export declare function stopRenderingScriptCamsUsingCatchUp(render: boolean, p1: number, p2: number, p3: any): void;
export declare function createCam(camName: string | null, p1: boolean): number;
export declare function createCamWithParams(camName: string | null, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fov: number, p8: boolean, p9: number): number;
export declare function createCamera(camHash: number, p1: boolean): number;
export declare function createCameraWithParams(camHash: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fov: number, p8: boolean, p9: any): number;
export declare function destroyCam(cam: number, bScriptHostCam: boolean): void;
export declare function destroyAllCams(bScriptHostCam: boolean): void;
export declare function doesCamExist(cam: number): boolean;
export declare function setCamActive(cam: number, active: boolean): void;
export declare function isCamActive(cam: number): boolean;
export declare function isCamRendering(cam: number): boolean;
export declare function getRenderingCam(): number;
export declare function getCamCoord(cam: number): Vector3;
export declare function getCamRot(cam: number, rotationOrder: number): Vector3;
export declare function getCamFov(cam: number): number;
export declare function getCamNearClip(cam: number): number;
export declare function getCamFarClip(cam: number): number;
export declare function getCamNearDof(cam: number): number;
export declare function getCamFarDof(cam: number): number;
export declare function getCamDofStrength(cam: number): number;
export declare function setCamParams(cam: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, fieldOfView: number, p8: any, p9: number, p10: number, p11: number): void;
export declare function setCamCoord(cam: number, posX: number, posY: number, posZ: number): void;
export declare function setCamRot(cam: number, rotX: number, rotY: number, rotZ: number, rotationOrder: number): void;
export declare function setCamFov(cam: number, fieldOfView: number): void;
export declare function setCamNearClip(cam: number, nearClip: number): void;
export declare function setCamFarClip(cam: number, farClip: number): void;
export declare function forceCamFarClip(cam: number, p1: number): void;
export declare function setCamMotionBlurStrength(cam: number, strength: number): void;
export declare function setCamNearDof(cam: number, nearDOF: number): void;
export declare function setCamFarDof(cam: number, farDOF: number): void;
export declare function setCamDofStrength(cam: number, dofStrength: number): void;
export declare function setCamDofPlanes(cam: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function setCamUseShallowDofMode(cam: number, toggle: boolean): void;
export declare function setUseHiDof(): void;
export declare function setUseHiDofOnSyncedSceneThisUpdate(): void;
export declare function setCamDofOverriddenFocusDistance(camera: number, p1: number): void;
export declare function setCamDofOverriddenFocusDistanceBlendLevel(p0: any, p1: number): void;
export declare function setCamDofFnumberOfLens(camera: number, p1: number): void;
export declare function setCamDofFocalLengthMultiplier(camera: number, multiplier: number): void;
export declare function setCamDofFocusDistanceBias(camera: number, p1: number): void;
export declare function setCamDofMaxNearInFocusDistance(camera: number, p1: number): void;
export declare function setCamDofMaxNearInFocusDistanceBlendLevel(camera: number, p1: number): void;
export declare function setCamDofShouldKeepLookAtTargetInFocus(camera: number, state: boolean): void;
export declare function attachCamToEntity(cam: number, entity: Entity | number, xOffset: number, yOffset: number, zOffset: number, isRelative: boolean): void;
export declare function attachCamToPedBone(cam: number, ped: Ped | Player | LocalPlayer | number, boneIndex: number, x: number, y: number, z: number, heading: boolean): void;
export declare function hardAttachCamToPedBone(cam: number, ped: Ped | Player | LocalPlayer | number, boneIndex: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: boolean): void;
export declare function hardAttachCamToEntity(cam: number, entity: Entity | number, xRot: number, yRot: number, zRot: number, xOffset: number, yOffset: number, zOffset: number, isRelative: boolean): void;
export declare function attachCamToVehicleBone(cam: number, vehicle: Vehicle | number, boneIndex: number, relativeRotation: boolean, rotX: number, rotY: number, rotZ: number, offsetX: number, offsetY: number, offsetZ: number, fixedDirection: boolean): void;
export declare function detachCam(cam: number): void;
export declare function setCamInheritRollVehicle(cam: number, p1: boolean): void;
export declare function pointCamAtCoord(cam: number, x: number, y: number, z: number): void;
export declare function pointCamAtEntity(cam: number, entity: Entity | number, p2: number, p3: number, p4: number, p5: boolean): void;
export declare function pointCamAtPedBone(cam: number, ped: Ped | Player | LocalPlayer | number, boneIndex: number, x: number, y: number, z: number, p6: boolean): void;
export declare function stopCamPointing(cam: number): void;
export declare function setCamAffectsAiming(cam: number, toggle: boolean): void;
export declare function setCamControlsMiniMapHeading(cam: number, toggle: boolean): void;
export declare function setCamIsInsideVehicle(cam: number, toggle: boolean): void;
export declare function allowMotionBlurDecay(p0: any, p1: boolean): void;
export declare function setCamDebugName(camera: number, name: string | null): void;
export declare function getDebugCam(): number;
export declare function addCamSplineNode(camera: number, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, length: number, smoothingStyle: number, rotationOrder: number): void;
export declare function addCamSplineNodeUsingCameraFrame(cam: number, cam2: number, length: number, p3: number): void;
export declare function addCamSplineNodeUsingCamera(cam: number, cam2: number, length: number, p3: number): void;
export declare function addCamSplineNodeUsingGameplayFrame(cam: number, length: number, p2: number): void;
export declare function setCamSplinePhase(cam: number, p1: number): void;
export declare function getCamSplinePhase(cam: number): number;
export declare function getCamSplineNodePhase(cam: number): number;
export declare function setCamSplineDuration(cam: number, timeDuration: number): void;
export declare function setCamSplineSmoothingStyle(cam: number, smoothingStyle: number): void;
export declare function getCamSplineNodeIndex(cam: number): number;
export declare function setCamSplineNodeEase(cam: number, easingFunction: number, p2: number, p3: number): void;
export declare function setCamSplineNodeVelocityScale(cam: number, p1: number, scale: number): void;
export declare function overrideCamSplineVelocity(cam: number, p1: number, p2: number, p3: number): void;
export declare function overrideCamSplineMotionBlur(cam: number, p1: number, p2: number, p3: number): void;
export declare function setCamSplineNodeExtraFlags(cam: number, p1: number, flags: number): void;
export declare function isCamSplinePaused(cam: number): boolean;
export declare function setCamActiveWithInterp(camTo: number, camFrom: number, duration: number, easeLocation: number, easeRotation: number): void;
export declare function isCamInterpolating(cam: number): boolean;
export declare function shakeCam(cam: number, type: string | null, amplitude: number): void;
export declare function animatedShakeCam(cam: number, p1: string | null, p2: string | null, p3: string | null, amplitude: number): void;
export declare function isCamShaking(cam: number): boolean;
export declare function setCamShakeAmplitude(cam: number, amplitude: number): void;
export declare function stopCamShaking(cam: number, p1: boolean): void;
export declare function shakeScriptGlobal(p0: string | null, p1: number): void;
export declare function animatedShakeScriptGlobal(p0: string | null, p1: string | null, p2: string | null, p3: number): void;
export declare function isScriptGlobalShaking(): boolean;
export declare function stopScriptGlobalShaking(p0: boolean): void;
export declare function triggerVehiclePartBrokenCameraShake(vehicle: Vehicle | number, p1: number, p2: number): void;
export declare function playCamAnim(cam: number, animName: string | null, animDictionary: string | null, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p9: boolean, p10: number): boolean;
export declare function isCamPlayingAnim(cam: number, animName: string | null, animDictionary: string | null): boolean;
export declare function setCamAnimCurrentPhase(cam: number, phase: number): void;
export declare function getCamAnimCurrentPhase(cam: number): number;
export declare function playSynchronizedCamAnim(p0: any, p1: any, animName: string | null, animDictionary: string | null): boolean;
export declare function setFlyCamHorizontalResponse(cam: number, p1: number, p2: number, p3: number): void;
export declare function setFlyCamVerticalResponse(cam: number, p1: number, p2: number, p3: number): void;
export declare function setFlyCamMaxHeight(cam: number, height: number): void;
export declare function setFlyCamCoordAndConstrain(cam: number, x: number, y: number, z: number): void;
export declare function setFlyCamVerticalControlsThisUpdate(cam: number): void;
export declare function wasFlyCamConstrainedOnPreviousUdpate(cam: number): boolean;
export declare function isScreenFadedOut(): boolean;
export declare function isScreenFadedIn(): boolean;
export declare function isScreenFadingOut(): boolean;
export declare function isScreenFadingIn(): boolean;
export declare function doScreenFadeIn(duration: number): void;
export declare function doScreenFadeOut(duration: number): void;
export declare function setWidescreenBorders(p0: boolean, p1: number): void;
export declare function areWidescreenBordersActive(): boolean;
export declare function getGameplayCamCoord(): Vector3;
export declare function getGameplayCamRot(rotationOrder: number): Vector3;
export declare function getGameplayCamFov(): number;
export declare function setGameplayCamMotionBlurScalingThisUpdate(p0: number): void;
export declare function setGameplayCamMaxMotionBlurStrengthThisUpdate(p0: number): void;
export declare function getGameplayCamRelativeHeading(): number;
export declare function setGameplayCamRelativeHeading(heading: number): void;
export declare function getGameplayCamRelativePitch(): number;
export declare function setGameplayCamRelativePitch(angle: number, scalingFactor: number): void;
export declare function resetGameplayCamFullAttachParentTransformTimer(): void;
export declare function forceCameraRelativeHeadingAndPitch(roll: number, pitch: number, yaw: number): void;
export declare function forceBonnetCameraRelativeHeadingAndPitch(p0: number, p1: number): void;
export declare function setFirstPersonShooterCameraHeading(yaw: number): void;
export declare function setFirstPersonShooterCameraPitch(pitch: number): void;
export declare function setScriptedCameraIsFirstPersonThisFrame(p0: boolean): void;
export declare function shakeGameplayCam(shakeName: string | null, intensity: number): void;
export declare function isGameplayCamShaking(): boolean;
export declare function setGameplayCamShakeAmplitude(amplitude: number): void;
export declare function stopGameplayCamShaking(p0: boolean): void;
export declare function setGameplayCamFollowPedThisUpdate(ped: Ped | Player | LocalPlayer | number): void;
export declare function isGameplayCamRendering(): boolean;
export declare function isInterpolatingFromScriptCams(): boolean;
export declare function isInterpolatingToScriptCams(): boolean;
export declare function setGameplayCamAltitudeFovScalingState(p0: boolean): void;
export declare function disableGameplayCamAltitudeFovScalingThisUpdate(): void;
export declare function isGameplayCamLookingBehind(): boolean;
export declare function setGameplayCamIgnoreEntityCollisionThisUpdate(entity: Entity | number): void;
export declare function disableCamCollisionForObject(entity: Entity | number): void;
export declare function bypassCameraCollisionBuoyancyTestThisUpdate(): void;
export declare function setGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate(entity: Entity | number): void;
export declare function disableFirstPersonCameraWaterClippingTestThisUpdate(): void;
export declare function setFollowCamIgnoreAttachParentMovementThisUpdate(): void;
export declare function isSphereVisible(x: number, y: number, z: number, radius: number): boolean;
export declare function isFollowPedCamActive(): boolean;
export declare function setFollowPedCamThisUpdate(camName: string | null, p1: number): boolean;
export declare function useScriptCamForAmbientPopulationOriginThisFrame(p0: boolean, p1: boolean): void;
export declare function setFollowPedCamLadderAlignThisUpdate(): void;
export declare function setThirdPersonCamRelativeHeadingLimitsThisUpdate(minimum: number, maximum: number): void;
export declare function setThirdPersonCamRelativePitchLimitsThisUpdate(minimum: number, maximum: number): void;
export declare function setThirdPersonCamOrbitDistanceLimitsThisUpdate(p0: number, distance: number): void;
export declare function getThirdPersonCamMinOrbitDistanceSpring(): number;
export declare function getThirdPersonCamMaxOrbitDistanceSpring(): number;
export declare function setInVehicleCamStateThisUpdate(p0: Vehicle | number, p1: number): void;
export declare function disableOnFootFirstPersonViewThisUpdate(): void;
export declare function disableFirstPersonFlashEffectThisUpdate(): void;
export declare function blockFirstPersonOrientationResetThisUpdate(): void;
export declare function getFollowPedCamZoomLevel(): number;
export declare function getFollowPedCamViewMode(): number;
export declare function setFollowPedCamViewMode(viewMode: number): void;
export declare function isFollowVehicleCamActive(): boolean;
export declare function setFollowVehicleCamHighAngleModeThisUpdate(p0: boolean): void;
export declare function setFollowVehicleCamHighAngleModeEveryUpdate(p0: boolean, p1: boolean): void;
export declare function setTableGamesCameraThisUpdate(hash: number): boolean;
export declare function getFollowVehicleCamZoomLevel(): number;
export declare function setFollowVehicleCamZoomLevel(zoomLevel: number): void;
export declare function getFollowVehicleCamViewMode(): number;
export declare function setFollowVehicleCamViewMode(viewMode: number): void;
export declare function getCamViewModeForContext(context: number): number;
export declare function setCamViewModeForContext(context: number, viewMode: number): void;
export declare function getCamActiveViewModeContext(): number;
export declare function useVehicleCamStuntSettingsThisUpdate(): void;
export declare function useDedicatedStuntCameraThisUpdate(camName: string | null): void;
export declare function forceVehicleCamStuntSettingsThisUpdate(): void;
export declare function setFollowVehicleCamSeatThisUpdate(seatIndex: number): void;
export declare function isAimCamActive(): boolean;
export declare function isAimCamActiveInAccurateMode(): boolean;
export declare function isFirstPersonAimCamActive(): boolean;
export declare function disableAimCamThisUpdate(): void;
export declare function getFirstPersonAimCamZoomFactor(): number;
export declare function setFirstPersonAimCamZoomFactor(zoomFactor: number): void;
export declare function setFirstPersonAimCamZoomFactorLimitsThisUpdate(p0: number, p1: number): void;
export declare function setFirstPersonAimCamRelativeHeadingLimitsThisUpdate(p0: number, p1: number): void;
export declare function setFirstPersonAimCamRelativePitchLimitsThisUpdate(p0: number, p1: number): void;
export declare function setFirstPersonAimCamNearClipThisUpdate(p0: number): void;
export declare function setThirdPersonAimCamNearClipThisUpdate(p0: number): void;
export declare function setAllowCustomVehicleDriveByCamThisUpdate(p0: boolean): void;
export declare function forceTightspaceCustomFramingThisUpdate(): void;
export declare function getFinalRenderedCamCoord(): Vector3;
export declare function getFinalRenderedCamRot(rotationOrder: number): Vector3;
export declare function getFinalRenderedRemotePlayerCamRot(player: Player | number, rotationOrder: number): Vector3;
export declare function getFinalRenderedCamFov(): number;
export declare function getFinalRenderedRemotePlayerCamFov(player: Player | number): number;
export declare function getFinalRenderedCamNearClip(): number;
export declare function getFinalRenderedCamFarClip(): number;
export declare function getFinalRenderedCamNearDof(): number;
export declare function getFinalRenderedCamFarDof(): number;
export declare function getFinalRenderedCamMotionBlurStrength(): number;
export declare function setGameplayCoordHint(x: number, y: number, z: number, duration: number, blendOutDuration: number, blendInDuration: number, p6: number): void;
export declare function setGameplayPedHint(ped: Ped | Player | LocalPlayer | number, x1: number, y1: number, z1: number, p4: boolean, duration: number, blendOutDuration: number, blendInDuration: number): void;
export declare function setGameplayVehicleHint(vehicle: Vehicle | number, offsetX: number, offsetY: number, offsetZ: number, p4: boolean, time: number, easeInTime: number, easeOutTime: number): void;
export declare function setGameplayObjectHint(object: number, xOffset: number, yOffset: number, zOffset: number, p4: boolean, time: number, easeInTime: number, easeOutTime: number): void;
export declare function setGameplayEntityHint(entity: Entity | number, xOffset: number, yOffset: number, zOffset: number, p4: boolean, time: number, easeInTime: number, easeOutTime: number, p8: number): void;
export declare function isGameplayHintActive(): boolean;
export declare function stopGameplayHint(p0: boolean): void;
export declare function stopGameplayHintBeingCancelledThisUpdate(p0: boolean): void;
export declare function stopCodeGameplayHint(p0: boolean): void;
export declare function isCodeGameplayHintActive(): boolean;
export declare function setGameplayHintFov(FOV: number): void;
export declare function setGameplayHintFollowDistanceScalar(value: number): void;
export declare function setGameplayHintBaseOrbitPitchOffset(value: number): void;
export declare function setGameplayHintCameraRelativeSideOffset(xOffset: number): void;
export declare function setGameplayHintCameraRelativeVerticalOffset(yOffset: number): void;
export declare function setGameplayHintCameraBlendToFollowPedMediumViewMode(toggle: boolean): void;
export declare function setCinematicButtonActive(p0: boolean): void;
export declare function isCinematicCamRendering(): boolean;
export declare function shakeCinematicCam(shakeType: string | null, amount: number): void;
export declare function isCinematicCamShaking(): boolean;
export declare function setCinematicCamShakeAmplitude(p0: number): void;
export declare function stopCinematicCamShaking(p0: boolean): void;
export declare function disableCinematicBonnetCameraThisUpdate(): void;
export declare function disableCinematicVehicleIdleModeThisUpdate(): void;
export declare function invalidateCinematicVehicleIdleMode(): void;
export declare function invalidateIdleCam(): void;
export declare function isCinematicIdleCamRendering(): boolean;
export declare function isCinematicFirstPersonVehicleInteriorCamRendering(): boolean;
export declare function createCinematicShot(p0: number, time: number, p2: boolean, entity: Entity | number): void;
export declare function isCinematicShotActive(p0: number): boolean;
export declare function stopCinematicShot(p0: number): void;
export declare function forceCinematicRenderingThisUpdate(toggle: boolean): void;
export declare function setCinematicNewsChannelActiveThisUpdate(): void;
export declare function setCinematicModeActive(toggle: boolean): void;
export declare function isInVehicleMobilePhoneCameraRendering(): boolean;
export declare function disableCinematicSlowMoThisUpdate(): boolean;
export declare function isBonnetCinematicCamRendering(): boolean;
export declare function isCinematicCamInputActive(): boolean;
export declare function ignoreMenuPreferenceForBonnetCameraThisUpdate(): void;
export declare function bypassCutsceneCamRenderingThisUpdate(): void;
export declare function stopCutsceneCamShaking(p0: any): void;
export declare function setCutsceneCamFarClipThisUpdate(p0: number): void;
export declare function getFocusPedOnScreen(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): number;
export declare function disableNearClipScanThisUpdate(): void;
export declare function setCamDeathFailEffectState(p0: number): void;
export declare function setFirstPersonFlashEffectType(p0: any): void;
export declare function setFirstPersonFlashEffectVehicleModelName(vehicleName: string | null): void;
export declare function setFirstPersonFlashEffectVehicleModelHash(vehicleModel: number): void;
export declare function isAllowedIndependentCameraModes(): boolean;
export declare function cameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate(): void;
export declare function replayGetMaxDistanceAllowedFromPlayer(): number;
export declare function setClockTime(hour: number, minute: number, second: number): void;
export declare function pauseClock(toggle: boolean): void;
export declare function advanceClockTimeTo(hour: number, minute: number, second: number): void;
export declare function addToClockTime(hours: number, minutes: number, seconds: number): void;
export declare function getClockHours(): number;
export declare function getClockMinutes(): number;
export declare function getClockSeconds(): number;
export declare function setClockDate(day: number, month: number, year: number): void;
export declare function getClockDayOfWeek(): number;
export declare function getClockDayOfMonth(): number;
export declare function getClockMonth(): number;
export declare function getClockYear(): number;
export declare function getMillisecondsPerGameMinute(): number;
export declare function getPosixTime(year?: number | null, month?: number | null, day?: number | null, hour?: number | null, minute?: number | null, second?: number | null): [void, number, number, number, number, number, number];
export declare function getUtcTime(year?: number | null, month?: number | null, day?: number | null, hour?: number | null, minute?: number | null, second?: number | null): [void, number, number, number, number, number, number];
export declare function getLocalTime(year?: number | null, month?: number | null, day?: number | null, hour?: number | null, minute?: number | null, second?: number | null): [void, number, number, number, number, number, number];
export declare function requestCutscene(cutsceneName: string | null, flags: number): void;
export declare function requestCutsceneWithPlaybackList(cutsceneName: string | null, playbackFlags: number, flags: number): void;
export declare function removeCutscene(): void;
export declare function hasCutsceneLoaded(): boolean;
export declare function hasThisCutsceneLoaded(cutsceneName: string | null): boolean;
export declare function setScriptCanStartCutscene(threadId: number): void;
export declare function canRequestAssetsForCutsceneEntity(): boolean;
export declare function isCutscenePlaybackFlagSet(flag: number): boolean;
export declare function setCutsceneEntityStreamingFlags(cutsceneEntName: string | null, p1: number, p2: number): void;
export declare function requestCutFile(cutsceneName: string | null): void;
export declare function hasCutFileLoaded(cutsceneName: string | null): boolean;
export declare function removeCutFile(cutsceneName: string | null): void;
export declare function getCutFileConcatCount(cutsceneName: string | null): number;
export declare function startCutscene(flags: number): void;
export declare function startCutsceneAtCoords(x: number, y: number, z: number, flags: number): void;
export declare function stopCutscene(p0: boolean): void;
export declare function stopCutsceneImmediately(): void;
export declare function setCutsceneOrigin(x: number, y: number, z: number, p3: number, p4: number): void;
export declare function setCutsceneOriginAndOrientation(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number): void;
export declare function getCutsceneTime(): number;
export declare function getCutsceneTotalDuration(): number;
export declare function getCutsceneEndTime(): number;
export declare function getCutscenePlayDuration(): number;
export declare function wasCutsceneSkipped(): boolean;
export declare function hasCutsceneFinished(): boolean;
export declare function isCutsceneActive(): boolean;
export declare function isCutscenePlaying(): boolean;
export declare function getCutsceneSectionPlaying(): number;
export declare function getEntityIndexOfCutsceneEntity(cutsceneEntName: string | null, modelHash: number): number;
export declare function getCutsceneConcatSectionPlaying(): number;
export declare function isCutsceneAuthorized(cutsceneName: string | null): boolean;
export declare function doesCutsceneHandleExist(cutsceneHandle: number): number;
export declare function registerEntityForCutscene(cutscenePed: Ped | Player | LocalPlayer | number, cutsceneEntName: string | null, p2: number, modelHash: number, p4: number): void;
export declare function getEntityIndexOfRegisteredEntity(cutsceneEntName: string | null, modelHash: number): number;
export declare function setVehicleModelPlayerWillExitScene(modelHash: number): void;
export declare function setCutsceneTriggerArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void;
export declare function canSetEnterStateForRegisteredEntity(cutsceneEntName: string | null, modelHash: number): boolean;
export declare function canSetExitStateForRegisteredEntity(cutsceneEntName: string | null, modelHash: number): boolean;
export declare function canSetExitStateForCamera(p0: boolean): boolean;
export declare function setPadCanShakeDuringCutscene(toggle: boolean): void;
export declare function setCutsceneFadeValues(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
export declare function setCutsceneMultiheadFade(p0: boolean, p1: boolean, p2: boolean, p3: boolean): void;
export declare function setCutsceneMultiheadFadeManual(p0: boolean): void;
export declare function isMultiheadFadeUp(): boolean;
export declare function networkSetMocapCutsceneCanBeSkipped(p0: boolean): void;
export declare function setCarGeneratorsCanUpdateDuringCutscene(p0: boolean): void;
export declare function canUseMobilePhoneDuringCutscene(): boolean;
export declare function setCutsceneCanBeSkipped(p0: boolean): void;
export declare function setCanDisplayMinimapDuringCutsceneThisUpdate(): void;
export declare function setCutscenePedComponentVariation(cutsceneEntName: string | null, componentId: number, drawableId: number, textureId: number, modelHash: number): void;
export declare function setCutscenePedComponentVariationFromPed(cutsceneEntName: string | null, ped: Ped | Player | LocalPlayer | number, modelHash: number): void;
export declare function doesCutsceneEntityExist(cutsceneEntName: string | null, modelHash: number): boolean;
export declare function setCutscenePedPropVariation(cutsceneEntName: string | null, componentId: number, drawableId: number, textureId: number, modelHash: number): void;
export declare function hasCutsceneCutThisFrame(): boolean;
export declare function datafileWatchRequestId(requestId: number): void;
export declare function datafileClearWatchList(): void;
export declare function datafileIsValidRequestId(index: number): boolean;
export declare function datafileHasLoadedFileData(requestId: number): boolean;
export declare function datafileHasValidFileData(requestId: number): boolean;
export declare function datafileSelectActiveFile(requestId: number, p1: any): boolean;
export declare function datafileDeleteRequestedFile(requestId: number): boolean;
export declare function ugcCreateContent(data: any | null, dataCount: number, contentName: string | null, description: string | null, tagsCsv: string | null, contentTypeName: string | null, publish: boolean, p7: any): [boolean, any];
export declare function ugcCreateMission(contentName: string | null, description: string | null, tagsCsv: string | null, contentTypeName: string | null, publish: boolean, p5: any): boolean;
export declare function ugcUpdateContent(contentId: string | null, data: any | null, dataCount: number, contentName: string | null, description: string | null, tagsCsv: string | null, contentTypeName: string | null, p7: any): [boolean, any];
export declare function ugcUpdateMission(contentId: string | null, contentName: string | null, description: string | null, tagsCsv: string | null, contentTypeName: string | null, p5: any): boolean;
export declare function ugcSetPlayerData(contentId: string | null, rating: number, contentTypeName: string | null, p3: any): boolean;
export declare function datafileSelectUgcData(p0: number, p1: any): boolean;
export declare function datafileSelectUgcStats(p0: number, p1: boolean, p2: any): boolean;
export declare function datafileSelectUgcPlayerData(p0: number, p1: any): boolean;
export declare function datafileSelectCreatorStats(p0: number, p1: any): boolean;
export declare function datafileLoadOfflineUgc(filename: string | null, p1: any): boolean;
export declare function datafileCreate(p0: number): void;
export declare function datafileDelete(p0: number): void;
export declare function datafileStoreMissionHeader(p0: number): void;
export declare function datafileFlushMissionHeader(): void;
export declare function datafileGetFileDict(p0: number): any;
export declare function datafileStartSaveToCloud(filename: string | null, p1: any): boolean;
export declare function datafileUpdateSaveToCloud(p0?: boolean | null): [boolean, boolean];
export declare function datafileIsSavePending(): boolean;
export declare function datafileLoadOfflineUgcForAdditionalDataFile(p0: any, p1: any): boolean;
export declare function datafileDeleteForAdditionalDataFile(p0: any): void;
export declare function datafileGetFileDictForAdditionalDataFile(p0: any): any;
export declare function datadictSetBool(objectData: any | null, key: string | null, value: boolean): [void, any];
export declare function datadictSetInt(objectData: any | null, key: string | null, value: number): [void, any];
export declare function datadictSetFloat(objectData: any | null, key: string | null, value: number): [void, any];
export declare function datadictSetString(objectData: any | null, key: string | null, value: string | null): [void, any];
export declare function datadictSetVector(objectData: any | null, key: string | null, valueX: number, valueY: number, valueZ: number): [void, any];
export declare function datadictCreateDict(objectData: any | null, key: string | null): [any, any];
export declare function datadictCreateArray(objectData: any | null, key: string | null): [any, any];
export declare function datadictGetBool(objectData: any | null, key: string | null): [boolean, any];
export declare function datadictGetInt(objectData: any | null, key: string | null): [number, any];
export declare function datadictGetFloat(objectData: any | null, key: string | null): [number, any];
export declare function datadictGetString(objectData: any | null, key: string | null): [string | null, any];
export declare function datadictGetVector(objectData: any | null, key: string | null): [Vector3, any];
export declare function datadictGetDict(objectData: any | null, key: string | null): [any, any];
export declare function datadictGetArray(objectData: any | null, key: string | null): [any, any];
export declare function datadictGetType(objectData: any | null, key: string | null): [number, any];
export declare function dataarrayAddBool(arrayData: any | null, value: boolean): [void, any];
export declare function dataarrayAddInt(arrayData: any | null, value: number): [void, any];
export declare function dataarrayAddFloat(arrayData: any | null, value: number): [void, any];
export declare function dataarrayAddString(arrayData: any | null, value: string | null): [void, any];
export declare function dataarrayAddVector(arrayData: any | null, valueX: number, valueY: number, valueZ: number): [void, any];
export declare function dataarrayAddDict(arrayData?: any | null): [any, any];
export declare function dataarrayGetBool(arrayData: any | null, arrayIndex: number): [boolean, any];
export declare function dataarrayGetInt(arrayData: any | null, arrayIndex: number): [number, any];
export declare function dataarrayGetFloat(arrayData: any | null, arrayIndex: number): [number, any];
export declare function dataarrayGetString(arrayData: any | null, arrayIndex: number): [string | null, any];
export declare function dataarrayGetVector(arrayData: any | null, arrayIndex: number): [Vector3, any];
export declare function dataarrayGetDict(arrayData: any | null, arrayIndex: number): [any, any];
export declare function dataarrayGetCount(arrayData?: any | null): [number, any];
export declare function dataarrayGetType(arrayData: any | null, arrayIndex: number): [number, any];
export declare function decorSetTime(entity: Entity | number, propertyName: string | null, timestamp: number): boolean;
export declare function decorSetBool(entity: Entity | number, propertyName: string | null, value: boolean): boolean;
export declare function decorSetFloat(entity: Entity | number, propertyName: string | null, value: number): boolean;
export declare function decorSetInt(entity: Entity | number, propertyName: string | null, value: number): boolean;
export declare function decorGetBool(entity: Entity | number, propertyName: string | null): boolean;
export declare function decorGetFloat(entity: Entity | number, propertyName: string | null): number;
export declare function decorGetInt(entity: Entity | number, propertyName: string | null): number;
export declare function decorExistOn(entity: Entity | number, propertyName: string | null): boolean;
export declare function decorRemove(entity: Entity | number, propertyName: string | null): boolean;
export declare function decorRegister(propertyName: string | null, type: number): void;
export declare function decorIsRegisteredAsType(propertyName: string | null, type: number): boolean;
export declare function decorRegisterLock(): void;
export declare function areAnyCcsPending(): boolean;
export declare function isDlcPresent(dlcHash: number): boolean;
export declare function dlcCheckCloudDataCorrect(): boolean;
export declare function getExtracontentCloudResult(): number;
export declare function dlcCheckCompatPackConfiguration(): boolean;
export declare function getEverHadBadPackOrder(): boolean;
export declare function getIsLoadingScreenActive(): boolean;
export declare function getIsInitialLoadingScreenActive(): boolean;
export declare function hasCloudRequestsFinished(p0: boolean | null, unused: number): [boolean, boolean];
export declare function onEnterSp(): void;
export declare function onEnterMp(): void;
export declare function doesEntityExist(entity: Entity | number): boolean;
export declare function doesEntityBelongToThisScript(entity: Entity | number, p1: boolean): boolean;
export declare function doesEntityHaveDrawable(entity: Entity | number): boolean;
export declare function doesEntityHavePhysics(entity: Entity | number): boolean;
export declare function doesEntityHaveSkeleton(entity: Entity | number): boolean;
export declare function doesEntityHaveAnimDirector(entity: Entity | number): boolean;
export declare function hasEntityAnimFinished(entity: Entity | number, animDict: string | null, animName: string | null, p3: number): boolean;
export declare function hasEntityBeenDamagedByAnyObject(entity: Entity | number): boolean;
export declare function hasEntityBeenDamagedByAnyPed(entity: Entity | number): boolean;
export declare function hasEntityBeenDamagedByAnyVehicle(entity: Entity | number): boolean;
export declare function hasEntityBeenDamagedByEntity(entity1: Entity | number, entity2: Entity | number, p2: boolean): boolean;
export declare function hasEntityClearLosToEntity(entity1: Entity | number, entity2: Entity | number, traceType: number): boolean;
export declare function hasEntityClearLosToEntityAdjustForCover(entity1: Entity | number, entity2: Entity | number, traceType: number): boolean;
export declare function hasEntityClearLosToEntityInFront(entity1: Entity | number, entity2: Entity | number): boolean;
export declare function hasEntityCollidedWithAnything(entity: Entity | number): boolean;
export declare function getLastEntityHitByEntity(entity: Entity | number): number;
export declare function getLastMaterialHitByEntity(entity: Entity | number): number;
export declare function getCollisionNormalOfLastHitForEntity(entity: Entity | number): Vector3;
export declare function forceEntityAiAndAnimationUpdate(entity: Entity | number): void;
export declare function getEntityAnimCurrentTime(entity: Entity | number, animDict: string | null, animName: string | null): number;
export declare function getEntityAnimTotalTime(entity: Entity | number, animDict: string | null, animName: string | null): number;
export declare function getAnimDuration(animDict: string | null, animName: string | null): number;
export declare function getEntityAttachedTo(entity: Entity | number): number;
export declare function getEntityCoords(entity: Entity | number, alive: boolean): Vector3;
export declare function getEntityForwardVector(entity: Entity | number): Vector3;
export declare function getEntityForwardX(entity: Entity | number): number;
export declare function getEntityForwardY(entity: Entity | number): number;
export declare function getEntityHeading(entity: Entity | number): number;
export declare function getEntityHeadingFromEulers(entity: Entity | number): number;
export declare function getEntityHealth(entity: Entity | number): number;
export declare function getEntityMaxHealth(entity: Entity | number): number;
export declare function setEntityMaxHealth(entity: Entity | number, value: number): void;
export declare function getEntityHeight(entity: Entity | number, X: number, Y: number, Z: number, atTop: boolean, inWorldCoords: boolean): number;
export declare function getEntityHeightAboveGround(entity: Entity | number): number;
export declare function getEntityMatrix(entity: Entity | number, forwardVector?: Vector3 | null, rightVector?: Vector3 | null, upVector?: Vector3 | null, position?: Vector3 | null): [void, Vector3, Vector3, Vector3, Vector3];
export declare function getEntityModel(entity: Entity | number): number;
export declare function getOffsetFromEntityGivenWorldCoords(entity: Entity | number, posX: number, posY: number, posZ: number): Vector3;
export declare function getOffsetFromEntityInWorldCoords(entity: Entity | number, offsetX: number, offsetY: number, offsetZ: number): Vector3;
export declare function getEntityPitch(entity: Entity | number): number;
export declare function getEntityQuaternion(entity: Entity | number, x?: number | null, y?: number | null, z?: number | null, w?: number | null): [void, number, number, number, number];
export declare function getEntityRoll(entity: Entity | number): number;
export declare function getEntityRotation(entity: Entity | number, rotationOrder: number): Vector3;
export declare function getEntityRotationVelocity(entity: Entity | number): Vector3;
export declare function getEntityScript(entity: Entity | number, script?: number | null): [string | null, number];
export declare function getEntitySpeed(entity: Entity | number): number;
export declare function getEntitySpeedVector(entity: Entity | number, relative: boolean): Vector3;
export declare function getEntityUprightValue(entity: Entity | number): number;
export declare function getEntityVelocity(entity: Entity | number): Vector3;
export declare function getObjectIndexFromEntityIndex(entity: Entity | number): number;
export declare function getPedIndexFromEntityIndex(entity: Entity | number): number;
export declare function getVehicleIndexFromEntityIndex(entity: Entity | number): number;
export declare function getWorldPositionOfEntityBone(entity: Entity | number, boneIndex: number): Vector3;
export declare function getNearestPlayerToEntity(entity: Entity | number): number;
export declare function getNearestPlayerToEntityOnTeam(entity: Entity | number, team: number): number;
export declare function getNearestParticipantToEntity(entity: Entity | number): number;
export declare function getEntityType(entity: Entity | number): number;
export declare function getEntityPopulationType(entity: Entity | number): number;
export declare function isAnEntity(handle: number): boolean;
export declare function isEntityAPed(entity: Entity | number): boolean;
export declare function isEntityAMissionEntity(entity: Entity | number): boolean;
export declare function isEntityAVehicle(entity: Entity | number): boolean;
export declare function isEntityAnObject(entity: Entity | number): boolean;
export declare function isEntityAtCoord(entity: Entity | number, xPos: number, yPos: number, zPos: number, xSize: number, ySize: number, zSize: number, p7: boolean, p8: boolean, p9: number): boolean;
export declare function isEntityAtEntity(entity1: Entity | number, entity2: Entity | number, xSize: number, ySize: number, zSize: number, p5: boolean, p6: boolean, p7: number): boolean;
export declare function isEntityAttached(entity: Entity | number): boolean;
export declare function isEntityAttachedToAnyObject(entity: Entity | number): boolean;
export declare function isEntityAttachedToAnyPed(entity: Entity | number): boolean;
export declare function isEntityAttachedToAnyVehicle(entity: Entity | number): boolean;
export declare function isEntityAttachedToEntity(from: Entity | number, to: Entity | number): boolean;
export declare function isEntityDead(entity: Entity | number, p1: boolean): boolean;
export declare function isEntityInAir(entity: Entity | number): boolean;
export declare function isEntityInAngledArea(entity: Entity | number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, debug: boolean, includeZ: boolean, p10: any): boolean;
export declare function isEntityInArea(entity: Entity | number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: boolean, p8: boolean, p9: any): boolean;
export declare function isEntityInZone(entity: Entity | number, zone: string | null): boolean;
export declare function isEntityInWater(entity: Entity | number): boolean;
export declare function getEntitySubmergedLevel(entity: Entity | number): number;
export declare function setEntityRequiresMoreExpensiveRiverCheck(entity: Entity | number, toggle: boolean): void;
export declare function isEntityOnScreen(entity: Entity | number): boolean;
export declare function isEntityPlayingAnim(entity: Entity | number, animDict: string | null, animName: string | null, taskFlag: number): boolean;
export declare function isEntityStatic(entity: Entity | number): boolean;
export declare function isEntityTouchingEntity(entity: Entity | number, targetEntity: Entity | number): boolean;
export declare function isEntityTouchingModel(entity: Entity | number, modelHash: number): boolean;
export declare function isEntityUpright(entity: Entity | number, angle: number): boolean;
export declare function isEntityUpsidedown(entity: Entity | number): boolean;
export declare function isEntityVisible(entity: Entity | number): boolean;
export declare function isEntityVisibleToScript(entity: Entity | number): boolean;
export declare function isEntityOccluded(entity: Entity | number): boolean;
export declare function wouldEntityBeOccluded(entityModelHash: number, x: number, y: number, z: number, p4: boolean): boolean;
export declare function isEntityWaitingForWorldCollision(entity: Entity | number): boolean;
export declare function applyForceToEntityCenterOfMass(entity: Entity | number, forceType: number, x: number, y: number, z: number, p5: boolean, isDirectionRel: boolean, isForceRel: boolean, p8: boolean): void;
export declare function applyForceToEntity(entity: Entity | number, forceFlags: number, x: number, y: number, z: number, offX: number, offY: number, offZ: number, boneIndex: number, isDirectionRel: boolean, ignoreUpVec: boolean, isForceRel: boolean, p12: boolean, p13: boolean): void;
export declare function attachEntityToEntity(entity1: Entity | number, entity2: Entity | number, boneIndex: number, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, p9: boolean, useSoftPinning: boolean, collision: boolean, isPed: boolean, vertexIndex: number, fixedRot: boolean, p15: any): void;
export declare function attachEntityBoneToEntityBone(entity1: Entity | number, entity2: Entity | number, boneIndex1: number, boneIndex2: number, p4: boolean, p5: boolean): void;
export declare function attachEntityBoneToEntityBoneYForward(entity1: Entity | number, entity2: Entity | number, boneIndex1: number, boneIndex2: number, p4: boolean, p5: boolean): void;
export declare function attachEntityToEntityPhysically(entity1: Entity | number, entity2: Entity | number, boneIndex1: number, boneIndex2: number, xPos1: number, yPos1: number, zPos1: number, xPos2: number, yPos2: number, zPos2: number, xRot: number, yRot: number, zRot: number, breakForce: number, fixedRot: boolean, p15: boolean, collision: boolean, p17: boolean, p18: number): void;
export declare function attachEntityToEntityPhysicallyOverrideInverseMass(firstEntityIndex: Entity | number, secondEntityIndex: Entity | number, firstEntityBoneIndex: number, secondEntityBoneIndex: number, secondEntityOffsetX: number, secondEntityOffsetY: number, secondEntityOffsetZ: number, firstEntityOffsetX: number, firstEntityOffsetY: number, firstEntityOffsetZ: number, vecRotationX: number, vecRotationY: number, vecRotationZ: number, physicalStrength: number, constrainRotation: boolean, doInitialWarp: boolean, collideWithEntity: boolean, addInitialSeperation: boolean, rotOrder: number, invMassScaleA: number, invMassScaleB: number): void;
export declare function processEntityAttachments(entity: Entity | number): void;
export declare function getEntityBoneIndexByName(entity: Entity | number, boneName: string | null): number;
export declare function clearEntityLastDamageEntity(entity: Entity | number): void;
export declare function deleteEntity(entity?: Entity | number | null): [void, number];
export declare function detachEntity(entity: Entity | number, dynamic: boolean, collision: boolean): void;
export declare function freezeEntityPosition(entity: Entity | number, toggle: boolean): void;
export declare function setEntityShouldFreezeWaitingOnCollision(entity: Entity | number, toggle: boolean): void;
export declare function playEntityAnim(entity: Entity | number, animName: string | null, animDict: string | null, p3: number, loop: boolean, stayInAnim: boolean, p6: boolean, delta: number, bitset: any): boolean;
export declare function playSynchronizedEntityAnim(entity: Entity | number, syncedScene: number, animation: string | null, propName: string | null, p4: number, p5: number, p6: any, p7: number): boolean;
export declare function playSynchronizedMapEntityAnim(x1: number, y1: number, z1: number, x2: number, y2: any, z2: number, p6: string | null, p7: string | null, p8: number, p9: number, p10: any, p11: number): boolean;
export declare function stopSynchronizedMapEntityAnim(x1: number, y1: number, z1: number, x2: number, y2: any, z2: number): boolean;
export declare function stopEntityAnim(entity: Entity | number, animation: string | null, animGroup: string | null, p3: number): boolean;
export declare function stopSynchronizedEntityAnim(entity: Entity | number, p1: number, p2: boolean): boolean;
export declare function hasAnimEventFired(entity: Entity | number, actionHash: number): boolean;
export declare function findAnimEventPhase(animDictionary: string | null, animName: string | null, p2: string | null, p3?: any | null, p4?: any | null): [boolean, any, any];
export declare function setEntityAnimCurrentTime(entity: Entity | number, animDictionary: string | null, animName: string | null, time: number): void;
export declare function setEntityAnimSpeed(entity: Entity | number, animDictionary: string | null, animName: string | null, speedMultiplier: number): void;
export declare function setEntityAsMissionEntity(entity: Entity | number, p1: boolean, p2: boolean): void;
export declare function setEntityAsNoLongerNeeded(entity?: Entity | number | null): [void, number];
export declare function setPedAsNoLongerNeeded(ped?: Ped | Player | LocalPlayer | number | null): [void, number];
export declare function setVehicleAsNoLongerNeeded(vehicle?: Vehicle | number | null): [void, number];
export declare function setObjectAsNoLongerNeeded(object?: number | null): [void, number];
export declare function setEntityCanBeDamaged(entity: Entity | number, toggle: boolean): void;
export declare function getEntityCanBeDamaged(entity: Entity | number): boolean;
export declare function setEntityCanBeDamagedByRelationshipGroup(entity: Entity | number, bCanBeDamaged: boolean, relGroup: number): void;
export declare function setEntityCanOnlyBeDamagedByScriptParticipants(entity: Entity | number, toggle: boolean): void;
export declare function setEntityCanBeTargetedWithoutLos(entity: Entity | number, toggle: boolean): void;
export declare function setEntityCollision(entity: Entity | number, toggle: boolean, keepPhysics: boolean): void;
export declare function getEntityCollisionDisabled(entity: Entity | number): boolean;
export declare function setEntityCompletelyDisableCollision(entity: Entity | number, toggle: boolean, keepPhysics: boolean): void;
export declare function setEntityCoords(entity: Entity | number, xPos: number, yPos: number, zPos: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, clearArea: boolean): void;
export declare function setEntityCoordsWithoutPlantsReset(entity: Entity | number, xPos: number, yPos: number, zPos: number, alive: boolean, deadFlag: boolean, ragdollFlag: boolean, clearArea: boolean): void;
export declare function setEntityCoordsNoOffset(entity: Entity | number, xPos: number, yPos: number, zPos: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): void;
export declare function setEntityDynamic(entity: Entity | number, toggle: boolean): void;
export declare function setEntityHeading(entity: Entity | number, heading: number): void;
export declare function setEntityHealth(entity: Entity | number, health: number, instigator: Entity | number, weaponType: number): void;
export declare function setEntityInvincible(entity: Entity | number, toggle: boolean): void;
export declare function setEntityIsTargetPriority(entity: Entity | number, p1: boolean, p2: number): void;
export declare function setEntityLights(entity: Entity | number, toggle: boolean): void;
export declare function setEntityLoadCollisionFlag(entity: Entity | number, toggle: boolean, p2: any): void;
export declare function hasCollisionLoadedAroundEntity(entity: Entity | number): boolean;
export declare function setEntityMaxSpeed(entity: Entity | number, speed: number): void;
export declare function setEntityOnlyDamagedByPlayer(entity: Entity | number, toggle: boolean): void;
export declare function setEntityOnlyDamagedByRelationshipGroup(entity: Entity | number, p1: boolean, p2: any): void;
export declare function setEntityProofs(entity: Entity | number, bulletProof: boolean, fireProof: boolean, explosionProof: boolean, collisionProof: boolean, meleeProof: boolean, steamProof: boolean, p7: boolean, waterProof: boolean): void;
export declare function getEntityProofs(entity: Entity | number, bulletProof?: boolean | null, fireProof?: boolean | null, explosionProof?: boolean | null, collisionProof?: boolean | null, meleeProof?: boolean | null, steamProof?: boolean | null, p7?: boolean | null, drownProof?: boolean | null): [boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean];
export declare function setEntityQuaternion(entity: Entity | number, x: number, y: number, z: number, w: number): void;
export declare function setEntityRecordsCollisions(entity: Entity | number, toggle: boolean): void;
export declare function setEntityRotation(entity: Entity | number, pitch: number, roll: number, yaw: number, rotationOrder: number, p5: boolean): void;
export declare function setEntityVisible(entity: Entity | number, toggle: boolean, p2: boolean): void;
export declare function setEntityWaterReflectionFlag(entity: Entity | number, toggle: boolean): void;
export declare function setEntityMirrorReflectionFlag(entity: Entity | number, p1: boolean): void;
export declare function setEntityVelocity(entity: Entity | number, x: number, y: number, z: number): void;
export declare function setEntityAngularVelocity(entity: Entity | number, x: number, y: number, z: number): void;
export declare function setEntityHasGravity(entity: Entity | number, toggle: boolean): void;
export declare function setEntityLodDist(entity: Entity | number, value: number): void;
export declare function getEntityLodDist(entity: Entity | number): number;
export declare function setEntityAlpha(entity: Entity | number, alphaLevel: number, skin: boolean): void;
export declare function getEntityAlpha(entity: Entity | number): number;
export declare function resetEntityAlpha(entity: Entity | number): void;
export declare function resetPickupEntityGlow(entity: Entity | number): void;
export declare function setPickupCollidesWithProjectiles(p0: any, p1: any): void;
export declare function setEntitySortBias(entity: Entity | number, p1: number): void;
export declare function setEntityAlwaysPrerender(entity: Entity | number, toggle: boolean): void;
export declare function setEntityRenderScorched(entity: Entity | number, toggle: boolean): void;
export declare function setEntityTrafficlightOverride(entity: Entity | number, state: number): void;
export declare function setEntityIsInVehicle(entity: Entity | number): void;
export declare function createModelSwap(x: number, y: number, z: number, radius: number, originalModel: number, newModel: number, p6: boolean): void;
export declare function removeModelSwap(x: number, y: number, z: number, radius: number, originalModel: number, newModel: number, p6: boolean): void;
export declare function createModelHide(x: number, y: number, z: number, radius: number, modelHash: number, p5: boolean): void;
export declare function createModelHideExcludingScriptObjects(x: number, y: number, z: number, radius: number, modelHash: number, p5: boolean): void;
export declare function removeModelHide(x: number, y: number, z: number, radius: number, modelHash: number, p5: boolean): void;
export declare function createForcedObject(x: number, y: number, z: number, p3: any, modelHash: number, p5: boolean): void;
export declare function removeForcedObject(x: number, y: number, z: number, p3: number, modelHash: number): void;
export declare function setEntityNoCollisionEntity(entity1: Entity | number, entity2: Entity | number, thisFrameOnly: boolean): void;
export declare function setEntityMotionBlur(entity: Entity | number, toggle: boolean): void;
export declare function setCanAutoVaultOnEntity(entity: Entity | number, toggle: boolean): void;
export declare function setCanClimbOnEntity(entity: Entity | number, toggle: boolean): void;
export declare function setWaitForCollisionsBeforeProbe(entity: Entity | number, toggle: boolean): void;
export declare function setEntityNoweapondecals(entity: Entity | number, p1: boolean): void;
export declare function setEntityUseMaxDistanceForWaterReflection(entity: Entity | number, p1: boolean): void;
export declare function getEntityBoneRotation(entity: Entity | number, boneIndex: number): Vector3;
export declare function getEntityBonePostion(entity: Entity | number, boneIndex: number): Vector3;
export declare function getEntityBoneObjectRotation(entity: Entity | number, boneIndex: number): Vector3;
export declare function getEntityBoneObjectPostion(entity: Entity | number, boneIndex: number): Vector3;
export declare function getEntityBoneCount(entity: Entity | number): number;
export declare function enableEntityBulletCollision(entity: Entity | number): void;
export declare function setEntityCanOnlyBeDamagedByEntity(entity1: Entity | number, entity2: Entity | number): void;
export declare function setEntityCantCauseCollisionDamagedEntity(entity1: Entity | number, entity2: Entity | number): void;
export declare function setAllowMigrateToSpectator(entity: Entity | number, p1: any): void;
export declare function getEntityOfTypeAttachedToEntity(entity: Entity | number, modelHash: number): number;
export declare function setPickUpByCargobobDisabled(entity: Entity | number, toggle: boolean): void;
export declare function setDecisionMaker(ped: Ped | Player | LocalPlayer | number, name: number): void;
export declare function clearDecisionMakerEventResponse(name: number, eventType: number): void;
export declare function blockDecisionMakerEvent(name: number, eventType: number): void;
export declare function unblockDecisionMakerEvent(name: number, eventType: number): void;
export declare function addShockingEventAtPosition(eventType: number, x: number, y: number, z: number, duration: number): number;
export declare function addShockingEventForEntity(eventType: number, entity: Entity | number, duration: number): number;
export declare function isShockingEventInSphere(eventType: number, x: number, y: number, z: number, radius: number): boolean;
export declare function removeShockingEvent(event: number): boolean;
export declare function removeAllShockingEvents(p0: boolean): void;
export declare function removeShockingEventSpawnBlockingAreas(): void;
export declare function suppressShockingEventsNextFrame(): void;
export declare function suppressShockingEventTypeNextFrame(eventType: number): void;
export declare function suppressAgitationEventsNextFrame(): void;
export declare function getNumTattooShopDlcItems(character: number): number;
export declare function getTattooShopDlcItemData(characterType: number, decorationIndex: number, outComponent?: any | null): [boolean, any];
export declare function getTattooShopDlcItemIndex(overlayHash: number, p1: any, character: number): number;
export declare function initShopPedComponent(outComponent?: any | null): [void, any];
export declare function initShopPedProp(outProp?: any | null): [void, any];
export declare function setupShopPedApparelQuery(p0: number, p1: number, p2: number, p3: number): number;
export declare function setupShopPedApparelQueryTu(character: number, p1: number, p2: number, p3: boolean, p4: number, componentId: number): number;
export declare function getShopPedQueryComponent(componentId: number, outComponent?: any | null): [void, any];
export declare function getShopPedQueryComponentIndex(componentHash: number): number;
export declare function getShopPedComponent(componentHash: number, outComponent?: any | null): [void, any];
export declare function getShopPedQueryProp(componentId: number, outProp?: any | null): [void, any];
export declare function getShopPedQueryPropIndex(componentHash: number): number;
export declare function getShopPedProp(componentHash: number, outProp?: any | null): [void, any];
export declare function getHashNameForComponent(entity: Entity | number, componentId: number, drawableVariant: number, textureVariant: number): number;
export declare function getHashNameForProp(entity: Entity | number, componentId: number, propIndex: number, propTextureIndex: number): number;
export declare function getShopPedApparelVariantComponentCount(componentHash: number): number;
export declare function getShopPedApparelVariantPropCount(propHash: number): number;
export declare function getVariantComponent(componentHash: number, variantComponentIndex: number, nameHash?: number | null, enumValue?: number | null, componentType?: number | null): [void, number, number, number];
export declare function getVariantProp(componentHash: number, variantPropIndex: number, nameHash?: number | null, enumValue?: number | null, anchorPoint?: number | null): [void, number, number, number];
export declare function getShopPedApparelForcedComponentCount(componentHash: number): number;
export declare function getShopPedApparelForcedPropCount(componentHash: number): number;
export declare function getForcedComponent(componentHash: number, forcedComponentIndex: number, nameHash?: number | null, enumValue?: number | null, componentType?: number | null): [void, number, number, number];
export declare function getForcedProp(componentHash: number, forcedPropIndex: number, nameHash?: number | null, enumValue?: number | null, anchorPoint?: number | null): [void, number, number, number];
export declare function doesShopPedApparelHaveRestrictionTag(componentHash: number, restrictionTagHash: number, componentId: number): boolean;
export declare function doesCurrentPedComponentHaveRestrictionTag(ped: Ped | Player | LocalPlayer | number, componentId: number, restrictionTagHash: number): boolean;
export declare function doesCurrentPedPropHaveRestrictionTag(ped: Ped | Player | LocalPlayer | number, componentId: number, restrictionTagHash: number): boolean;
export declare function setupShopPedOutfitQuery(character: number, p1: boolean): number;
export declare function getShopPedQueryOutfit(outfitIndex: number, outfit?: any | null): [void, any];
export declare function getShopPedOutfit(p0: any, p1?: any | null): [void, any];
export declare function getShopPedOutfitLocate(p0: any): number;
export declare function getShopPedOutfitPropVariant(outfitHash: number, variantIndex: number, outPropVariant?: any | null): [boolean, any];
export declare function getShopPedOutfitComponentVariant(outfitHash: number, variantIndex: number, outComponentVariant?: any | null): [boolean, any];
export declare function getNumDlcVehicles(): number;
export declare function getDlcVehicleModel(dlcVehicleIndex: number): number;
export declare function getDlcVehicleData(dlcVehicleIndex: number, outData?: any | null): [boolean, any];
export declare function getDlcVehicleFlags(dlcVehicleIndex: number): number;
export declare function getNumDlcWeapons(): number;
export declare function getNumDlcWeaponsSp(): number;
export declare function getDlcWeaponData(dlcWeaponIndex: number, outData?: any | null): [boolean, any];
export declare function getDlcWeaponDataSp(dlcWeaponIndex: number, outData?: any | null): [boolean, any];
export declare function getNumDlcWeaponComponents(dlcWeaponIndex: number): number;
export declare function getNumDlcWeaponComponentsSp(dlcWeaponIndex: number): number;
export declare function getDlcWeaponComponentData(dlcWeaponIndex: number, dlcWeapCompIndex: number, ComponentDataPtr?: any | null): [boolean, any];
export declare function getDlcWeaponComponentDataSp(dlcWeaponIndex: number, dlcWeapCompIndex: number, ComponentDataPtr?: any | null): [boolean, any];
export declare function isContentItemLocked(itemHash: number): boolean;
export declare function isDlcVehicleMod(hash: number): boolean;
export declare function getDlcVehicleModLockHash(hash: number): number;
export declare function executeContentChangesetGroupForAll(hash: number): void;
export declare function revertContentChangesetGroupForAll(hash: number): void;
export declare function startScriptFire(X: number, Y: number, Z: number, maxChildren: number, isGasFire: boolean): number;
export declare function removeScriptFire(fireHandle: number): void;
export declare function startEntityFire(entity: Entity | number): number;
export declare function stopEntityFire(entity: Entity | number): void;
export declare function isEntityOnFire(entity: Entity | number): boolean;
export declare function getNumberOfFiresInRange(x: number, y: number, z: number, radius: number): number;
export declare function setFlammabilityMultiplier(p0: number): void;
export declare function stopFireInRange(x: number, y: number, z: number, radius: number): void;
export declare function getClosestFirePos(outPosition: Vector3 | null, x: number, y: number, z: number): [boolean, Vector3];
export declare function addExplosion(x: number, y: number, z: number, explosionType: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number, noDamage: boolean): void;
export declare function addOwnedExplosion(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, explosionType: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void;
export declare function addExplosionWithUserVfx(x: number, y: number, z: number, explosionType: number, explosionFx: number, damageScale: number, isAudible: boolean, isInvisible: boolean, cameraShake: number): void;
export declare function isExplosionInArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
export declare function isExplosionActiveInArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
export declare function isExplosionInSphere(explosionType: number, x: number, y: number, z: number, radius: number): boolean;
export declare function getOwnerOfExplosionInSphere(explosionType: number, x: number, y: number, z: number, radius: number): number;
export declare function isExplosionInAngledArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): boolean;
export declare function getOwnerOfExplosionInAngledArea(explosionType: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number): number;
export declare function setDebugLinesAndSpheresDrawingActive(enabled: boolean): void;
export declare function drawDebugLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, alpha: number): void;
export declare function drawDebugLineWithTwoColours(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r1: number, g1: number, b1: number, r2: number, g2: number, b2: number, alpha1: number, alpha2: number): void;
export declare function drawDebugSphere(x: number, y: number, z: number, radius: number, red: number, green: number, blue: number, alpha: number): void;
export declare function drawDebugBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, r: number, g: number, b: number, alpha: number): void;
export declare function drawDebugCross(x: number, y: number, z: number, size: number, red: number, green: number, blue: number, alpha: number): void;
export declare function drawDebugText(text: string | null, x: number, y: number, z: number, red: number, green: number, blue: number, alpha: number): void;
export declare function drawDebugText2d(text: string | null, x: number, y: number, z: number, red: number, green: number, blue: number, alpha: number): void;
export declare function drawLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, red: number, green: number, blue: number, alpha: number): void;
export declare function drawPoly(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red: number, green: number, blue: number, alpha: number): void;
export declare function drawTexturedPoly(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red: number, green: number, blue: number, alpha: number, textureDict: string | null, textureName: string | null, u1: number, v1: number, w1: number, u2: number, v2: number, w2: number, u3: number, v3: number, w3: number): void;
export declare function drawTexturedPolyWithThreeColours(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, red1: number, green1: number, blue1: number, alpha1: number, red2: number, green2: number, blue2: number, alpha2: number, red3: number, green3: number, blue3: number, alpha3: number, textureDict: string | null, textureName: string | null, u1: number, v1: number, w1: number, u2: number, v2: number, w2: number, u3: number, v3: number, w3: number): void;
export declare function drawBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, red: number, green: number, blue: number, alpha: number): void;
export declare function setBackfaceculling(toggle: boolean): void;
export declare function setDepthwriting(toggle: boolean): void;
export declare function beginTakeMissionCreatorPhoto(): boolean;
export declare function getStatusOfTakeMissionCreatorPhoto(): number;
export declare function freeMemoryForMissionCreatorPhoto(): void;
export declare function loadMissionCreatorPhoto(p0: any | null, p1: any, p2: any, p3: any): [boolean, any];
export declare function getStatusOfLoadMissionCreatorPhoto(p0?: any | null): [number, any];
export declare function beginCreateMissionCreatorPhotoPreview(): boolean;
export declare function getStatusOfCreateMissionCreatorPhotoPreview(): number;
export declare function freeMemoryForMissionCreatorPhotoPreview(): void;
export declare function beginTakeHighQualityPhoto(): boolean;
export declare function getStatusOfTakeHighQualityPhoto(): number;
export declare function freeMemoryForHighQualityPhoto(): void;
export declare function setTakenPhotoIsMugshot(toggle: boolean): void;
export declare function setArenaThemeAndVariationForTakenPhoto(p0: any, p1: number): void;
export declare function setOnIslandXForTakenPhoto(p0: any): void;
export declare function saveHighQualityPhoto(unused: number): boolean;
export declare function getStatusOfSaveHighQualityPhoto(): number;
export declare function beginCreateLowQualityCopyOfPhoto(p0: any): boolean;
export declare function getStatusOfCreateLowQualityCopyOfPhoto(p0: number): number;
export declare function freeMemoryForLowQualityPhoto(): void;
export declare function drawLowQualityPhotoToPhone(p0: boolean, p1: boolean): void;
export declare function getMaximumNumberOfPhotos(): number;
export declare function getMaximumNumberOfCloudPhotos(): number;
export declare function getCurrentNumberOfCloudPhotos(): number;
export declare function queueOperationToCreateSortedListOfPhotos(p0: any): boolean;
export declare function getStatusOfSortedListOperation(p0: any): number;
export declare function clearStatusOfSortedListOperation(): void;
export declare function doesThisPhotoSlotContainAValidPhoto(p0: any): boolean;
export declare function loadHighQualityPhoto(p0: any): boolean;
export declare function getLoadHighQualityPhotoStatus(p0: number): number;
export declare function drawLightWithRangeex(x: number, y: number, z: number, r: number, g: number, b: number, range: number, intensity: number, shadow: number): void;
export declare function drawLightWithRange(posX: number, posY: number, posZ: number, colorR: number, colorG: number, colorB: number, range: number, intensity: number): void;
export declare function drawSpotLight(posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, hardness: number, radius: number, falloff: number): void;
export declare function drawShadowedSpotLight(posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, colorR: number, colorG: number, colorB: number, distance: number, brightness: number, roundness: number, radius: number, falloff: number, shadowId: number): void;
export declare function fadeUpPedLight(p0: number): void;
export declare function updateLightsOnEntity(entity: Entity | number): void;
export declare function setLightOverrideMaxIntensityScale(p0: any): void;
export declare function getLightOverrideMaxIntensityScale(): number;
export declare function drawMarker(type: number, posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, rotX: number, rotY: number, rotZ: number, scaleX: number, scaleY: number, scaleZ: number, red: number, green: number, blue: number, alpha: number, bobUpAndDown: boolean, faceCamera: boolean, p19: number, rotate: boolean, textureDict: string | null, textureName: string | null, drawOnEnts: boolean): void;
export declare function drawMarkerEx(type: number, posX: number, posY: number, posZ: number, dirX: number, dirY: number, dirZ: number, rotX: number, rotY: number, rotZ: number, scaleX: number, scaleY: number, scaleZ: number, red: number, green: number, blue: number, alpha: number, bobUpAndDown: boolean, faceCamera: boolean, p19: any, rotate: boolean, textureDict: string | null, textureName: string | null, drawOnEnts: boolean, p24: boolean, p25: boolean): void;
export declare function drawMarkerSphere(x: number, y: number, z: number, radius: number, red: number, green: number, blue: number, alpha: number): void;
export declare function createCheckpoint(type: number, posX1: number, posY1: number, posZ1: number, posX2: number, posY2: number, posZ2: number, diameter: number, red: number, green: number, blue: number, alpha: number, reserved: number): number;
export declare function setCheckpointInsideCylinderHeightScale(checkpoint: number, scale: number): void;
export declare function setCheckpointInsideCylinderScale(checkpoint: number, scale: number): void;
export declare function setCheckpointCylinderHeight(checkpoint: number, nearHeight: number, farHeight: number, radius: number): void;
export declare function setCheckpointRgba(checkpoint: number, red: number, green: number, blue: number, alpha: number): void;
export declare function setCheckpointRgba2(checkpoint: number, red: number, green: number, blue: number, alpha: number): void;
export declare function setCheckpointClipplaneWithPosNorm(checkpoint: number, posX: number, posY: number, posZ: number, unkX: number, unkY: number, unkZ: number): void;
export declare function setCheckpointForceOldArrowPointing(checkpoint: number): void;
export declare function setCheckpointDecalRotAlignedToCameraRot(checkpoint: number): void;
export declare function setCheckpointForceDirection(checkpoint: number): void;
export declare function setCheckpointDirection(checkpoint: number, posX: number, posY: number, posZ: number): void;
export declare function deleteCheckpoint(checkpoint: number): void;
export declare function dontRenderInGameUi(p0: boolean): void;
export declare function forceRenderInGameUi(toggle: boolean): void;
export declare function requestStreamedTextureDict(textureDict: string | null, p1: boolean): void;
export declare function hasStreamedTextureDictLoaded(textureDict: string | null): boolean;
export declare function setStreamedTextureDictAsNoLongerNeeded(textureDict: string | null): void;
export declare function drawRect(x: number, y: number, width: number, height: number, r: number, g: number, b: number, a: number, p8: boolean): void;
export declare function setScriptGfxDrawBehindPausemenu(toggle: boolean): void;
export declare function setScriptGfxDrawOrder(drawOrder: number): void;
export declare function setScriptGfxAlign(horizontalAlign: number, verticalAlign: number): void;
export declare function resetScriptGfxAlign(): void;
export declare function setScriptGfxAlignParams(x: number, y: number, w: number, h: number): void;
export declare function getScriptGfxAlignPosition(x: number, y: number, calculatedX?: number | null, calculatedY?: number | null): [void, number, number];
export declare function getSafeZoneSize(): number;
export declare function drawSprite(textureDict: string | null, textureName: string | null, screenX: number, screenY: number, width: number, height: number, heading: number, red: number, green: number, blue: number, alpha: number, p11: boolean, p12: any): void;
export declare function drawSpriteArx(textureDict: string | null, textureName: string | null, x: number, y: number, width: number, height: number, p6: number, red: number, green: number, blue: number, alpha: number, p11: any, p12: any): void;
export declare function drawSpriteNamedRendertarget(textureDict: string | null, textureName: string | null, screenX: number, screenY: number, width: number, height: number, heading: number, red: number, green: number, blue: number, alpha: number, p11: any): void;
export declare function drawSpriteArxWithUv(textureDict: string | null, textureName: string | null, x: number, y: number, width: number, height: number, u1: number, v1: number, u2: number, v2: number, heading: number, red: number, green: number, blue: number, alpha: number, p15: any): void;
export declare function addEntityIcon(entity: Entity | number, icon: string | null): number;
export declare function setEntityIconVisibility(entity: Entity | number, toggle: boolean): void;
export declare function setEntityIconColor(entity: Entity | number, red: number, green: number, blue: number, alpha: number): void;
export declare function setDrawOrigin(x: number, y: number, z: number, p3: boolean): void;
export declare function clearDrawOrigin(): void;
export declare function setBinkMovie(name: string | null): number;
export declare function playBinkMovie(binkMovie: number): void;
export declare function stopBinkMovie(binkMovie: number): void;
export declare function releaseBinkMovie(binkMovie: number): void;
export declare function drawBinkMovie(binkMovie: number, p1: number, p2: number, p3: number, p4: number, p5: number, r: number, g: number, b: number, a: number): void;
export declare function setBinkMovieTime(binkMovie: number, progress: number): void;
export declare function getBinkMovieTime(binkMovie: number): number;
export declare function setBinkMovieVolume(binkMovie: number, value: number): void;
export declare function attachTvAudioToEntity(entity: Entity | number): void;
export declare function setBinkMovieAudioFrontend(binkMovie: number, p1: boolean): void;
export declare function setTvAudioFrontend(toggle: boolean): void;
export declare function setBinkShouldSkip(binkMovie: number, bShouldSkip: boolean): void;
export declare function loadMovieMeshSet(movieMeshSetName: string | null): number;
export declare function releaseMovieMeshSet(movieMeshSet: number): void;
export declare function queryMovieMeshSetState(p0: any): number;
export declare function getScreenResolution(x?: number | null, y?: number | null): [void, number, number];
export declare function getActualScreenResolution(x?: number | null, y?: number | null): [void, number, number];
export declare function getAspectRatio(b: boolean): number;
export declare function getScreenAspectRatio(): number;
export declare function getIsWidescreen(): boolean;
export declare function getIsHidef(): boolean;
export declare function adjustNextPosSizeAsNormalized169(): void;
export declare function setNightvision(toggle: boolean): void;
export declare function getRequestingnightvision(): boolean;
export declare function getUsingnightvision(): boolean;
export declare function setExposuretweak(toggle: boolean): void;
export declare function forceExposureReadback(toggle: boolean): void;
export declare function overrideNightvisionLightRange(p0: number): void;
export declare function setNoiseoveride(toggle: boolean): void;
export declare function setNoisinessoveride(value: number): void;
export declare function getScreenCoordFromWorldCoord(worldX: number, worldY: number, worldZ: number, screenX?: number | null, screenY?: number | null): [boolean, number, number];
export declare function getTextureResolution(textureDict: string | null, textureName: string | null): Vector3;
export declare function overridePedCrewLogoTexture(ped: Ped | Player | LocalPlayer | number, txd: string | null, txn: string | null): boolean;
export declare function setDistanceBlurStrengthOverride(p0: number): void;
export declare function setFlash(p0: number, p1: number, fadeIn: number, duration: number, fadeOut: number): void;
export declare function disableOcclusionThisFrame(): void;
export declare function setArtificialLightsState(state: boolean): void;
export declare function setArtificialVehicleLightsState(toggle: boolean): void;
export declare function disableHdtexThisFrame(): void;
export declare function createTrackedPoint(): number;
export declare function setTrackedPointInfo(point: number, x: number, y: number, z: number, radius: number): void;
export declare function isTrackedPointVisible(point: number): boolean;
export declare function destroyTrackedPoint(point: number): void;
export declare function setGrassCullSphere(p0: number, p1: number, p2: number, p3: number): number;
export declare function removeGrassCullSphere(handle: number): void;
export declare function procgrassEnableCullsphere(handle: number, x: number, y: number, z: number, scale: number): void;
export declare function procgrassDisableCullsphere(handle: number): void;
export declare function procgrassIsCullsphereEnabled(handle: number): boolean;
export declare function procgrassEnableAmbscalescan(): void;
export declare function procgrassDisableAmbscalescan(): void;
export declare function disableProcobjCreation(): void;
export declare function enableProcobjCreation(): void;
export declare function grassbatchEnableFlatteningExtInSphere(x: number, y: number, z: number, p3: any, p4: number, p5: number, p6: number, scale: number): void;
export declare function grassbatchEnableFlatteningInSphere(x: number, y: number, z: number, radius: number, p4: number, p5: number, p6: number): void;
export declare function grassbatchDisableFlattening(): void;
export declare function cascadeShadowsInitSession(): void;
export declare function cascadeShadowsSetCascadeBounds(p0: any, p1: boolean, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: number): void;
export declare function cascadeShadowsSetCascadeBoundsScale(p0: number): void;
export declare function cascadeShadowsSetEntityTrackerScale(p0: number): void;
export declare function cascadeShadowsSetSplitZExpWeight(p0: number): void;
export declare function cascadeShadowsSetBoundPosition(p0: any): void;
export declare function cascadeShadowsEnableEntityTracker(toggle: boolean): void;
export declare function cascadeShadowsSetScreenSizeCheckEnabled(p0: boolean): void;
export declare function cascadeShadowsSetShadowSampleType(type: string | null): void;
export declare function cascadeShadowsClearShadowSampleType(): void;
export declare function cascadeShadowsSetAircraftMode(p0: boolean): void;
export declare function cascadeShadowsSetDynamicDepthMode(p0: boolean): void;
export declare function cascadeShadowsSetDynamicDepthValue(p0: number): void;
export declare function cascadeShadowsEnableFreezer(p0: boolean): void;
export declare function waterReflectionSetScriptObjectVisibility(p0: any): void;
export declare function golfTrailSetEnabled(toggle: boolean): void;
export declare function golfTrailSetPath(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean): void;
export declare function golfTrailSetRadius(p0: number, p1: number, p2: number): void;
export declare function golfTrailSetColour(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number): void;
export declare function golfTrailSetTessellation(p0: number, p1: number): void;
export declare function golfTrailSetFixedControlPointEnable(p0: boolean): void;
export declare function golfTrailSetFixedControlPoint(type: number, xPos: number, yPos: number, zPos: number, p4: number, red: number, green: number, blue: number, alpha: number): void;
export declare function golfTrailSetShaderParams(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function golfTrailSetFacing(p0: boolean): void;
export declare function golfTrailGetMaxHeight(): number;
export declare function golfTrailGetVisualControlPoint(p0: number): Vector3;
export declare function setSeethrough(toggle: boolean): void;
export declare function getUsingseethrough(): boolean;
export declare function seethroughReset(): void;
export declare function seethroughSetFadeStartdistance(distance: number): void;
export declare function seethroughSetFadeEnddistance(distance: number): void;
export declare function seethroughGetMaxThickness(): number;
export declare function seethroughSetMaxThickness(thickness: number): void;
export declare function seethroughSetNoiseMin(amount: number): void;
export declare function seethroughSetNoiseMax(amount: number): void;
export declare function seethroughSetHilightIntensity(intensity: number): void;
export declare function seethroughSetHighlightNoise(noise: number): void;
export declare function seethroughSetHeatscale(index: number, heatScale: number): void;
export declare function seethroughSetColorNear(red: number, green: number, blue: number): void;
export declare function setMotionblurMaxVelScaler(p0: number): void;
export declare function getMotionblurMaxVelScaler(): number;
export declare function setForceMotionblur(toggle: boolean): void;
export declare function togglePlayerDamageOverlay(toggle: boolean): void;
export declare function resetAdaptation(p0: number): void;
export declare function triggerScreenblurFadeIn(transitionTime: number): boolean;
export declare function triggerScreenblurFadeOut(transitionTime: number): boolean;
export declare function disableScreenblurFade(): void;
export declare function getScreenblurFadeCurrentTime(): number;
export declare function isScreenblurFadeRunning(): boolean;
export declare function togglePausedRenderphases(toggle: boolean): void;
export declare function getTogglePausedRenderphasesStatus(): boolean;
export declare function resetPausedRenderphases(): void;
export declare function grabPausemenuOwnership(): void;
export declare function setHidofOverride(p0: boolean, p1: boolean, nearplaneOut: number, nearplaneIn: number, farplaneOut: number, farplaneIn: number): void;
export declare function setLockAdaptiveDofDistance(p0: boolean): void;
export declare function phonephotoeditorToggle(p0: boolean): boolean;
export declare function phonephotoeditorIsActive(): boolean;
export declare function phonephotoeditorSetFrameTxd(textureDict: string | null, p1: boolean): boolean;
export declare function startParticleFxNonLoopedAtCoord(effectName: string | null, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): boolean;
export declare function startNetworkedParticleFxNonLoopedAtCoord(effectName: string | null, xPos: number, yPos: number, zPos: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, p11: boolean): boolean;
export declare function startParticleFxNonLoopedOnPedBone(effectName: string | null, ped: Ped | Player | LocalPlayer | number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
export declare function startNetworkedParticleFxNonLoopedOnPedBone(effectName: string | null, ped: Ped | Player | LocalPlayer | number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
export declare function startParticleFxNonLoopedOnEntity(effectName: string | null, entity: Entity | number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
export declare function startNetworkedParticleFxNonLoopedOnEntity(effectName: string | null, entity: Entity | number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
export declare function startParticleFxNonLoopedOnEntityBone(effectName: string | null, entity: Entity | number, offsetX: number, offsetY: number, offsetZ: number, rotX: number, rotY: number, rotZ: number, boneIndex: number, scale: number, axisX: boolean, axisY: boolean, axisZ: boolean): boolean;
export declare function setParticleFxNonLoopedColour(r: number, g: number, b: number): void;
export declare function setParticleFxNonLoopedAlpha(alpha: number): void;
export declare function setParticleFxNonLoopedScale(scale: number): void;
export declare function setParticleFxNonLoopedEmitterSize(p0: number, p1: number, scale: number): void;
export declare function setParticleFxForceVehicleInterior(toggle: boolean): void;
export declare function startParticleFxLoopedAtCoord(effectName: string | null, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, p11: boolean): number;
export declare function startParticleFxLoopedOnPedBone(effectName: string | null, ped: Ped | Player | LocalPlayer | number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
export declare function startParticleFxLoopedOnEntity(effectName: string | null, entity: Entity | number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
export declare function startParticleFxLoopedOnEntityBone(effectName: string | null, entity: Entity | number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean): number;
export declare function startNetworkedParticleFxLoopedOnEntity(effectName: string | null, entity: Entity | number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, r: number, g: number, b: number, a: number): number;
export declare function startNetworkedParticleFxLoopedOnEntityBone(effectName: string | null, entity: Entity | number, xOffset: number, yOffset: number, zOffset: number, xRot: number, yRot: number, zRot: number, boneIndex: number, scale: number, xAxis: boolean, yAxis: boolean, zAxis: boolean, r: number, g: number, b: number, a: number): number;
export declare function stopParticleFxLooped(ptfxHandle: number, p1: boolean): void;
export declare function removeParticleFx(ptfxHandle: number, p1: boolean): void;
export declare function removeParticleFxFromEntity(entity: Entity | number): void;
export declare function removeParticleFxInRange(X: number, Y: number, Z: number, radius: number): void;
export declare function forceParticleFxInVehicleInterior(p0: any, p1: any): void;
export declare function doesParticleFxLoopedExist(ptfxHandle: number): boolean;
export declare function setParticleFxLoopedOffsets(ptfxHandle: number, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number): void;
export declare function setParticleFxLoopedEvolution(ptfxHandle: number, propertyName: string | null, amount: number, noNetwork: boolean): void;
export declare function setParticleFxLoopedColour(ptfxHandle: number, r: number, g: number, b: number, p4: boolean): void;
export declare function setParticleFxLoopedAlpha(ptfxHandle: number, alpha: number): void;
export declare function setParticleFxLoopedScale(ptfxHandle: number, scale: number): void;
export declare function setParticleFxLoopedFarClipDist(ptfxHandle: number, range: number): void;
export declare function setParticleFxLoopedCameraBias(ptfxHandle: number, p1: number): void;
export declare function setParticleFxCamInsideVehicle(p0: boolean): void;
export declare function setParticleFxCamInsideNonplayerVehicle(vehicle: Vehicle | number, p1: boolean): void;
export declare function setParticleFxShootoutBoat(p0: any): void;
export declare function clearParticleFxShootoutBoat(): void;
export declare function setParticleFxBloodScale(p0: any): void;
export declare function disableInWaterPtfx(toggle: boolean): void;
export declare function disableDownwashPtfx(toggle: boolean): void;
export declare function setParticleFxSlipstreamLodrangeScale(scale: number): void;
export declare function enableClownBloodVfx(toggle: boolean): void;
export declare function enableAlienBloodVfx(toggle: boolean): void;
export declare function setParticleFxBulletImpactScale(scale: number): void;
export declare function setParticleFxBulletImpactLodrangeScale(p0: number): void;
export declare function setParticleFxBulletTraceNoAngleReject(p0: boolean): void;
export declare function setParticleFxBangScrapeLodrangeScale(p0: number): void;
export declare function setParticleFxFootLodrangeScale(p0: number): void;
export declare function setParticleFxFootOverrideName(p0: string | null): void;
export declare function setSkidmarkRangeScale(scale: number): void;
export declare function setPtfxForceVehicleInteriorFlag(p0: any): void;
export declare function registerPostfxBulletImpact(weaponWorldPosX: number, weaponWorldPosY: number, weaponWorldPosZ: number, intensity: number): void;
export declare function forcePostfxBulletImpactsAfterHud(p0: boolean): void;
export declare function useParticleFxAsset(name: string | null): void;
export declare function setParticleFxOverride(oldAsset: string | null, newAsset: string | null): void;
export declare function resetParticleFxOverride(name: string | null): void;
export declare function startVehicleParticleFxLooped(vehicle: Vehicle | number, effectName: string | null, frontBack: boolean, leftRight: boolean, localOnly: boolean): number;
export declare function setWeatherPtfxUseOverrideSettings(p0: boolean): void;
export declare function setWeatherPtfxOverrideCurrLevel(p0: number): void;
export declare function washDecalsInRange(x: number, y: number, z: number, range: number, p4: number): void;
export declare function washDecalsFromVehicle(vehicle: Vehicle | number, p1: number): void;
export declare function fadeDecalsInRange(x: number, y: number, z: number, p3: number, p4: number): void;
export declare function removeDecalsInRange(x: number, y: number, z: number, range: number): void;
export declare function removeDecalsFromObject(obj: number): void;
export declare function removeDecalsFromObjectFacing(obj: number, x: number, y: number, z: number): void;
export declare function removeDecalsFromVehicle(vehicle: Vehicle | number): void;
export declare function addDecal(decalType: number, posX: number, posY: number, posZ: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, width: number, height: number, rCoef: number, gCoef: number, bCoef: number, opacity: number, timeout: number, p17: boolean, p18: boolean, p19: boolean): number;
export declare function addPetrolDecal(x: number, y: number, z: number, groundLvl: number, width: number, transparency: number): number;
export declare function addOilDecal(x: number, y: number, z: number, groundLvl: number, width: number, transparency: number): number;
export declare function startPetrolTrailDecals(p0: number): void;
export declare function addPetrolTrailDecalInfo(x: number, y: number, z: number, p3: number): void;
export declare function endPetrolTrailDecals(): void;
export declare function removeDecal(decal: number): void;
export declare function isDecalAlive(decal: number): boolean;
export declare function getDecalWashLevel(decal: number): number;
export declare function setDisablePetrolDecalsIgnitingThisFrame(): void;
export declare function setDisablePetrolDecalsRecyclingThisFrame(): void;
export declare function setDisableDecalRenderingThisFrame(): void;
export declare function getIsPetrolDecalInRange(xCoord: number, yCoord: number, zCoord: number, radius: number): boolean;
export declare function patchDecalDiffuseMap(decalType: number, textureDict: string | null, textureName: string | null): void;
export declare function unpatchDecalDiffuseMap(decalType: number): void;
export declare function moveVehicleDecals(p0: any, p1: any): void;
export declare function addVehicleCrewEmblem(vehicle: Vehicle | number, ped: Ped | Player | LocalPlayer | number, boneIndex: number, x1: number, x2: number, x3: number, y1: number, y2: number, y3: number, z1: number, z2: number, z3: number, scale: number, p13: any, alpha: number): boolean;
export declare function abortVehicleCrewEmblemRequest(p0?: number | null): [boolean, number];
export declare function removeVehicleCrewEmblem(vehicle: Vehicle | number, p1: number): void;
export declare function getVehicleCrewEmblemRequestState(vehicle: Vehicle | number, p1: number): number;
export declare function doesVehicleHaveCrewEmblem(vehicle: Vehicle | number, p1: number): boolean;
export declare function disableCompositeShotgunDecals(toggle: boolean): void;
export declare function disableScuffDecals(toggle: boolean): void;
export declare function setDecalBulletImpactRangeScale(p0: number): void;
export declare function overrideInteriorSmokeName(name: string | null): void;
export declare function overrideInteriorSmokeLevel(level: number): void;
export declare function overrideInteriorSmokeEnd(): void;
export declare function registerNoirLensEffect(): void;
export declare function disableVehicleDistantlights(toggle: boolean): void;
export declare function renderShadowedLightsWithNoShadows(p0: boolean): void;
export declare function requestEarlyLightCheck(): void;
export declare function useSnowFootVfxWhenUnsheltered(toggle: boolean): void;
export declare function forceAllowSnowFootVfxOnIce(toggle: boolean): void;
export declare function useSnowWheelVfxWhenUnsheltered(toggle: boolean): void;
export declare function disableRegionVfx(p0: any): void;
export declare function forceGroundSnowPass(toggle: boolean): void;
export declare function presetInteriorAmbientCache(timecycleModifierName: string | null): void;
export declare function setTimecycleModifier(modifierName: string | null): void;
export declare function setTimecycleModifierStrength(strength: number): void;
export declare function setTransitionTimecycleModifier(modifierName: string | null, transition: number): void;
export declare function setTransitionOutOfTimecycleModifier(strength: number): void;
export declare function clearTimecycleModifier(): void;
export declare function getTimecycleModifierIndex(): number;
export declare function getTimecycleTransitionModifierIndex(): number;
export declare function getIsTimecycleTransitioningOut(): boolean;
export declare function pushTimecycleModifier(): void;
export declare function popTimecycleModifier(): void;
export declare function setCurrentPlayerTcmodifier(modifierName: string | null): void;
export declare function setPlayerTcmodifierTransition(value: number): void;
export declare function setNextPlayerTcmodifier(modifierName: string | null): void;
export declare function addTcmodifierOverride(modifierName1: string | null, modifierName2: string | null): void;
export declare function clearAllTcmodifierOverrides(p0: string | null): void;
export declare function setExtraTcmodifier(modifierName: string | null): void;
export declare function clearExtraTcmodifier(): void;
export declare function getExtraTcmodifier(): number;
export declare function enableMoonCycleOverride(strength: number): void;
export declare function disableMoonCycleOverride(): void;
export declare function requestScaleformMovie(scaleformName: string | null): number;
export declare function requestScaleformMovieWithIgnoreSuperWidescreen(scaleformName: string | null): number;
export declare function requestScaleformMovieInstance(scaleformName: string | null): number;
export declare function requestScaleformMovieSkipRenderWhilePaused(scaleformName: string | null): number;
export declare function hasScaleformMovieLoaded(scaleformHandle: number): boolean;
export declare function isActiveScaleformMovieDeleting(val: number): boolean;
export declare function isScaleformMovieDeleting(val: number): boolean;
export declare function hasScaleformMovieFilenameLoaded(scaleformName: string | null): boolean;
export declare function hasScaleformContainerMovieLoadedIntoParent(scaleformHandle: number): boolean;
export declare function setScaleformMovieAsNoLongerNeeded(scaleformHandle?: number | null): [void, number];
export declare function setScaleformMovieToUseSystemTime(scaleform: number, toggle: boolean): void;
export declare function setScaleformMovieToUseLargeRt(scaleformHandle: number, toggle: boolean): void;
export declare function setScaleformMovieToUseSuperLargeRt(scaleformHandle: number, toggle: boolean): void;
export declare function drawScaleformMovie(scaleformHandle: number, x: number, y: number, width: number, height: number, red: number, green: number, blue: number, alpha: number, p9: number): void;
export declare function drawScaleformMovieFullscreen(scaleform: number, red: number, green: number, blue: number, alpha: number, p5: number): void;
export declare function drawScaleformMovieFullscreenMasked(scaleform1: number, scaleform2: number, red: number, green: number, blue: number, alpha: number): void;
export declare function drawScaleformMovie3d(scaleform: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: number, p9: number, scaleX: number, scaleY: number, scaleZ: number, rotationOrder: number): void;
export declare function drawScaleformMovie3dSolid(scaleform: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: number, p9: number, scaleX: number, scaleY: number, scaleZ: number, rotationOrder: number): void;
export declare function callScaleformMovieMethod(scaleform: number, method: string | null): void;
export declare function callScaleformMovieMethodWithNumber(scaleform: number, methodName: string | null, param1: number, param2: number, param3: number, param4: number, param5: number): void;
export declare function callScaleformMovieMethodWithString(scaleform: number, methodName: string | null, param1: string | null, param2: string | null, param3: string | null, param4: string | null, param5: string | null): void;
export declare function callScaleformMovieMethodWithNumberAndString(scaleform: number, methodName: string | null, floatParam1: number, floatParam2: number, floatParam3: number, floatParam4: number, floatParam5: number, stringParam1: string | null, stringParam2: string | null, stringParam3: string | null, stringParam4: string | null, stringParam5: string | null): void;
export declare function beginScaleformScriptHudMovieMethod(hudComponent: number, methodName: string | null): boolean;
export declare function beginScaleformMovieMethod(scaleform: number, methodName: string | null): boolean;
export declare function beginScaleformMovieMethodOnFrontend(methodName: string | null): boolean;
export declare function beginScaleformMovieMethodOnFrontendHeader(methodName: string | null): boolean;
export declare function endScaleformMovieMethod(): void;
export declare function endScaleformMovieMethodReturnValue(): number;
export declare function isScaleformMovieMethodReturnValueReady(methodReturn: number): boolean;
export declare function getScaleformMovieMethodReturnValueInt(methodReturn: number): number;
export declare function getScaleformMovieMethodReturnValueBool(methodReturn: number): boolean;
export declare function getScaleformMovieMethodReturnValueString(methodReturn: number): string | null;
export declare function scaleformMovieMethodAddParamInt(value: number): void;
export declare function scaleformMovieMethodAddParamFloat(value: number): void;
export declare function scaleformMovieMethodAddParamBool(value: boolean): void;
export declare function beginTextCommandScaleformString(componentType: string | null): void;
export declare function endTextCommandScaleformString(): void;
export declare function endTextCommandUnparsedScaleformString(): void;
export declare function scaleformMovieMethodAddParamLiteralString(string: string | null): void;
export declare function scaleformMovieMethodAddParamTextureNameString(string: string | null): void;
export declare function scaleformMovieMethodAddParamPlayerNameString(string: string | null): void;
export declare function doesLatestBriefStringExist(p0: number): boolean;
export declare function scaleformMovieMethodAddParamLatestBriefString(value: number): void;
export declare function requestScaleformScriptHudMovie(hudComponent: number): void;
export declare function hasScaleformScriptHudMovieLoaded(hudComponent: number): boolean;
export declare function removeScaleformScriptHudMovie(hudComponent: number): void;
export declare function passKeyboardInputToScaleform(scaleformHandle: number): boolean;
export declare function setTvChannel(channel: number): void;
export declare function getTvChannel(): number;
export declare function setTvVolume(volume: number): void;
export declare function getTvVolume(): number;
export declare function drawTvChannel(xPos: number, yPos: number, xScale: number, yScale: number, rotation: number, red: number, green: number, blue: number, alpha: number): void;
export declare function setTvChannelPlaylist(tvChannel: number, playlistName: string | null, restart: boolean): void;
export declare function setTvChannelPlaylistAtHour(tvChannel: number, playlistName: string | null, hour: number): void;
export declare function setTvChannelPlaylistDirty(tvChannel: number, p1: boolean): void;
export declare function clearTvChannelPlaylist(tvChannel: number): void;
export declare function isPlaylistOnChannel(tvChannel: number, p1: any): boolean;
export declare function isTvshowCurrentlyPlaying(videoCliphash: number): boolean;
export declare function enableMovieKeyframeWait(toggle: boolean): void;
export declare function setTvPlayerWatchingThisFrame(p0: any): void;
export declare function getCurrentTvClipNamehash(): number;
export declare function enableMovieSubtitles(toggle: boolean): void;
export declare function ui3dsceneIsAvailable(): boolean;
export declare function ui3dscenePushPreset(presetName: string | null): boolean;
export declare function ui3dsceneAssignPedToSlot(presetName: string | null, ped: Ped | Player | LocalPlayer | number, slot: number, posX: number, posY: number, posZ: number): boolean;
export declare function ui3dsceneClearPatchedData(): void;
export declare function ui3dsceneMakePushedPresetPersistent(toggle: boolean): void;
export declare function terraingridActivate(toggle: boolean): void;
export declare function terraingridSetParams(x: number, y: number, z: number, forwardX: number, forwardY: number, forwardZ: number, sizeX: number, sizeY: number, sizeZ: number, gridScale: number, glowIntensity: number, normalHeight: number, heightDiff: number): void;
export declare function terraingridSetColours(lowR: number, lowG: number, lowB: number, lowAlpha: number, r: number, g: number, b: number, alpha: number, highR: number, highG: number, highB: number, highAlpha: number): void;
export declare function animpostfxPlay(effectName: string | null, duration: number, looped: boolean): void;
export declare function animpostfxStop(effectName: string | null): void;
export declare function animpostfxGetCurrentTime(effectName: string | null): number;
export declare function animpostfxIsRunning(effectName: string | null): boolean;
export declare function animpostfxStopAll(): void;
export declare function animpostfxStopAndFlushRequests(effectName: string | null): void;
export declare function beginTextCommandBusyspinnerOn(string: string | null): void;
export declare function endTextCommandBusyspinnerOn(busySpinnerType: number): void;
export declare function busyspinnerOff(): void;
export declare function preloadBusyspinner(): void;
export declare function busyspinnerIsOn(): boolean;
export declare function busyspinnerIsDisplaying(): boolean;
export declare function disablePausemenuSpinner(p0: boolean): void;
export declare function setMouseCursorThisFrame(): void;
export declare function setMouseCursorStyle(spriteId: number): void;
export declare function setMouseCursorVisible(toggle: boolean): void;
export declare function isMouseRolledOverInstructionalButtons(): boolean;
export declare function getMouseEvent(scaleformHandle: number, p1?: any | null, p2?: any | null, p3?: any | null): [boolean, any, any, any];
export declare function thefeedOnlyShowTooltips(toggle: boolean): void;
export declare function thefeedSetScriptedMenuHeight(pos: number): void;
export declare function thefeedHide(): void;
export declare function thefeedHideThisFrame(): void;
export declare function thefeedShow(): void;
export declare function thefeedFlushQueue(): void;
export declare function thefeedRemoveItem(notificationId: number): void;
export declare function thefeedForceRenderOn(): void;
export declare function thefeedForceRenderOff(): void;
export declare function thefeedPause(): void;
export declare function thefeedResume(): void;
export declare function thefeedIsPaused(): boolean;
export declare function thefeedReportLogoOn(): void;
export declare function thefeedReportLogoOff(): void;
export declare function thefeedGetLastShownPhoneActivatableFeedId(): number;
export declare function thefeedAutoPostGametipsOn(): void;
export declare function thefeedAutoPostGametipsOff(): void;
export declare function thefeedSetBackgroundColorForNextPost(hudColorIndex: number): void;
export declare function thefeedSetRgbaParameterForNextMessage(red: number, green: number, blue: number, alpha: number): void;
export declare function thefeedSetFlashDurationParameterForNextMessage(count: number): void;
export declare function thefeedSetVibrateParameterForNextMessage(toggle: boolean): void;
export declare function thefeedResetAllParameters(): void;
export declare function thefeedFreezeNextPost(): void;
export declare function thefeedClearFrozenPost(): void;
export declare function thefeedSetSnapFeedItemPositions(p0: boolean): void;
export declare function thefeedUpdateItemTexture(txdString1: string | null, txnString1: string | null, txdString2: string | null, txnString2: string | null): void;
export declare function beginTextCommandThefeedPost(text: string | null): void;
export declare function endTextCommandThefeedPostStats(statTitle: string | null, iconEnum: number, stepVal: boolean, barValue: number, isImportant: boolean, pictureTextureDict: string | null, pictureTextureName: string | null): number;
export declare function endTextCommandThefeedPostMessagetext(txdName: string | null, textureName: string | null, flash: boolean, iconType: number, sender: string | null, subject: string | null): number;
export declare function endTextCommandThefeedPostMessagetextSubtitleLabel(txdName: string | null, textureName: string | null, flash: boolean, iconType: number, sender: string | null, subject: string | null): number;
export declare function endTextCommandThefeedPostMessagetextTu(txdName: string | null, textureName: string | null, flash: boolean, iconType: number, sender: string | null, subject: string | null, duration: number): number;
export declare function endTextCommandThefeedPostMessagetextWithCrewTag(txdName: string | null, textureName: string | null, flash: boolean, iconType: number, sender: string | null, subject: string | null, duration: number, clanTag: string | null): number;
export declare function endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(txdName: string | null, textureName: string | null, flash: boolean, iconType1: number, sender: string | null, subject: string | null, duration: number, clanTag: string | null, iconType2: number, p9: number): number;
export declare function endTextCommandThefeedPostTicker(blink: boolean, p1: boolean): number;
export declare function endTextCommandThefeedPostTickerForced(blink: boolean, p1: boolean): number;
export declare function endTextCommandThefeedPostTickerWithTokens(blink: boolean, p1: boolean): number;
export declare function endTextCommandThefeedPostAward(textureDict: string | null, textureName: string | null, rpBonus: number, colorOverlay: number, titleLabel: string | null): number;
export declare function endTextCommandThefeedPostCrewtag(p0: boolean, p1: boolean, p2: number | null, p3: number, isLeader: boolean, unk0: boolean, clanDesc: number, R: number, G: number, B: number): [number, number];
export declare function endTextCommandThefeedPostCrewtagWithGameName(p0: boolean, p1: boolean, p2: number | null, p3: number, isLeader: boolean, unk0: boolean, clanDesc: number, playerName: string | null, R: number, G: number, B: number): [number, number];
export declare function endTextCommandThefeedPostUnlock(gxtLabel1: string | null, p1: number, gxtLabel2: string | null): number;
export declare function endTextCommandThefeedPostUnlockTu(gxtLabel1: string | null, p1: number, gxtLabel2: string | null, p3: number): number;
export declare function endTextCommandThefeedPostUnlockTuWithColor(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): number;
export declare function endTextCommandThefeedPostMpticker(blink: boolean, p1: boolean): number;
export declare function endTextCommandThefeedPostCrewRankupWithLiteralFlag(p0: string | null, p1: string | null, p2: string | null, p3: boolean, p4: boolean): number;
export declare function endTextCommandThefeedPostVersusTu(txdName1: string | null, textureName1: string | null, count1: number, txdName2: string | null, textureName2: string | null, count2: number, hudColor1: number, hudColor2: number): number;
export declare function endTextCommandThefeedPostReplay(type: number, image: number, text: string | null): number;
export declare function endTextCommandThefeedPostReplayInput(type: number, button: string | null, text: string | null): number;
export declare function beginTextCommandPrint(GxtEntry: string | null): void;
export declare function endTextCommandPrint(duration: number, drawImmediately: boolean): void;
export declare function beginTextCommandIsMessageDisplayed(text: string | null): void;
export declare function endTextCommandIsMessageDisplayed(): boolean;
export declare function beginTextCommandDisplayText(text: string | null): void;
export declare function endTextCommandDisplayText(x: number, y: number, p2: number): void;
export declare function beginTextCommandGetScreenWidthOfDisplayText(text: string | null): void;
export declare function endTextCommandGetScreenWidthOfDisplayText(p0: boolean): number;
export declare function beginTextCommandGetNumberOfLinesForString(entry: string | null): void;
export declare function endTextCommandGetNumberOfLinesForString(x: number, y: number): number;
export declare function beginTextCommandDisplayHelp(inputType: string | null): void;
export declare function endTextCommandDisplayHelp(p0: number, loop: boolean, beep: boolean, shape: number): void;
export declare function beginTextCommandIsThisHelpMessageBeingDisplayed(labelName: string | null): void;
export declare function endTextCommandIsThisHelpMessageBeingDisplayed(p0: number): boolean;
export declare function beginTextCommandSetBlipName(textLabel: string | null): void;
export declare function endTextCommandSetBlipName(blip: number): void;
export declare function beginTextCommandAddDirectlyToPreviousBriefs(p0: string | null): void;
export declare function endTextCommandAddDirectlyToPreviousBriefs(p0: boolean): void;
export declare function beginTextCommandClearPrint(text: string | null): void;
export declare function endTextCommandClearPrint(): void;
export declare function beginTextCommandOverrideButtonText(gxtEntry: string | null): void;
export declare function endTextCommandOverrideButtonText(p0: number): void;
export declare function addTextComponentInteger(value: number): void;
export declare function addTextComponentFloat(value: number, decimalPlaces: number): void;
export declare function addTextComponentSubstringTextLabel(labelName: string | null): void;
export declare function addTextComponentSubstringTextLabelHashKey(gxtEntryHash: number): void;
export declare function addTextComponentSubstringBlipName(blip: number): void;
export declare function addTextComponentSubstringPlayerName(text: string | null): void;
export declare function addTextComponentSubstringTime(timestamp: number, flags: number): void;
export declare function addTextComponentFormattedInteger(value: number, commaSeparated: boolean): void;
export declare function addTextComponentSubstringPhoneNumber(p0: string | null, p1: number): void;
export declare function addTextComponentSubstringWebsite(website: string | null): void;
export declare function addTextComponentSubstringKeyboardDisplay(string: string | null): void;
export declare function setColourOfNextTextComponent(hudColor: number): void;
export declare function getCharacterFromAudioConversationFilename(text: string | null, position: number, length: number): string | null;
export declare function getCharacterFromAudioConversationFilenameWithByteLimit(text: string | null, position: number, length: number, maxLength: number): string | null;
export declare function getCharacterFromAudioConversationFilenameBytes(text: string | null, startPosition: number, endPosition: number): string | null;
export declare function getFilenameForAudioConversation(labelName: string | null): string | null;
export declare function clearPrints(): void;
export declare function clearBrief(): void;
export declare function clearAllHelpMessages(): void;
export declare function clearThisPrint(p0: string | null): void;
export declare function clearSmallPrints(): void;
export declare function doesTextBlockExist(gxt: string | null): boolean;
export declare function requestAdditionalText(gxt: string | null, slot: number): void;
export declare function requestAdditionalTextForDlc(gxt: string | null, slot: number): void;
export declare function hasAdditionalTextLoaded(slot: number): boolean;
export declare function clearAdditionalText(p0: number, p1: boolean): void;
export declare function isStreamingAdditionalText(p0: number): boolean;
export declare function hasThisAdditionalTextLoaded(gxt: string | null, slot: number): boolean;
export declare function isMessageBeingDisplayed(): boolean;
export declare function doesTextLabelExist(gxt: string | null): boolean;
export declare function getFirstNCharactersOfLiteralString(string: string | null, length: number): string | null;
export declare function getLengthOfStringWithThisTextLabel(gxt: string | null): number;
export declare function getLengthOfLiteralString(string: string | null): number;
export declare function getLengthOfLiteralStringInBytes(string: string | null): number;
export declare function getStreetNameFromHashKey(hash: number): string | null;
export declare function isHudPreferenceSwitchedOn(): boolean;
export declare function isRadarPreferenceSwitchedOn(): boolean;
export declare function isSubtitlePreferenceSwitchedOn(): boolean;
export declare function displayHud(toggle: boolean): void;
export declare function displayHudWhenNotInStateOfPlayThisFrame(): void;
export declare function displayHudWhenPausedThisFrame(): void;
export declare function displayRadar(toggle: boolean): void;
export declare function setFakeSpectatorMode(toggle: boolean): void;
export declare function getFakeSpectatorMode(): boolean;
export declare function isHudHidden(): boolean;
export declare function isRadarHidden(): boolean;
export declare function isMinimapRendering(): boolean;
export declare function useVehicleTargetingReticule(p0: any): void;
export declare function useVehicleTargetingReticuleOnVehicles(enable: boolean): void;
export declare function addValidVehicleHitHash(p0: any): void;
export declare function clearValidVehicleHitHashes(): void;
export declare function setBlipRoute(blip: number, enabled: boolean): void;
export declare function clearAllBlipRoutes(): void;
export declare function setBlipRouteColour(blip: number, colour: number): void;
export declare function setForceShowGps(toggle: boolean): void;
export declare function setUseSetDestinationInPauseMap(toggle: boolean): void;
export declare function setBlockWantedFlash(disabled: boolean): void;
export declare function addNextMessageToPreviousBriefs(p0: boolean): void;
export declare function forceNextMessageToPreviousBriefsList(p0: number): void;
export declare function setRadarZoomPrecise(zoom: number): void;
export declare function setRadarZoom(zoomLevel: number): void;
export declare function setRadarZoomToBlip(blip: number, zoom: number): void;
export declare function setRadarZoomToDistance(zoom: number): void;
export declare function updateRadarZoomToBlip(): void;
export declare function getHudColour(hudColorIndex: number, r?: number | null, g?: number | null, b?: number | null, a?: number | null): [void, number, number, number, number];
export declare function setScriptVariableHudColour(r: number, g: number, b: number, a: number): void;
export declare function setSecondScriptVariableHudColour(r: number, g: number, b: number, a: number): void;
export declare function replaceHudColour(hudColorIndex: number, hudColorIndex2: number): void;
export declare function replaceHudColourWithRgba(hudColorIndex: number, r: number, g: number, b: number, a: number): void;
export declare function setAbilityBarVisibility(visible: boolean): void;
export declare function setAllowAbilityBar(toggle: boolean): void;
export declare function flashAbilityBar(millisecondsToFlash: number): void;
export declare function setAbilityBarValue(p0: number, p1: number): void;
export declare function flashWantedDisplay(p0: boolean): void;
export declare function forceOffWantedStarFlash(toggle: boolean): void;
export declare function setCustomMpHudColor(hudColorId: number): void;
export declare function getRenderedCharacterHeight(size: number, font: number): number;
export declare function setTextScale(scale: number, size: number): void;
export declare function setTextColour(red: number, green: number, blue: number, alpha: number): void;
export declare function setTextCentre(align: boolean): void;
export declare function setTextRightJustify(toggle: boolean): void;
export declare function setTextJustification(justifyType: number): void;
export declare function setTextLineHeightMult(lineHeightMult: number): void;
export declare function setTextWrap(start: number, end: number): void;
export declare function setTextLeading(p0: number): void;
export declare function setTextProportional(p0: boolean): void;
export declare function setTextFont(fontType: number): void;
export declare function setTextDropShadow(): void;
export declare function setTextDropshadow(distance: number, r: number, g: number, b: number, a: number): void;
export declare function setTextOutline(): void;
export declare function setTextEdge(p0: number, r: number, g: number, b: number, a: number): void;
export declare function setTextRenderId(renderId: number): void;
export declare function getDefaultScriptRendertargetRenderId(): number;
export declare function registerNamedRendertarget(name: string | null, p1: boolean): boolean;
export declare function isNamedRendertargetRegistered(name: string | null): boolean;
export declare function releaseNamedRendertarget(name: string | null): boolean;
export declare function linkNamedRendertarget(modelHash: number): void;
export declare function getNamedRendertargetRenderId(name: string | null): number;
export declare function isNamedRendertargetLinked(modelHash: number): boolean;
export declare function clearHelp(toggle: boolean): void;
export declare function isHelpMessageOnScreen(): boolean;
export declare function hasScriptHiddenHelpThisFrame(): boolean;
export declare function isHelpMessageBeingDisplayed(): boolean;
export declare function isHelpMessageFadingOut(): boolean;
export declare function setHelpMessageStyle(style: number, hudColor: number, alpha: number, p3: number, p4: number): void;
export declare function getStandardBlipEnumId(): number;
export declare function getWaypointBlipEnumId(): number;
export declare function getNumberOfActiveBlips(): number;
export declare function getNextBlipInfoId(blipSprite: number): number;
export declare function getFirstBlipInfoId(blipSprite: number): number;
export declare function getClosestBlipInfoId(blipSprite: number): number;
export declare function getBlipInfoIdCoord(blip: number): Vector3;
export declare function getBlipInfoIdDisplay(blip: number): number;
export declare function getBlipInfoIdType(blip: number): number;
export declare function getBlipInfoIdEntityIndex(blip: number): number;
export declare function getBlipInfoIdPickupIndex(blip: number): number;
export declare function getBlipFromEntity(entity: Entity | number): number;
export declare function addBlipForRadius(posX: number, posY: number, posZ: number, radius: number): number;
export declare function addBlipForArea(x: number, y: number, z: number, width: number, height: number): number;
export declare function addBlipForEntity(entity: Entity | number): number;
export declare function addBlipForPickup(pickup: number): number;
export declare function addBlipForCoord(x: number, y: number, z: number): number;
export declare function triggerSonarBlip(posX: number, posY: number, posZ: number, radius: number, p4: number): void;
export declare function allowSonarBlips(toggle: boolean): void;
export declare function setBlipCoords(blip: number, posX: number, posY: number, posZ: number): void;
export declare function getBlipCoords(blip: number): Vector3;
export declare function setBlipSprite(blip: number, spriteId: number): void;
export declare function getBlipSprite(blip: number): number;
export declare function setCopBlipSprite(p0: number, p1: number): void;
export declare function setCopBlipSpriteAsStandard(): void;
export declare function setBlipNameFromTextFile(blip: number, gxtEntry: string | null): void;
export declare function setBlipNameToPlayerName(blip: number, player: Player | number): void;
export declare function setBlipAlpha(blip: number, alpha: number): void;
export declare function getBlipAlpha(blip: number): number;
export declare function setBlipFade(blip: number, opacity: number, duration: number): void;
export declare function getBlipFadeDirection(blip: number): number;
export declare function setBlipRotation(blip: number, rotation: number): void;
export declare function setBlipRotationWithFloat(blip: number, heading: number): void;
export declare function getBlipRotation(blip: number): number;
export declare function setBlipFlashTimer(blip: number, duration: number): void;
export declare function setBlipFlashInterval(blip: number, p1: any): void;
export declare function setBlipColour(blip: number, color: number): void;
export declare function setBlipSecondaryColour(blip: number, r: number, g: number, b: number): void;
export declare function getBlipColour(blip: number): number;
export declare function getBlipHudColour(blip: number): number;
export declare function isBlipShortRange(blip: number): boolean;
export declare function isBlipOnMinimap(blip: number): boolean;
export declare function doesBlipHaveGpsRoute(blip: number): boolean;
export declare function setBlipHiddenOnLegend(blip: number, toggle: boolean): void;
export declare function setBlipHighDetail(blip: number, toggle: boolean): void;
export declare function setBlipAsMissionCreatorBlip(blip: number, toggle: boolean): void;
export declare function isMissionCreatorBlip(blip: number): boolean;
export declare function getNewSelectedMissionCreatorBlip(): number;
export declare function isHoveringOverMissionCreatorBlip(): boolean;
export declare function showStartMissionInstructionalButton(toggle: boolean): void;
export declare function showContactInstructionalButton(toggle: boolean): void;
export declare function reloadMapMenu(): void;
export declare function setBlipMarkerLongDistance(p0: any, p1: any): void;
export declare function setBlipFlashes(blip: number, toggle: boolean): void;
export declare function setBlipFlashesAlternate(blip: number, toggle: boolean): void;
export declare function isBlipFlashing(blip: number): boolean;
export declare function setBlipAsShortRange(blip: number, toggle: boolean): void;
export declare function setBlipScale(blip: number, scale: number): void;
export declare function setBlipScale2d(blip: number, xScale: number, yScale: number): void;
export declare function setBlipPriority(blip: number, priority: number): void;
export declare function setBlipDisplay(blip: number, displayId: number): void;
export declare function setBlipCategory(blip: number, index: number): void;
export declare function removeBlip(blip?: number | null): [void, number];
export declare function setBlipAsFriendly(blip: number, toggle: boolean): void;
export declare function pulseBlip(blip: number): void;
export declare function showNumberOnBlip(blip: number, number: number): void;
export declare function hideNumberOnBlip(blip: number): void;
export declare function showHeightOnBlip(blip: number, toggle: boolean): void;
export declare function showTickOnBlip(blip: number, toggle: boolean): void;
export declare function showGoldTickOnBlip(blip: number, toggle: boolean): void;
export declare function showForSaleIconOnBlip(blip: number, toggle: boolean): void;
export declare function showHeadingIndicatorOnBlip(blip: number, toggle: boolean): void;
export declare function showOutlineIndicatorOnBlip(blip: number, toggle: boolean): void;
export declare function showFriendIndicatorOnBlip(blip: number, toggle: boolean): void;
export declare function showCrewIndicatorOnBlip(blip: number, toggle: boolean): void;
export declare function setBlipExtendedHeightThreshold(blip: number, toggle: boolean): void;
export declare function setBlipShortHeightThreshold(p0: any, p1: any): void;
export declare function setBlipUseHeightIndicatorOnEdge(blip: number, p1: any): void;
export declare function setBlipAsMinimalOnEdge(blip: number, toggle: boolean): void;
export declare function setRadiusBlipEdge(blip: number, toggle: boolean): void;
export declare function doesBlipExist(blip: number): boolean;
export declare function setWaypointOff(): void;
export declare function deleteWaypointsFromThisPlayer(): void;
export declare function refreshWaypoint(): void;
export declare function isWaypointActive(): boolean;
export declare function setNewWaypoint(x: number, y: number): void;
export declare function setBlipBright(blip: number, toggle: boolean): void;
export declare function setBlipShowCone(blip: number, toggle: boolean, hudColorIndex: number): void;
export declare function removeCopBlipFromPed(ped: Ped | Player | LocalPlayer | number): void;
export declare function setupFakeConeData(blip: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: any, p8: number): void;
export declare function removeFakeConeData(blip: number): void;
export declare function clearFakeConeArray(): void;
export declare function setBlipGpsRouteDisplayDistance(blip: number, blipChangeParam46: number, blipChangeParam47: boolean): void;
export declare function setMinimapComponent(componentId: number, toggle: boolean, overrideColor: number): boolean;
export declare function setMinimapSonarSweep(toggle: boolean): void;
export declare function showAccountPicker(): void;
export declare function getMainPlayerBlipId(): number;
export declare function setPmWarningscreenActive(p0: boolean): void;
export declare function hideLoadingOnFadeThisFrame(): void;
export declare function setRadarAsInteriorThisFrame(interior: number, x: number, y: number, z: number, zoom: number): void;
export declare function setInsideVerySmallInterior(toggle: boolean): void;
export declare function setInsideVeryLargeInterior(toggle: boolean): void;
export declare function setRadarAsExteriorThisFrame(): void;
export declare function setFakePausemapPlayerPositionThisFrame(x: number, y: number): void;
export declare function setFakeGpsPlayerPositionThisFrame(x: number, y: number, p2: any): void;
export declare function isPausemapInInteriorMode(): boolean;
export declare function hideMinimapExteriorMapThisFrame(): void;
export declare function hideMinimapInteriorMapThisFrame(): void;
export declare function setUseIslandMap(toggle: boolean): void;
export declare function setPauseExteriorRenderingWhileInInterior(): void;
export declare function dontTiltMinimapThisFrame(): void;
export declare function dontZoomMinimapWhenRunningThisFrame(): void;
export declare function dontZoomMinimapWhenSnipingThisFrame(): void;
export declare function setWidescreenFormat(p0: any): void;
export declare function displayAreaName(toggle: boolean): void;
export declare function displayCash(toggle: boolean): void;
export declare function useFakeMpCash(toggle: boolean): void;
export declare function changeFakeMpCash(cash: number, bank: number): void;
export declare function displayAmmoThisFrame(display: boolean): void;
export declare function displaySniperScopeThisFrame(): void;
export declare function hideHudAndRadarThisFrame(): void;
export declare function allowDisplayOfMultiplayerCashText(allow: boolean): void;
export declare function setMultiplayerWalletCash(): void;
export declare function removeMultiplayerWalletCash(): void;
export declare function setMultiplayerBankCash(): void;
export declare function removeMultiplayerBankCash(): void;
export declare function setMultiplayerHudCash(p0: number, p1: boolean): void;
export declare function removeMultiplayerHudCash(): void;
export declare function hideHelpTextThisFrame(): void;
export declare function isImeInProgress(): boolean;
export declare function displayHelpTextThisFrame(message: string | null, p1: boolean): void;
export declare function hudForceWeaponWheel(show: boolean): void;
export declare function hudForceSpecialVehicleWeaponWheel(): void;
export declare function hudSuppressWeaponWheelResultsThisFrame(): void;
export declare function hudGetWeaponWheelCurrentlyHighlighted(): number;
export declare function hudSetWeaponWheelTopSlot(weaponHash: number): void;
export declare function hudGetWeaponWheelTopSlot(weaponTypeIndex: number): number;
export declare function hudShowingCharacterSwitchSelection(toggle: boolean): void;
export declare function setGpsFlags(p0: number, p1: number): void;
export declare function clearGpsFlags(): void;
export declare function setRaceTrackRender(toggle: boolean): void;
export declare function clearGpsRaceTrack(): void;
export declare function startGpsCustomRoute(hudColor: number, displayOnFoot: boolean, followPlayer: boolean): void;
export declare function addPointToGpsCustomRoute(x: number, y: number, z: number): void;
export declare function setGpsCustomRouteRender(toggle: boolean, radarThickness: number, mapThickness: number): void;
export declare function clearGpsCustomRoute(): void;
export declare function startGpsMultiRoute(hudColor: number, routeFromPlayer: boolean, displayOnFoot: boolean): void;
export declare function addPointToGpsMultiRoute(x: number, y: number, z: number): void;
export declare function setGpsMultiRouteRender(toggle: boolean): void;
export declare function clearGpsMultiRoute(): void;
export declare function clearGpsPlayerWaypoint(): void;
export declare function setGpsFlashes(toggle: boolean): void;
export declare function setPlayerIconColour(color: number): void;
export declare function flashMinimapDisplay(): void;
export declare function flashMinimapDisplayWithColor(hudColorIndex: number): void;
export declare function toggleStealthRadar(toggle: boolean): void;
export declare function setMinimapInSpectatorMode(toggle: boolean, ped: Ped | Player | LocalPlayer | number): void;
export declare function setMissionName(p0: boolean, name: string | null): void;
export declare function setMissionNameForUgcMission(p0: boolean, name: string | null): void;
export declare function setDescriptionForUgcMissionEightStrings(p0: boolean, p1: string | null, p2: string | null, p3: string | null, p4: string | null, p5: string | null, p6: string | null, p7: string | null, p8: string | null): void;
export declare function setMinimapBlockWaypoint(toggle: boolean): void;
export declare function setMinimapInPrologue(toggle: boolean): void;
export declare function setMinimapHideFow(toggle: boolean): void;
export declare function getMinimapFowDiscoveryRatio(): number;
export declare function getMinimapFowCoordinateIsRevealed(x: number, y: number, z: number): boolean;
export declare function setMinimapFowDoNotUpdate(p0: boolean): void;
export declare function setMinimapFowRevealCoordinate(x: number, y: number, z: number): void;
export declare function setMinimapGolfCourse(hole: number): void;
export declare function setMinimapGolfCourseOff(): void;
export declare function lockMinimapAngle(angle: number): void;
export declare function unlockMinimapAngle(): void;
export declare function lockMinimapPosition(x: number, y: number): void;
export declare function unlockMinimapPosition(): void;
export declare function setFakeMinimapMaxAltimeterHeight(altitude: number, p1: boolean, p2: any): void;
export declare function setHealthHudDisplayValues(health: number, capacity: number, wasAdded: boolean): void;
export declare function setMaxHealthHudDisplay(maximumValue: number): void;
export declare function setMaxArmourHudDisplay(maximumValue: number): void;
export declare function setBigmapActive(toggleBigMap: boolean, showFullMap: boolean): void;
export declare function isHudComponentActive(id: number): boolean;
export declare function isScriptedHudComponentActive(id: number): boolean;
export declare function hideScriptedHudComponentThisFrame(id: number): void;
export declare function showScriptedHudComponentThisFrame(id: number): void;
export declare function isScriptedHudComponentHiddenThisFrame(id: number): boolean;
export declare function hideHudComponentThisFrame(id: number): void;
export declare function showHudComponentThisFrame(id: number): void;
export declare function hideStreetAndCarNamesThisFrame(): void;
export declare function resetReticuleValues(): void;
export declare function resetHudComponentValues(id: number): void;
export declare function setHudComponentPosition(id: number, x: number, y: number): void;
export declare function getHudComponentPosition(id: number): Vector3;
export declare function clearReminderMessage(): void;
export declare function getHudScreenPositionFromWorldPosition(worldX: number, worldY: number, worldZ: number, screenX?: number | null, screenY?: number | null): [number, number, number];
export declare function openReportugcMenu(): void;
export declare function forceCloseReportugcMenu(): void;
export declare function isReportugcMenuOpen(): boolean;
export declare function isFloatingHelpTextOnScreen(hudIndex: number): boolean;
export declare function setFloatingHelpTextScreenPosition(hudIndex: number, x: number, y: number): void;
export declare function setFloatingHelpTextWorldPosition(hudIndex: number, x: number, y: number, z: number): void;
export declare function setFloatingHelpTextToEntity(hudIndex: number, entity: Entity | number, offsetX: number, offsetY: number): void;
export declare function setFloatingHelpTextStyle(hudIndex: number, p1: number, p2: number, p3: number, p4: number, p5: number): void;
export declare function clearFloatingHelp(hudIndex: number, p1: boolean): void;
export declare function createMpGamerTagWithCrewColor(player: Player | number, username: string | null, pointedClanTag: boolean, isRockstarClan: boolean, clanTag: string | null, clanFlag: number, r: number, g: number, b: number): void;
export declare function isMpGamerTagMovieActive(): boolean;
export declare function createFakeMpGamerTag(ped: Ped | Player | LocalPlayer | number, username: string | null, pointedClanTag: boolean, isRockstarClan: boolean, clanTag: string | null, clanFlag: number): number;
export declare function removeMpGamerTag(gamerTagId: number): void;
export declare function isMpGamerTagActive(gamerTagId: number): boolean;
export declare function isMpGamerTagFree(gamerTagId: number): boolean;
export declare function setMpGamerTagVisibility(gamerTagId: number, component: number, toggle: boolean, p3: any): void;
export declare function setAllMpGamerTagsVisibility(gamerTagId: number, toggle: boolean): void;
export declare function setMpGamerTagsShouldUseVehicleHealth(gamerTagId: number, toggle: boolean): void;
export declare function setMpGamerTagsShouldUsePointsHealth(gamerTagId: number, toggle: boolean): void;
export declare function setMpGamerTagsPointHealth(gamerTagId: number, value: number, maximumValue: number): void;
export declare function setMpGamerTagColour(gamerTagId: number, component: number, hudColorIndex: number): void;
export declare function setMpGamerTagHealthBarColour(gamerTagId: number, hudColorIndex: number): void;
export declare function setMpGamerTagAlpha(gamerTagId: number, component: number, alpha: number): void;
export declare function setMpGamerTagWantedLevel(gamerTagId: number, wantedlvl: number): void;
export declare function setMpGamerTagNumPackages(gamerTagId: number, p1: number): void;
export declare function setMpGamerTagName(gamerTagId: number, string: string | null): void;
export declare function isUpdatingMpGamerTagNameAndCrewDetails(gamerTagId: number): boolean;
export declare function setMpGamerTagBigText(gamerTagId: number, string: string | null): void;
export declare function getCurrentWebpageId(): number;
export declare function getCurrentWebsiteId(): number;
export declare function getGlobalActionscriptFlag(flagIndex: number): number;
export declare function resetGlobalActionscriptFlag(flagIndex: number): void;
export declare function isWarningMessageReadyForControl(): boolean;
export declare function setWarningMessage(titleMsg: string | null, flags: number, promptMsg: string | null, p3: boolean, p4: number, p5: string | null, p6: string | null, showBackground: boolean, errorCode: number): void;
export declare function setWarningMessageWithHeader(entryHeader: string | null, entryLine1: string | null, instructionalKey: number, entryLine2: string | null, p4: boolean, p5: any, showBackground: any | null, p7: any | null, p8: boolean, p9: any): [void, any, any];
export declare function setWarningMessageWithHeaderAndSubstringFlags(entryHeader: string | null, entryLine1: string | null, instructionalKey: number, entryLine2: string | null, p4: boolean, p5: any, additionalIntInfo: any, additionalTextInfoLine1: string | null, additionalTextInfoLine2: string | null, showBackground: boolean, errorCode: number): void;
export declare function setWarningMessageWithHeaderExtended(entryHeader: string | null, entryLine1: string | null, flags: number, entryLine2: string | null, p4: boolean, p5: any, p6: any | null, p7: any | null, showBg: boolean, p9: any, p10: any): [void, any, any];
export declare function setWarningMessageWithHeaderAndSubstringFlagsExtended(labelTitle: string | null, labelMessage: string | null, p2: number, p3: number, labelMessage2: string | null, p5: boolean, p6: number, p7: number, p8: string | null, p9: string | null, background: boolean, errorCode: number): void;
export declare function getWarningScreenMessageHash(): number;
export declare function setWarningMessageOptionItems(index: number, name: string | null, cash: number, rp: number, lvl: number, colour: number): boolean;
export declare function setWarningMessageOptionHighlight(p0: any): boolean;
export declare function removeWarningMessageOptionItems(): void;
export declare function isWarningMessageActive(): boolean;
export declare function clearDynamicPauseMenuErrorMessage(): void;
export declare function customMinimapSetActive(toggle: boolean): void;
export declare function customMinimapSetBlipObject(spriteId: number): void;
export declare function customMinimapCreateBlip(x: number, y: number, z: number): number;
export declare function customMinimapClearBlips(): void;
export declare function forceSonarBlipsThisFrame(): boolean;
export declare function getNorthBlidIndex(): number;
export declare function displayPlayerNameTagsOnBlips(toggle: boolean): void;
export declare function drawFrontendBackgroundThisFrame(): void;
export declare function drawHudOverFadeThisFrame(): void;
export declare function activateFrontendMenu(menuhash: number, togglePause: boolean, component: number): void;
export declare function restartFrontendMenu(menuHash: number, p1: number): void;
export declare function getCurrentFrontendMenuVersion(): number;
export declare function setPauseMenuActive(toggle: boolean): void;
export declare function disableFrontendThisFrame(): void;
export declare function suppressFrontendRenderingThisFrame(): void;
export declare function allowPauseWhenNotInStateOfPlayThisFrame(): void;
export declare function setFrontendActive(active: boolean): void;
export declare function isPauseMenuActive(): boolean;
export declare function isStorePendingNetworkShutdownToOpen(): boolean;
export declare function getPauseMenuState(): number;
export declare function getPauseMenuPosition(): Vector3;
export declare function isPauseMenuRestarting(): boolean;
export declare function forceScriptedGfxWhenFrontendActive(p0: string | null): void;
export declare function pauseMenuceptionGoDeeper(page: number): void;
export declare function pauseMenuceptionTheKick(): void;
export declare function pauseToggleFullscreenMap(p0: any): void;
export declare function pauseMenuActivateContext(contextHash: number): void;
export declare function pauseMenuDeactivateContext(contextHash: number): void;
export declare function pauseMenuIsContextActive(contextHash: number): boolean;
export declare function pauseMenuIsContextMenuActive(): boolean;
export declare function pauseMenuGetHairColourIndex(): number;
export declare function pauseMenuGetMouseHoverIndex(): number;
export declare function pauseMenuGetMouseHoverUniqueId(): number;
export declare function pauseMenuGetMouseClickEvent(p0?: any | null, p1?: any | null, p2?: any | null): [boolean, any, any, any];
export declare function pauseMenuRedrawInstructionalButtons(p0: number): void;
export declare function pauseMenuSetBusySpinner(p0: boolean, position: number, spinnerIndex: number): void;
export declare function pauseMenuSetWarnOnTabChange(p0: boolean): void;
export declare function isFrontendReadyForControl(): boolean;
export declare function takeControlOfFrontend(): void;
export declare function releaseControlOfFrontend(): void;
export declare function codeWantsScriptToTakeControl(): boolean;
export declare function getScreenCodeWantsScriptToControl(): number;
export declare function isNavigatingMenuContent(): boolean;
export declare function hasMenuTriggerEventOccurred(): boolean;
export declare function hasMenuLayoutChangedEventOccurred(): boolean;
export declare function setSavegameListUniqueId(p0: any): void;
export declare function getMenuTriggerEventDetails(lastItemMenuId?: number | null, selectedItemUniqueId?: number | null): [void, number, number];
export declare function getMenuLayoutChangedEventDetails(lastItemMenuId?: number | null, selectedItemMenuId?: number | null, selectedItemUniqueId?: number | null): [void, number, number, number];
export declare function getPmPlayerCrewColor(r?: number | null, g?: number | null, b?: number | null): [boolean, number, number, number];
export declare function getMenuPedIntStat(p0: any, p1?: any | null): [boolean, any];
export declare function getCharacterMenuPedIntStat(p0: any, p1: any | null, p2: any): [boolean, any];
export declare function getMenuPedMaskedIntStat(statHash: number, outValue: number | null, mask: number, p3: boolean): [boolean, number];
export declare function getCharacterMenuPedMaskedIntStat(statHash: number, outValue: any | null, p2: number, mask: number, p4: boolean): [boolean, any];
export declare function getMenuPedFloatStat(statHash: number, outValue?: number | null): [boolean, number];
export declare function getCharacterMenuPedFloatStat(statHash: number, outValue: number | null, p2: boolean): [boolean, number];
export declare function getMenuPedBoolStat(statHash: number, outValue?: boolean | null): [boolean, boolean];
export declare function clearPedInPauseMenu(): void;
export declare function givePedToPauseMenu(ped: Ped | Player | LocalPlayer | number, p1: number): void;
export declare function setPauseMenuPedLighting(state: boolean): void;
export declare function setPauseMenuPedSleepState(state: boolean): void;
export declare function openOnlinePoliciesMenu(): void;
export declare function areOnlinePoliciesUpToDate(): boolean;
export declare function isOnlinePoliciesMenuActive(): boolean;
export declare function openSocialClubMenu(menu: number): void;
export declare function closeSocialClubMenu(): void;
export declare function setSocialClubTour(name: string | null): void;
export declare function isSocialClubActive(): boolean;
export declare function setTextInputBoxEnabled(p0: boolean): void;
export declare function forceCloseTextInputBox(): void;
export declare function setAllowCommaOnTextInput(p0: any): void;
export declare function overrideMpTextChatTeamString(gxtEntryHash: number): void;
export declare function isMpTextChatTyping(): boolean;
export declare function closeMpTextChat(): void;
export declare function mpTextChatIsTeamJob(p0: any): void;
export declare function overrideMpTextChatColor(p0: number, hudColor: number): void;
export declare function mpTextChatDisable(toggle: boolean): void;
export declare function flagPlayerContextInTournament(toggle: boolean): void;
export declare function setPedHasAiBlip(ped: Ped | Player | LocalPlayer | number, hasCone: boolean): void;
export declare function setPedHasAiBlipWithColour(ped: Ped | Player | LocalPlayer | number, hasCone: boolean, color: number): void;
export declare function doesPedHaveAiBlip(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedAiBlipGangId(ped: Ped | Player | LocalPlayer | number, gangId: number): void;
export declare function setPedAiBlipHasCone(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedAiBlipForcedOn(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedAiBlipNoticeRange(ped: Ped | Player | LocalPlayer | number, range: number): void;
export declare function setPedAiBlipSprite(ped: Ped | Player | LocalPlayer | number, spriteId: number): void;
export declare function getAiPedPedBlipIndex(ped: Ped | Player | LocalPlayer | number): number;
export declare function getAiPedVehicleBlipIndex(ped: Ped | Player | LocalPlayer | number): number;
export declare function hasDirectorModeBeenLaunchedByCode(): boolean;
export declare function setDirectorModeLaunchedByScript(): void;
export declare function setPlayerIsInDirectorMode(toggle: boolean): void;
export declare function setDirectorModeAvailable(toggle: boolean): void;
export declare function hideHudmarkersThisFrame(): void;
export declare function getInteriorHeading(interior: number): number;
export declare function getInteriorLocationAndNamehash(interior: number, position?: Vector3 | null, nameHash?: number | null): [void, Vector3, number];
export declare function getInteriorGroupId(interior: number): number;
export declare function getOffsetFromInteriorInWorldCoords(interior: number, x: number, y: number, z: number): Vector3;
export declare function isInteriorScene(): boolean;
export declare function isValidInterior(interior: number): boolean;
export declare function clearRoomForEntity(entity: Entity | number): void;
export declare function forceRoomForEntity(entity: Entity | number, interior: number, roomHashKey: number): void;
export declare function getRoomKeyFromEntity(entity: Entity | number): number;
export declare function getKeyForEntityInRoom(entity: Entity | number): number;
export declare function getInteriorFromEntity(entity: Entity | number): number;
export declare function retainEntityInInterior(entity: Entity | number, interior: number): void;
export declare function clearInteriorStateOfEntity(entity: Entity | number): void;
export declare function forceActivatingTrackingOnEntity(p0: any, p1: any): void;
export declare function forceRoomForGameViewport(interiorID: number, roomHashKey: number): void;
export declare function setRoomForGameViewportByName(roomName: string | null): void;
export declare function setRoomForGameViewportByKey(roomHashKey: number): void;
export declare function getRoomKeyForGameViewport(): number;
export declare function clearRoomForGameViewport(): void;
export declare function getInteriorFromPrimaryView(): number;
export declare function getInteriorAtCoords(x: number, y: number, z: number): number;
export declare function addPickupToInteriorRoomByName(pickup: number, roomName: string | null): void;
export declare function pinInteriorInMemory(interior: number): void;
export declare function unpinInterior(interior: number): void;
export declare function isInteriorReady(interior: number): boolean;
export declare function setInteriorInUse(interior: number): boolean;
export declare function getInteriorAtCoordsWithType(x: number, y: number, z: number, interiorType: string | null): number;
export declare function getInteriorAtCoordsWithTypehash(x: number, y: number, z: number, typeHash: number): number;
export declare function activateInteriorGroupsUsingCamera(): void;
export declare function isCollisionMarkedOutside(x: number, y: number, z: number): boolean;
export declare function getInteriorFromCollision(x: number, y: number, z: number): number;
export declare function enableStadiumProbesThisFrame(toggle: boolean): void;
export declare function activateInteriorEntitySet(interior: number, entitySetName: string | null): void;
export declare function deactivateInteriorEntitySet(interior: number, entitySetName: string | null): void;
export declare function isInteriorEntitySetActive(interior: number, entitySetName: string | null): boolean;
export declare function setInteriorEntitySetTintIndex(interior: number, entitySetName: string | null, color: number): void;
export declare function refreshInterior(interior: number): void;
export declare function enableExteriorCullModelThisFrame(mapObjectHash: number): void;
export declare function enableShadowCullModelThisFrame(mapObjectHash: number): void;
export declare function disableInterior(interior: number, toggle: boolean): void;
export declare function isInteriorDisabled(interior: number): boolean;
export declare function capInterior(interior: number, toggle: boolean): void;
export declare function isInteriorCapped(interior: number): boolean;
export declare function disableMetroSystem(toggle: boolean): void;
export declare function setIsExteriorOnly(entity: Entity | number, toggle: boolean): void;
export declare function createItemset(p0: boolean): number;
export declare function destroyItemset(itemset: number): void;
export declare function isItemsetValid(itemset: number): boolean;
export declare function addToItemset(item: number, itemset: number): boolean;
export declare function removeFromItemset(item: number, itemset: number): void;
export declare function getItemsetSize(itemset: number): number;
export declare function getIndexedItemInItemset(index: number, itemset: number): number;
export declare function isInItemset(item: number, itemset: number): boolean;
export declare function cleanItemset(itemset: number): void;
export declare function lobbyAutoMultiplayerMenu(): boolean;
export declare function lobbyAutoMultiplayerFreemode(): boolean;
export declare function lobbySetAutoMultiplayer(toggle: boolean): void;
export declare function lobbyAutoMultiplayerEvent(): boolean;
export declare function lobbySetAutoMultiplayerEvent(toggle: boolean): void;
export declare function lobbyAutoMultiplayerRandomJob(): boolean;
export declare function lobbySetAutoMpRandomJob(toggle: boolean): void;
export declare function shutdownSessionClearsAutoMultiplayer(toggle: boolean): void;
export declare function localizationGetSystemLanguage(): number;
export declare function getCurrentLanguage(): number;
export declare function localizationGetSystemDateType(): number;
export declare function getAllocatedStackSize(): number;
export declare function getNumberOfFreeStacksOfThisSize(stackSize: number): number;
export declare function setRandomSeed(seed: number): void;
export declare function setTimeScale(timeScale: number): void;
export declare function setMissionFlag(toggle: boolean): void;
export declare function getMissionFlag(): boolean;
export declare function setRandomEventFlag(toggle: boolean): void;
export declare function getRandomEventFlag(): boolean;
export declare function getContentToLoad(): string | null;
export declare function activityFeedCreate(p0: string | null, p1: string | null): void;
export declare function activityFeedAddSubstringToCaption(p0: string | null): void;
export declare function activityFeedAddLiteralSubstringToCaption(p0: string | null): void;
export declare function activityFeedAddIntToCaption(p0: any): void;
export declare function activityFeedLargeImageUrl(p0: string | null): void;
export declare function activityFeedActionStartWithCommandLine(p0: string | null, p1: string | null): void;
export declare function activityFeedActionStartWithCommandLineAdd(p0: string | null): void;
export declare function activityFeedPost(): void;
export declare function activityFeedOnlinePlayedWithPost(p0: string | null): void;
export declare function hasResumedFromSuspend(): boolean;
export declare function setScriptHighPrio(toggle: boolean): void;
export declare function setThisIsATriggerScript(toggle: boolean): void;
export declare function informCodeOfContentIdOfCurrentUgcMission(p0: string | null): void;
export declare function getBaseElementLocationFromMetadataBlock(p0: any | null, p1: any | null, p2: any, p3: boolean): [boolean, any, any];
export declare function getPrevWeatherTypeHashName(): number;
export declare function getNextWeatherTypeHashName(): number;
export declare function isPrevWeatherType(weatherType: string | null): boolean;
export declare function isNextWeatherType(weatherType: string | null): boolean;
export declare function setWeatherTypePersist(weatherType: string | null): void;
export declare function setWeatherTypeNowPersist(weatherType: string | null): void;
export declare function setWeatherTypeNow(weatherType: string | null): void;
export declare function setWeatherTypeOvertimePersist(weatherType: string | null, time: number): void;
export declare function setRandomWeatherType(): void;
export declare function clearWeatherTypePersist(): void;
export declare function clearWeatherTypeNowPersistNetwork(milliseconds: number): void;
export declare function getCurrWeatherState(weatherType1?: number | null, weatherType2?: number | null, percentWeather2?: number | null): [void, number, number, number];
export declare function setCurrWeatherState(weatherType1: number, weatherType2: number, percentWeather2: number): void;
export declare function setOverrideWeather(weatherType: string | null): void;
export declare function setOverrideWeatherex(weatherType: string | null, p1: boolean): void;
export declare function clearOverrideWeather(): void;
export declare function waterOverrideSetShorewaveamplitude(amplitude: number): void;
export declare function waterOverrideSetShorewaveminamplitude(minAmplitude: number): void;
export declare function waterOverrideSetShorewavemaxamplitude(maxAmplitude: number): void;
export declare function waterOverrideSetOceannoiseminamplitude(minAmplitude: number): void;
export declare function waterOverrideSetOceanwaveamplitude(amplitude: number): void;
export declare function waterOverrideSetOceanwaveminamplitude(minAmplitude: number): void;
export declare function waterOverrideSetOceanwavemaxamplitude(maxAmplitude: number): void;
export declare function waterOverrideSetRipplebumpiness(bumpiness: number): void;
export declare function waterOverrideSetRippleminbumpiness(minBumpiness: number): void;
export declare function waterOverrideSetRipplemaxbumpiness(maxBumpiness: number): void;
export declare function waterOverrideSetRippledisturb(disturb: number): void;
export declare function waterOverrideSetStrength(strength: number): void;
export declare function waterOverrideFadeIn(p0: number): void;
export declare function waterOverrideFadeOut(p0: number): void;
export declare function setWind(speed: number): void;
export declare function setWindSpeed(speed: number): void;
export declare function getWindSpeed(): number;
export declare function setWindDirection(direction: number): void;
export declare function getWindDirection(): Vector3;
export declare function setRain(intensity: number): void;
export declare function getRainLevel(): number;
export declare function setSnow(level: number): void;
export declare function getSnowLevel(): number;
export declare function forceLightningFlash(): void;
export declare function setCloudSettingsOverride(p0: string | null): void;
export declare function preloadCloudHat(name: string | null): void;
export declare function loadCloudHat(name: string | null, transitionTime: number): void;
export declare function unloadCloudHat(name: string | null, p1: number): void;
export declare function unloadAllCloudHats(): void;
export declare function setCloudsAlpha(opacity: number): void;
export declare function getCloudsAlpha(): number;
export declare function getGameTimer(): number;
export declare function getFrameTime(): number;
export declare function getSystemTimeStep(): number;
export declare function getFrameCount(): number;
export declare function getRandomFloatInRange(startRange: number, endRange: number): number;
export declare function getRandomIntInRange(startRange: number, endRange: number): number;
export declare function getRandomMwcIntInRange(startRange: number, endRange: number): number;
export declare function getGroundZFor3dCoord(x: number, y: number, z: number, groundZ: number | null, ignoreWater: boolean, p5: boolean): [boolean, number];
export declare function getGroundZAndNormalFor3dCoord(x: number, y: number, z: number, groundZ?: number | null, normal?: Vector3 | null): [boolean, number, Vector3];
export declare function getGroundZExcludingObjectsFor3dCoord(x: number, y: number, z: number, groundZ: number | null, p4: boolean, p5: boolean): [boolean, number];
export declare function asin(p0: number): number;
export declare function acos(p0: number): number;
export declare function tan(p0: number): number;
export declare function atan(p0: number): number;
export declare function atan2(p0: number, p1: number): number;
export declare function getDistanceBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, useZ: boolean): number;
export declare function getAngleBetween2dVectors(x1: number, y1: number, x2: number, y2: number): number;
export declare function getHeadingFromVector2d(dx: number, dy: number): number;
export declare function getRatioOfClosestPointOnLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, clamp: boolean): number;
export declare function getClosestPointOnLine(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, clamp: boolean): Vector3;
export declare function getLinePlaneIntersection(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12?: number | null): [boolean, number];
export declare function getPointAreaOverlap(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any, p10: any, p11: any, p12: any, p13: any): boolean;
export declare function setBit(address: number | null, offset: number): [void, number];
export declare function clearBit(address: number | null, offset: number): [void, number];
export declare function getHashKey(string: string | null): number;
export declare function slerpNearQuaternion(t: number, x: number, y: number, z: number, w: number, x1: number, y1: number, z1: number, w1: number, outX?: number | null, outY?: number | null, outZ?: number | null, outW?: number | null): [void, number, number, number, number];
export declare function isAreaOccupied(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: any, p12: boolean): boolean;
export declare function isAreaOccupiedSlow(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any, p10: any, p11: any, p12: any): boolean;
export declare function isPositionOccupied(x: number, y: number, z: number, range: number, p4: boolean, checkVehicles: boolean, checkPeds: boolean, p7: boolean, p8: boolean, ignoreEntity: Entity | number, p10: boolean): boolean;
export declare function isPointObscuredByAMissionEntity(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: any): boolean;
export declare function clearArea(X: number, Y: number, Z: number, radius: number, p4: boolean, ignoreCopCars: boolean, ignoreObjects: boolean, p7: boolean): void;
export declare function clearAreaLeaveVehicleHealth(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean): void;
export declare function clearAreaOfVehicles(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: boolean, p9: boolean, p10: any): void;
export declare function clearAngledAreaOfVehicles(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p7: boolean, p8: boolean, p9: boolean, p10: boolean, p11: boolean, p12: any, p13: any): void;
export declare function clearAreaOfObjects(x: number, y: number, z: number, radius: number, flags: number): void;
export declare function clearAreaOfPeds(x: number, y: number, z: number, radius: number, flags: number): void;
export declare function clearAreaOfCops(x: number, y: number, z: number, radius: number, flags: number): void;
export declare function clearAreaOfProjectiles(x: number, y: number, z: number, radius: number, flags: number): void;
export declare function clearScenarioSpawnHistory(): void;
export declare function setSaveMenuActive(ignoreVehicle: boolean): void;
export declare function getStatusOfManualSave(): number;
export declare function setCreditsActive(toggle: boolean): void;
export declare function setCreditsFadeOutWithScreen(toggle: boolean): void;
export declare function haveCreditsReachedEnd(): boolean;
export declare function areCreditsRunning(): boolean;
export declare function terminateAllScriptsWithThisName(scriptName: string | null): void;
export declare function networkSetScriptIsSafeForNetworkGame(): void;
export declare function addHospitalRestart(x: number, y: number, z: number, p3: number, p4: any): number;
export declare function disableHospitalRestart(hospitalIndex: number, toggle: boolean): void;
export declare function addPoliceRestart(p0: number, p1: number, p2: number, p3: number, p4: any): number;
export declare function disablePoliceRestart(policeIndex: number, toggle: boolean): void;
export declare function setRestartCoordOverride(x: number, y: number, z: number, heading: number): void;
export declare function clearRestartCoordOverride(): void;
export declare function pauseDeathArrestRestart(toggle: boolean): void;
export declare function ignoreNextRestart(toggle: boolean): void;
export declare function setFadeOutAfterDeath(toggle: boolean): void;
export declare function setFadeOutAfterArrest(toggle: boolean): void;
export declare function setFadeInAfterDeathArrest(toggle: boolean): void;
export declare function setFadeInAfterLoad(toggle: boolean): void;
export declare function registerSaveHouse(x: number, y: number, z: number, p3: number, p4: string | null, p5: any, p6: any): number;
export declare function setSaveHouse(savehouseHandle: number, p1: boolean, p2: boolean): void;
export declare function overrideSaveHouse(p0: boolean, p1: number, p2: number, p3: number, p4: number, p5: boolean, p6: number, p7: number): boolean;
export declare function getSaveHouseDetailsAfterSuccessfulLoad(p0?: Vector3 | null, p1?: number | null, fadeInAfterLoad?: boolean | null, p3?: boolean | null): [boolean, Vector3, number, boolean, boolean];
export declare function doAutoSave(): void;
export declare function getIsAutoSaveOff(): boolean;
export declare function isAutoSaveInProgress(): boolean;
export declare function hasCodeRequestedAutosave(): boolean;
export declare function clearCodeRequestedAutosave(): void;
export declare function beginReplayStats(p0: any, p1: any): void;
export declare function addReplayStatValue(value: any): void;
export declare function endReplayStats(): void;
export declare function haveReplayStatsBeenStored(): boolean;
export declare function getReplayStatMissionId(): number;
export declare function getReplayStatMissionType(): number;
export declare function getReplayStatCount(): number;
export declare function getReplayStatAtIndex(index: number): number;
export declare function clearReplayStats(): void;
export declare function queueMissionRepeatLoad(): boolean;
export declare function queueMissionRepeatSave(): boolean;
export declare function queueMissionRepeatSaveForBenchmarkTest(): boolean;
export declare function getStatusOfMissionRepeatSave(): number;
export declare function isMemoryCardInUse(): boolean;
export declare function shootSingleBulletBetweenCoords(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: Ped | Player | LocalPlayer | number, isAudible: boolean, isInvisible: boolean, speed: number): void;
export declare function shootSingleBulletBetweenCoordsIgnoreEntity(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: Ped | Player | LocalPlayer | number, isAudible: boolean, isInvisible: boolean, speed: number, entity: Entity | number, p14: any): void;
export declare function shootSingleBulletBetweenCoordsIgnoreEntityNew(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, damage: number, p7: boolean, weaponHash: number, ownerPed: Ped | Player | LocalPlayer | number, isAudible: boolean, isInvisible: boolean, speed: number, entity: Entity | number, p14: boolean, p15: boolean, targetEntity: Entity | number, p17: boolean, p18: any, p19: any, p20: any): void;
export declare function getModelDimensions(modelHash: number, minimum?: Vector3 | null, maximum?: Vector3 | null): [void, Vector3, Vector3];
export declare function setFakeWantedLevel(fakeWantedLevel: number): void;
export declare function getFakeWantedLevel(): number;
export declare function usingMissionCreator(toggle: boolean): void;
export declare function allowMissionCreatorWarp(toggle: boolean): void;
export declare function setMinigameInProgress(toggle: boolean): void;
export declare function isMinigameInProgress(): boolean;
export declare function isThisAMinigameScript(): boolean;
export declare function isSniperInverted(): boolean;
export declare function shouldUseMetricMeasurements(): boolean;
export declare function getProfileSetting(profileSetting: number): number;
export declare function areStringsEqual(string1: string | null, string2: string | null): boolean;
export declare function compareStrings(str1: string | null, str2: string | null, matchCase: boolean, maxLength: number): number;
export declare function absi(value: number): number;
export declare function absf(value: number): number;
export declare function isSniperBulletInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
export declare function isProjectileInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, ownedByPlayer: boolean): boolean;
export declare function isProjectileTypeInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, type: number, ownedByPlayer: boolean): boolean;
export declare function isProjectileTypeInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p7: any, ownedByPlayer: boolean): boolean;
export declare function isProjectileTypeWithinDistance(x: number, y: number, z: number, projectileHash: number, radius: number, ownedByPlayer: boolean): boolean;
export declare function getCoordsOfProjectileTypeInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, projectileHash: number, projectilePos: Vector3 | null, ownedByPlayer: boolean): [boolean, Vector3];
export declare function getCoordsOfProjectileTypeInAngledArea(vecAngledAreaPoint1X: number, vecAngledAreaPoint1Y: number, vecAngledAreaPoint1Z: number, vecAngledAreaPoint2X: number, vecAngledAreaPoint2Y: number, vecAngledAreaPoint2Z: number, distanceOfOppositeFace: number, weaponType: number, positionOut: Vector3 | null, bIsPlayer: boolean): [boolean, Vector3];
export declare function getCoordsOfProjectileTypeWithinDistance(ped: Ped | Player | LocalPlayer | number, weaponHash: number, distance: number, outCoords: Vector3 | null, p4: boolean): [boolean, Vector3];
export declare function getProjectileOfProjectileTypeWithinDistance(ped: Ped | Player | LocalPlayer | number, weaponHash: number, distance: number, outCoords: Vector3 | null, outProjectile: number | null, p5: boolean): [boolean, Vector3, number];
export declare function isBulletInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, ownedByPlayer: boolean): boolean;
export declare function isBulletInArea(x: number, y: number, z: number, radius: number, ownedByPlayer: boolean): boolean;
export declare function isBulletInBox(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, ownedByPlayer: boolean): boolean;
export declare function hasBulletImpactedInArea(x: number, y: number, z: number, p3: number, p4: boolean, p5: boolean): boolean;
export declare function hasBulletImpactedInBox(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: boolean, p7: boolean): boolean;
export declare function isOrbisVersion(): boolean;
export declare function isDurangoVersion(): boolean;
export declare function isXbox360Version(): boolean;
export declare function isPs3Version(): boolean;
export declare function isPcVersion(): boolean;
export declare function isSteamVersion(): boolean;
export declare function isAussieVersion(): boolean;
export declare function isJapaneseVersion(): boolean;
export declare function isXboxPlatform(): boolean;
export declare function isScarlettVersion(): boolean;
export declare function isScePlatform(): boolean;
export declare function isProsperoVersion(): boolean;
export declare function isStringNull(string: string | null): boolean;
export declare function isStringNullOrEmpty(string: string | null): boolean;
export declare function stringToInt(string: string | null, outInteger?: number | null): [boolean, number];
export declare function setBitsInRange(unkVar: number | null, rangeStart: number, rangeEnd: number, p3: number): [void, number];
export declare function getBitsInRange(unkVar: number, rangeStart: number, rangeEnd: number): number;
export declare function addStuntJump(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number, camX: number, camY: number, camZ: number, p15: number, p16: number, p17: number): number;
export declare function addStuntJumpAngled(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius1: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number, radius2: number, camX: number, camY: number, camZ: number, p17: number, p18: number, p19: number): number;
export declare function toggleShowOptionalStuntJumpCamera(toggle: boolean): void;
export declare function deleteStuntJump(p0: number): void;
export declare function enableStuntJumpSet(p0: number): void;
export declare function disableStuntJumpSet(p0: number): void;
export declare function setStuntJumpsCanTrigger(toggle: boolean): void;
export declare function isStuntJumpInProgress(): boolean;
export declare function isStuntJumpMessageShowing(): boolean;
export declare function getNumSuccessfulStuntJumps(): number;
export declare function getTotalSuccessfulStuntJumps(): number;
export declare function cancelStuntJump(): void;
export declare function setGamePaused(toggle: boolean): void;
export declare function setThisScriptCanBePaused(toggle: boolean): void;
export declare function setThisScriptCanRemoveBlipsCreatedByAnyScript(toggle: boolean): void;
export declare function hasCheatWithHashBeenActivated(hash: number, amount: number): boolean;
export declare function hasPcCheatWithHashBeenActivated(hash: number): boolean;
export declare function overrideFreezeFlags(p0: boolean): void;
export declare function setInstancePriorityMode(p0: number): void;
export declare function setInstancePriorityHint(flag: number): void;
export declare function isFrontendFading(): boolean;
export declare function populateNow(): void;
export declare function getIndexOfCurrentLevel(): number;
export declare function setGravityLevel(level: number): void;
export declare function startSaveData(p0: any | null, p1: any, p2: boolean): [void, any];
export declare function stopSaveData(): void;
export declare function getSizeOfSaveData(p0: boolean): number;
export declare function registerIntToSave(p0: any | null, name: string | null): [void, any];
export declare function registerInt64ToSave(p0: any | null, name: string | null): [void, any];
export declare function registerEnumToSave(p0: any | null, name: string | null): [void, any];
export declare function registerFloatToSave(p0: any | null, name: string | null): [void, any];
export declare function registerBoolToSave(p0: any | null, name: string | null): [void, any];
export declare function registerTextLabelToSave(p0: any | null, name: string | null): [void, any];
export declare function registerTextLabel15ToSave(p0: any | null, name: string | null): [void, any];
export declare function registerTextLabel23ToSave(p0: any | null, name: string | null): [void, any];
export declare function registerTextLabel31ToSave(p0: any | null, name: string | null): [void, any];
export declare function registerTextLabel63ToSave(p0: any | null, name: string | null): [void, any];
export declare function startSaveStructWithSize(p0: any | null, size: number, structName: string | null): [void, any];
export declare function stopSaveStruct(): void;
export declare function startSaveArrayWithSize(p0: any | null, size: number, arrayName: string | null): [void, any];
export declare function stopSaveArray(): void;
export declare function copyScriptStruct(dst: any | null, src: any | null, size: number): [void, any, any];
export declare function enableDispatchService(dispatchService: number, toggle: boolean): void;
export declare function blockDispatchServiceResourceCreation(dispatchService: number, toggle: boolean): void;
export declare function getNumberResourcesAllocatedToWantedLevel(dispatchService: number): number;
export declare function createIncident(dispatchService: number, x: number, y: number, z: number, numUnits: number, radius: number, outIncidentID: number | null, p7: any, p8: any): [boolean, number];
export declare function createIncidentWithEntity(dispatchService: number, ped: Ped | Player | LocalPlayer | number, numUnits: number, radius: number, outIncidentID: number | null, p5: any, p6: any): [boolean, number];
export declare function deleteIncident(incidentId: number): void;
export declare function isIncidentValid(incidentId: number): boolean;
export declare function setIncidentRequestedUnits(incidentId: number, dispatchService: number, numUnits: number): void;
export declare function setIdealSpawnDistanceForIncident(incidentId: number, p1: number): void;
export declare function findSpawnPointInDirection(posX: number, posY: number, posZ: number, fwdVecX: number, fwdVecY: number, fwdVecZ: number, distance: number, spawnPoint?: Vector3 | null): [boolean, Vector3];
export declare function addPopMultiplierArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: number, p7: number, p8: boolean, p9: boolean): number;
export declare function doesPopMultiplierAreaExist(id: number): boolean;
export declare function removePopMultiplierArea(id: number, p1: boolean): void;
export declare function isPopMultiplierAreaNetworked(id: number): boolean;
export declare function addPopMultiplierSphere(x: number, y: number, z: number, radius: number, pedMultiplier: number, vehicleMultiplier: number, p6: boolean, p7: boolean): number;
export declare function doesPopMultiplierSphereExist(id: number): boolean;
export declare function removePopMultiplierSphere(id: number, p1: boolean): void;
export declare function enableTennisMode(ped: Ped | Player | LocalPlayer | number, toggle: boolean, p2: boolean): void;
export declare function isTennisMode(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function playTennisSwingAnim(ped: Ped | Player | LocalPlayer | number, animDict: string | null, animName: string | null, p3: number, p4: number, p5: boolean): void;
export declare function getTennisSwingAnimComplete(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function getTennisSwingAnimCanBeInterrupted(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function getTennisSwingAnimSwung(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function playTennisDiveAnim(ped: Ped | Player | LocalPlayer | number, p1: number, p2: number, p3: number, p4: number, p5: boolean): void;
export declare function setTennisMoveNetworkSignalFloat(ped: Ped | Player | LocalPlayer | number, p1: string | null, p2: number): void;
export declare function resetDispatchSpawnLocation(): void;
export declare function setDispatchSpawnLocation(x: number, y: number, z: number): void;
export declare function resetDispatchIdealSpawnDistance(): void;
export declare function setDispatchIdealSpawnDistance(distance: number): void;
export declare function resetDispatchTimeBetweenSpawnAttempts(p0: any): void;
export declare function setDispatchTimeBetweenSpawnAttempts(p0: any, p1: number): void;
export declare function setDispatchTimeBetweenSpawnAttemptsMultiplier(p0: any, p1: number): void;
export declare function addDispatchSpawnAngledBlockingArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): number;
export declare function addDispatchSpawnSphereBlockingArea(x1: number, y1: number, x2: number, y2: number): number;
export declare function removeDispatchSpawnBlockingArea(p0: number): void;
export declare function resetDispatchSpawnBlockingAreas(): void;
export declare function resetWantedResponseNumPedsToSpawn(): void;
export declare function setWantedResponseNumPedsToSpawn(p0: number, p1: number): void;
export declare function addTacticalNavMeshPoint(x: number, y: number, z: number): void;
export declare function clearTacticalNavMeshPoints(): void;
export declare function setRiotModeEnabled(toggle: boolean): void;
export declare function displayOnscreenKeyboardWithLongerInitialString(p0: number, windowTitle: string | null, p2: any | null, defaultText: string | null, defaultConcat1: string | null, defaultConcat2: string | null, defaultConcat3: string | null, defaultConcat4: string | null, defaultConcat5: string | null, defaultConcat6: string | null, defaultConcat7: string | null, maxInputLength: number): [void, any];
export declare function displayOnscreenKeyboard(p0: number, windowTitle: string | null, p2: string | null, defaultText: string | null, defaultConcat1: string | null, defaultConcat2: string | null, defaultConcat3: string | null, maxInputLength: number): void;
export declare function updateOnscreenKeyboard(): number;
export declare function getOnscreenKeyboardResult(): string | null;
export declare function cancelOnscreenKeyboard(): void;
export declare function nextOnscreenKeyboardResultWillDisplayUsingTheseFonts(p0: number): void;
export declare function actionManagerEnableAction(hash: number, enable: boolean): void;
export declare function getRealWorldTime(): number;
export declare function supressRandomEventThisFrame(eventType: number, suppress: boolean): void;
export declare function setExplosiveAmmoThisFrame(player: Player | number): void;
export declare function setFireAmmoThisFrame(player: Player | number): void;
export declare function setExplosiveMeleeThisFrame(player: Player | number): void;
export declare function setSuperJumpThisFrame(player: Player | number): void;
export declare function setBeastJumpThisFrame(player: Player | number): void;
export declare function setForcedJumpThisFrame(player: Player | number): void;
export declare function hasGameInstalledThisSession(): boolean;
export declare function setTickerJohnmarstonIsDone(): void;
export declare function areProfileSettingsValid(): boolean;
export declare function preventArrestStateThisFrame(): void;
export declare function forceGameStatePlaying(): void;
export declare function scriptRaceInit(p0: number, p1: number, p2: any, p3: any): void;
export declare function scriptRaceShutdown(): void;
export declare function scriptRacePlayerHitCheckpoint(player: Player | number, p1: any, p2: any, p3: any): void;
export declare function scriptRaceGetPlayerSplitTime(player: Player | number, p1?: number | null, p2?: number | null): [boolean, number, number];
export declare function startEndUserBenchmark(): void;
export declare function stopEndUserBenchmark(): void;
export declare function resetEndUserBenchmark(): void;
export declare function saveEndUserBenchmark(): void;
export declare function uiStartedEndUserBenchmark(): boolean;
export declare function landingScreenStartedEndUserBenchmark(): boolean;
export declare function isCommandlineEndUserBenchmark(): boolean;
export declare function getBenchmarkIterations(): number;
export declare function getBenchmarkPass(): number;
export declare function restartGame(): void;
export declare function quitGame(): void;
export declare function hasAsyncInstallFinished(): boolean;
export declare function cleanupAsyncInstall(): void;
export declare function plmIsInConstrainedMode(): boolean;
export declare function plmGetConstrainedDurationMs(): number;
export declare function setPlayerIsInAnimalForm(toggle: boolean): void;
export declare function getIsPlayerInAnimalForm(): boolean;
export declare function setPlayerIsRepeatingAMission(toggle: boolean): void;
export declare function disableScreenDimmingThisFrame(): void;
export declare function getCityDensity(): number;
export declare function useActiveCameraForTimeslicingCentre(): void;
export declare function setContentIdIndex(contentId: number, index: number): void;
export declare function getContentIdIndex(contentId: number): number;
export declare function setContentPropType(model: number, type: number): void;
export declare function getContentPropType(model: number): number;
export declare function createMobilePhone(phoneType: number): void;
export declare function destroyMobilePhone(): void;
export declare function setMobilePhoneScale(scale: number): void;
export declare function setMobilePhoneRotation(rotX: number, rotY: number, rotZ: number, p3: any): void;
export declare function getMobilePhoneRotation(rotation: Vector3 | null, p1: Vehicle | number): [void, Vector3];
export declare function setMobilePhonePosition(posX: number, posY: number, posZ: number): void;
export declare function getMobilePhonePosition(position?: Vector3 | null): [void, Vector3];
export declare function scriptIsMovingMobilePhoneOffscreen(toggle: boolean): void;
export declare function canPhoneBeSeenOnScreen(): boolean;
export declare function setMobilePhoneDofState(toggle: boolean): void;
export declare function cellSetInput(direction: number): void;
export declare function cellHorizontalModeToggle(toggle: boolean): void;
export declare function cellCamActivate(p0: boolean, p1: boolean): void;
export declare function cellCamActivateSelfieMode(toggle: boolean): void;
export declare function cellCamActivateShallowDofMode(toggle: boolean): void;
export declare function cellCamSetSelfieModeSideOffsetScaling(p0: number): void;
export declare function cellCamSetSelfieModeHorzPanOffset(horizontalPan: number): void;
export declare function cellCamSetSelfieModeVertPanOffset(vertPan: number): void;
export declare function cellCamSetSelfieModeRollOffset(roll: number): void;
export declare function cellCamSetSelfieModeDistanceScaling(distanceScaling: number): void;
export declare function cellCamSetSelfieModeHeadYawOffset(yaw: number): void;
export declare function cellCamSetSelfieModeHeadRollOffset(roll: number): void;
export declare function cellCamSetSelfieModeHeadPitchOffset(pitch: number): void;
export declare function cellCamIsCharVisibleNoFaceCheck(entity: Entity | number): boolean;
export declare function getMobilePhoneRenderId(renderId?: number | null): [void, number];
export declare function networkInitializeCash(wallet: number, bank: number): void;
export declare function networkDeleteCharacter(characterSlot: number, p1: boolean, p2: boolean): void;
export declare function networkManualDeleteCharacter(characterSlot: number): void;
export declare function networkGetPlayerIsHighEarner(): boolean;
export declare function networkClearCharacterWallet(characterSlot: number): void;
export declare function networkGivePlayerJobshareCash(amount: number, gamerHandle?: any | null): [void, any];
export declare function networkReceivePlayerJobshareCash(value: number, gamerHandle?: any | null): [void, any];
export declare function networkCanShareJobCash(): boolean;
export declare function networkRefundCash(index: number, context: string | null, reason: string | null, p3: boolean): void;
export declare function networkDeductCash(amount: number, p1: string | null, p2: string | null, p3: boolean, p4: boolean, p5: boolean): void;
export declare function networkMoneyCanBet(amount: number, p1: boolean, p2: boolean): boolean;
export declare function networkCanBet(amount: number): boolean;
export declare function networkCasinoCanBet(hash: number): boolean;
export declare function networkCasinoCanBetPvc(): boolean;
export declare function networkCasinoCanBetAmount(p0: any): boolean;
export declare function networkCasinoCanBuyChipsPvc(): boolean;
export declare function networkCasinoBuyChips(p0: number, p1: number): boolean;
export declare function networkCasinoSellChips(p0: number, p1: number): boolean;
export declare function networkDeferCashTransactionsUntilShopSave(): void;
export declare function canPayAmountToBoss(p0: number, p1: number, amount: number, p3?: number | null): [boolean, number];
export declare function networkEarnFromPickup(amount: number): void;
export declare function networkEarnFromCashingOut(amount: number): void;
export declare function networkEarnFromGangattackPickup(amount: number): void;
export declare function networkEarnAssassinateTargetKilled(amount: number): void;
export declare function networkEarnFromRobArmoredCars(amount: number): void;
export declare function networkEarnFromCrateDrop(amount: number): void;
export declare function networkEarnFromBetting(amount: number, p1: string | null): void;
export declare function networkEarnFromJob(amount: number, p1: string | null): void;
export declare function networkEarnFromJobx2(amount: number, p1: string | null): void;
export declare function networkEarnFromPremiumJob(amount: number, p1: string | null): void;
export declare function networkEarnFromBendJob(amount: number, heistHash: string | null): void;
export declare function networkEarnFromChallengeWin(p0: any, p1: any | null, p2: boolean): [void, any];
export declare function networkEarnFromBounty(amount: number, gamerHandle: any | null, p2: any | null, p3: any): [void, any, any];
export declare function networkEarnFromImportExport(amount: number, modelHash: number): void;
export declare function networkEarnFromHoldups(amount: number): void;
export declare function networkEarnFromProperty(amount: number, propertyName: number): void;
export declare function networkEarnFromAiTargetKill(p0: any, p1: any): void;
export declare function networkEarnFromNotBadsport(amount: number): void;
export declare function networkEarnFromVehicle(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void;
export declare function networkEarnFromPersonalVehicle(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void;
export declare function networkEarnFromDailyObjectives(amount: number, type: string | null, characterSlot: number): void;
export declare function networkEarnFromAmbientJob(p0: number, p1: string | null, p2?: any | null): [void, any];
export declare function networkEarnFromJobBonus(p0: any, p1?: any | null, p2?: any | null): [void, any, any];
export declare function networkEarnFromCriminalMastermind(p0: any, p1: any, p2: any): void;
export declare function networkEarnHeistAward(p0: any, p1: any, p2: any): void;
export declare function networkEarnFirstTimeBonus(p0: any, p1: any, p2: any): void;
export declare function networkEarnGoon(p0: any, p1: any, p2: any): void;
export declare function networkEarnBoss(p0: any, p1: any, p2: any): void;
export declare function networkEarnAgency(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkEarnFromWarehouse(amount: number, id: number): void;
export declare function networkEarnFromContraband(amount: number, p1: any): void;
export declare function networkEarnFromDestroyingContraband(p0: any, p1: any, p2: any): void;
export declare function networkEarnFromSmugglerWork(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
export declare function networkEarnFromHangarTrade(p0: any, p1: any): void;
export declare function networkEarnPurchaseClubHouse(p0: any, p1: any): void;
export declare function networkEarnFromBusinessProduct(amount: number, p1: any, p2: any, p3: any): void;
export declare function networkEarnFromVehicleExport(amount: number, p1: any, p2: any): void;
export declare function networkEarnSmugglerAgency(amount: number, p1: any, p2: any, p3: any): void;
export declare function networkEarnBountyHunterReward(p0: any): void;
export declare function networkEarnFromBusinessBattle(p0: any): void;
export declare function networkEarnFromClubManagementParticipation(p0: any, p1: number): void;
export declare function networkEarnFromFmbbPhonecallMission(p0: any): void;
export declare function networkEarnFromBusinessHubSell(p0: any, p1: any, p2: any): void;
export declare function networkEarnFromFmbbBossWork(p0: any): void;
export declare function networkEarnFmbbWageBonus(p0: any): void;
export declare function networkCanSpendMoney(p0: any, p1: boolean, p2: boolean, p3: boolean, p4: any, p5: any): boolean;
export declare function networkCanSpendMoney2(p0: any, p1: boolean, p2: boolean, p3: boolean, p4: any | null, p5: any, p6: any): [boolean, any];
export declare function networkBuyItem(amount: number, item: number, p2: any, p3: any, p4: boolean, item_name: string | null, p6: any, p7: any, p8: any, p9: boolean): void;
export declare function networkSpentTaxi(amount: number, p1: boolean, p2: boolean, p3: any, p4: any): void;
export declare function networkPayEmployeeWage(p0: any, p1: boolean, p2: boolean): void;
export declare function networkPayMatchEntryFee(amount: number, matchId: string | null, p2: boolean, p3: boolean): void;
export declare function networkSpentBetting(amount: number, p1: number, matchId: string | null, p3: boolean, p4: boolean): void;
export declare function networkSpentWager(p0: any, p1: any, amount: number): void;
export declare function networkSpentInStripclub(p0: any, p1: boolean, p2: any, p3: boolean): void;
export declare function networkBuyHealthcare(cost: number, p1: boolean, p2: boolean): void;
export declare function networkBuyAirstrike(cost: number, p1: boolean, p2: boolean, p3: any): void;
export declare function networkBuyBackupGang(p0: number, p1: number, p2: boolean, p3: boolean, npcProvider: number): void;
export declare function networkBuyHeliStrike(cost: number, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpentAmmoDrop(p0: any, p1: boolean, p2: boolean, p3: any): void;
export declare function networkBuyBounty(amount: number, victim: Player | number, p2: boolean, p3: boolean, p4: any): void;
export declare function networkBuyProperty(cost: number, propertyName: number, p2: boolean, p3: boolean): void;
export declare function networkBuySmokes(p0: number, p1: boolean, p2: boolean): void;
export declare function networkSpentHeliPickup(p0: any, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpentBoatPickup(p0: any, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpentBullShark(p0: any, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpentCashDrop(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpentHireMugger(p0: any, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpentRobbedByMugger(amount: number, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpentHireMercenary(p0: any, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpentBuyWantedlevel(p0: any, p1: any | null, p2: boolean, p3: boolean, p4: any): [void, any];
export declare function networkSpentBuyOfftheradar(p0: any, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpentBuyRevealPlayers(p0: any, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpentCarwash(p0: any, p1: any, p2: any, p3: boolean, p4: boolean): void;
export declare function networkSpentCinema(p0: any, p1: any, p2: boolean, p3: boolean): void;
export declare function networkSpentTelescope(p0: any, p1: boolean, p2: boolean): void;
export declare function networkSpentHoldups(p0: any, p1: boolean, p2: boolean): void;
export declare function networkSpentBuyPassiveMode(p0: any, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpentBankInterest(p0: number, p1: boolean, p2: boolean): void;
export declare function networkSpentProstitutes(p0: any, p1: boolean, p2: boolean): void;
export declare function networkSpentArrestBail(p0: any, p1: boolean, p2: boolean): void;
export declare function networkSpentPayVehicleInsurancePremium(amount: number, vehicleModel: number, gamerHandle: any | null, notBankrupt: boolean, hasTheMoney: boolean): [void, any];
export declare function networkSpentCallPlayer(p0: any, p1: any | null, p2: boolean, p3: boolean): [void, any];
export declare function networkSpentBounty(p0: any, p1: boolean, p2: boolean): void;
export declare function networkSpentFromRockstar(p0: number, p1: boolean, p2: boolean): void;
export declare function networkSpendEarnedFromBankAndWallets(amount: number): number;
export declare function processCashGift(p0: number | null, p1: number | null, p2: string | null): [string | null, number, number];
export declare function networkSpentMoveSubmarine(p0: any, p1: any, p2: any): void;
export declare function networkSpentPlayerHealthcare(p0: number, p1: number, p2: boolean, p3: boolean): void;
export declare function networkSpentNoCops(p0: any, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpentCargoSourcing(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
export declare function networkSpentRequestJob(p0: any, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpentRequestHeist(p0: any, p1: boolean, p2: boolean, p3: any): void;
export declare function networkBuyFairgroundRide(amount: number, p1: any, p2: boolean, p3: boolean, p4: any): void;
export declare function networkEconomyHasFixedCrazyNumbers(): boolean;
export declare function networkSpentJobSkip(amount: number, matchId: string | null, p2: boolean, p3: boolean): void;
export declare function networkSpentBossGoon(amount: number, p1: boolean, p2: boolean): boolean;
export declare function networkSpendGoon(p0: number, p1: number, amount: number): void;
export declare function networkSpendBoss(p0: any, p1: any, p2: any): void;
export declare function networkSpentMoveYacht(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpentRenameOrganization(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkBuyContrabandMission(p0: number, p1: number, p2: number, p3: boolean, p4: boolean): void;
export declare function networkSpentPaServiceHeli(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentPaServiceVehicle(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentPaServiceSnack(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentPaServiceDancer(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentPaServiceImpound(p0: any, p1: any, p2: any): void;
export declare function networkSpentPaHeliPickup(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentPurchaseOfficeProperty(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function networkSpentUpgradeOfficeProperty(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function networkSpentPurchaseWarehouseProperty(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentUpgradeWarehouseProperty(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentPurchaseImpexpWarehouseProperty(amount: number, data: any | null, p2: boolean, p3: boolean): [void, any];
export declare function networkSpentUpgradeImpexpWarehouseProperty(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentTradeImpexpWarehouseProperty(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentOrderWarehouseVehicle(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentOrderBodyguardVehicle(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentJukebox(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentPurchaseClubHouse(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentUpgradeClubHouse(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentPurchaseBusinessProperty(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentUpgradeBusinessProperty(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentTradeBusinessProperty(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentMcAbility(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function networkSpentPayBusinessSupplies(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentChangeAppearance(p0: any, p1: any, p2: any): void;
export declare function networkSpentVehicleExportMods(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void;
export declare function networkSpentPurchaseOfficeGarage(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentUpgradeOfficeGarage(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentImportExportRepair(p0: any, p1: any, p2: any): void;
export declare function networkSpentPurchaseHangar(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentUpgradeHangar(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentHangarUtilityCharges(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpentHangarStaffCharges(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpentBuyTruck(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentUpgradeTruck(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentBuyBunker(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentUpradeBunker(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkEarnFromSellBunker(amount: number, bunkerHash: number): void;
export declare function networkSpentBallisticEquipment(amount: number, p1: boolean, p2: boolean): void;
export declare function networkEarnRdrBonus(amount: number, p1: any): void;
export declare function networkEarnWagePayment(amount: number, p1: any): void;
export declare function networkEarnWagePaymentBonus(amount: number): void;
export declare function networkSpentBuyBase(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentUpgradeBase(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentBuyTiltrotor(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentUpgradeTiltrotor(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentEmployAssassins(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendGangopsCannon(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendGangopsSkipMission(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendCasinoHeistSkipMission(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkEarnSellBase(amount: number, baseNameHash: number): void;
export declare function networkEarnTargetRefund(amount: number, p1: number): void;
export declare function networkEarnGangopsWages(amount: number, p1: number): void;
export declare function networkEarnGangopsWagesBonus(amount: number, p1: number): void;
export declare function networkEarnDarChallenge(amount: number, p1: any): void;
export declare function networkEarnDoomsdayFinaleBonus(amount: number, vehicleHash: number): void;
export declare function networkEarnGangopsAward(amount: number, p1: string | null, p2: any): void;
export declare function networkEarnGangopsElite(amount: number, p1: string | null, actIndex: number): void;
export declare function networkServiceEarnGangopsRivalDelivery(earnedMoney: number): void;
export declare function networkSpendGangopsStartStrand(type: number, amount: number, p2: boolean, p3: boolean): void;
export declare function networkSpendGangopsTripSkip(amount: number, p1: boolean, p2: boolean): void;
export declare function networkEarnGangopsPrepParticipation(amount: number): void;
export declare function networkEarnGangopsSetup(amount: number, p1: string | null): void;
export declare function networkEarnGangopsFinale(amount: number, p1: string | null): void;
export declare function networkSpendGangopsRepairCost(p0: any, p1: any, p2: any): void;
export declare function networkEarnNightclub(p0: any): void;
export declare function networkEarnNightclubDancing(p0: any): void;
export declare function networkEarnBbEventBonus(amount: number): void;
export declare function networkSpentPurchaseHackerTruck(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentUpgradeHackerTruck(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkEarnHackerTruck(p0: any, amount: number, p2: any, p3: any): void;
export declare function networkSpentPurchaseNightclubAndWarehouse(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentUpgradeNightclubAndWarehouse(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkEarnNightclubAndWarehouse(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
export declare function networkSpendNightclubAndWarehouse(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpentRdrHatchetBonus(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpentNightclubEntryFee(player: Player | number, amount: number, p1: any, p2: boolean, p3: boolean): void;
export declare function networkSpendNightclubBarDrink(amount: number, p1: any, p2: boolean, p3: boolean): void;
export declare function networkSpendBountyHunterMission(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpentRehireDj(amount: number, p1: any, p2: boolean, p3: boolean): void;
export declare function networkSpentArenaJoinSpectator(amount: number, p1: any, p2: boolean, p3: boolean): void;
export declare function networkEarnArenaSkillLevelProgression(amount: number, p1: any): void;
export declare function networkEarnArenaCareerProgression(amount: number, p1: any): void;
export declare function networkSpendMakeItRain(amount: number, p1: boolean, p2: boolean): void;
export declare function networkSpendBuyArena(amount: number, p1: boolean, p2: boolean, p3: string | null): void;
export declare function networkSpendUpgradeArena(amount: number, p1: boolean, p2: boolean, p3: string | null): void;
export declare function networkSpendArenaSpectatorBox(amount: number, type: number, p2: boolean, p3: boolean): void;
export declare function networkSpendSpinTheWheelPayment(amount: number, p1: any, p2: boolean): void;
export declare function networkEarnSpinTheWheelCash(amount: number): void;
export declare function networkSpendArenaPremium(amount: number, p1: boolean, p2: boolean): void;
export declare function networkEarnArenaWar(amount: number, p1: any, p2: any, p3: any): void;
export declare function networkEarnArenaWarAssassinateTarget(amount: number): void;
export declare function networkEarnArenaWarEventCargo(amount: number): void;
export declare function networkEarnRcTimeTrial(amount: number): void;
export declare function networkEarnDailyObjectiveEvent(amount: number): void;
export declare function networkSpendCasinoMembership(amount: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpendBuyCasino(amount: number, p1: boolean, p2: boolean, data?: any | null): [void, any];
export declare function networkSpendUpgradeCasino(amount: number, p1: boolean, p2: boolean, data?: any | null): [void, any];
export declare function networkSpendCasinoGeneric(amount: number, p1: any, p2: any, p3: any, p4: any): void;
export declare function networkEarnCasinoTimeTrialWin(amount: number): void;
export declare function networkEarnCollectablesActionFigures(amount: number): void;
export declare function networkEarnCasinoCollectableCompletedCollection(amount: number): void;
export declare function networkEarnSellPrizeVehicle(amount: number, p1: any, p2: any): void;
export declare function networkEarnCasinoMissionReward(amount: number): void;
export declare function networkEarnCasinoStoryMissionReward(amount: number): void;
export declare function networkEarnCasinoMissionParticipation(amount: number): void;
export declare function networkEarnCasinoAward(amount: number, hash: number): void;
export declare function networkSpendBuyArcade(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendUpgradeArcade(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendCasinoHeist(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any, p10: any): void;
export declare function networkSpendArcadeMgmt(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function networkSpendPlayArcade(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function networkSpendArcade(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function networkEarnCasinoHeist(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
export declare function networkEarnUpgradeArcade(p0: any, p1: any, p2: any): void;
export declare function networkEarnArcade(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function networkEarnCollectables(p0: any, p1: any, p2: any): void;
export declare function networkEarnChallenge(amount: number, p1: any, p2: any): void;
export declare function networkEarnCasinoHeistAwards(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function networkEarnCollectableItem(amount: number, p1: any): void;
export declare function networkEarnCollectableCompletedCollection(amount: number, p1: any): void;
export declare function networkEarnYatchMission(amount: number, p1: any): void;
export declare function networkEarnDispatchCall(amount: number, p1: any): void;
export declare function networkSpendBeachParty(p0: any): void;
export declare function networkSpendSubmarine(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
export declare function networkSpendCasinoClub(amount1: number, p1: any, p2: boolean, p3: any, p4: number, p5: number, p6: number, amount2: number, p8: any): void;
export declare function networkSpendBuySub(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendUpgradeSub(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendIslandHeist(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkEarnIslandHeist(amount1: number, p1: any, p2: any, p3: any, amount2: number, p5: number): void;
export declare function networkEarnBeachPartyLostFound(p0: any, p1: any, p2: any): void;
export declare function networkEarnFromIslandHeistDjMission(p0: any, p1: any): void;
export declare function networkSpendCarClubMembership(amount1: number, p1: any, p2: any, amount2: number, p4: any): void;
export declare function networkSpendCarClubBar(p0: any, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpendAutoshopModify(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function networkSpendCarClubTakeover(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendBuyAutoshop(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendUpgradeAutoshop(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkEarnAutoshopBusiness(p0: any, p1: any, p2: any): void;
export declare function networkEarnAutoshopIncome(p0: any, p1: number): void;
export declare function networkEarnCarclubMembership(p0: any): void;
export declare function networkEarnDailyVehicle(p0: any, p1: any): void;
export declare function networkEarnDailyVehicleBonus(p0: any): void;
export declare function networkEarnTunerAward(p0: any, p1: any, p2: any): void;
export declare function networkEarnTunerRobbery(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function networkEarnUpgradeAutoshop(p0: any, p1: any): void;
export declare function networkSpendInteractionMenuAbility(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendSetCommonFields(p0: any, p1: any, p2: any, p3: boolean): void;
export declare function networkSpendSetDiscount(p0: boolean): void;
export declare function networkSpendBuyAgency(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendUpgradeAgency(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendAgency(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function networkSpendHidden(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendSourceBike(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendCompSuv(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendSuvFstTrvl(p0: number, p1: boolean, p2: boolean, p3: any): void;
export declare function networkSpendSupply(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendBikeShop(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendVehicleRequested(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function networkSpendGunrunning(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkEarnAgencySafe(p0: any): void;
export declare function networkEarnAwardContract(p0: any, p1: any): void;
export declare function networkEarnAgencyContract(p0: any, p1: any): void;
export declare function networkEarnAwardPhone(p0: any, p1: any): void;
export declare function networkEarnAgencyPhone(p0: any, p1: any, p2: any): void;
export declare function networkEarnAwardFixerMission(p0: any, p1: any): void;
export declare function networkEarnFixerPrep(p0: any, p1: any): void;
export declare function networkEarnFixerFinale(p0: any, p1: any): void;
export declare function networkEarnFixerAgencyShortTrip(p0: any, p1: any): void;
export declare function networkEarnAwardShortTrip(p0: any, p1: any): void;
export declare function networkEarnFixerRivalDelivery(p0: any, p1: any): void;
export declare function networkEarnUpgradeAgency(p0: any, p1: any): void;
export declare function networkSpendApartmentUtilities(amount: number, p1: boolean, p2: boolean, data?: any | null): [void, any];
export declare function networkSpendBusinessPropertyFees(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkEarnSightseeingReward(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkEarnBikerShop(p0: any, p1: any): void;
export declare function networkEarnBiker(p0: any): void;
export declare function networkYohanSourceGoods(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendBuyMfgarage(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendUpgradeMfgarage(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendBuySupplies(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpendBuyAcidLab(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendUpgradeAcidLabEquipment(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendUpgradeAcidLabArmor(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpendUpgradeAcidLabScoop(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpendUpgradeAcidLabMines(p0: number, p1: boolean, p2: boolean, p3: number): void;
export declare function networkSpendRenameAcidLab(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkSpendRenameAcidProduct(p0: any, p1: any, p2: any, p3: any): void;
export declare function networkEarnAwardJuggaloMission(p0: any, p1: any): void;
export declare function networkEarnAwardAcidLab(p0: any, p1: any): void;
export declare function networkEarnAwardDailyStash(p0: any, p1: any): void;
export declare function networkEarnAwardDeadDrop(p0: any, p1: any): void;
export declare function networkEarnAwardRandomEvent(p0: any, p1: any): void;
export declare function networkEarnAwardTaxi(p0: any, p1: any): void;
export declare function networkEarnStreetDealer(p0: any, p1: any): void;
export declare function networkEarnSellAcid(p0: any, p1: any): void;
export declare function networkEarnSetupParticipationAcidLab(p0: any, p1: any): void;
export declare function networkEarnSourceParticipationAcidLab(p0: any, p1: any): void;
export declare function networkEarnSellParticipationAcidLab(p0: any, p1: any): void;
export declare function networkEarnJuggaloStoryMission(p0: any, p1: any): void;
export declare function networkEarnJuggaloStoryMissionParticipation(p0: any, p1: any): void;
export declare function networkEarnFooliganJob(p0: any, p1: any): void;
export declare function networkEarnFooliganJobParticipation(p0: any, p1: any): void;
export declare function networkEarnTaxiJob(p0: any, p1: any): void;
export declare function networkEarnDailyStashHouseCompleted(p0: any, p1: any): void;
export declare function networkEarnDailyStashHouseParticipation(p0: any, p1: any): void;
export declare function networkEarnAvenger(amount: number, p1: number): void;
export declare function networkEarnSmugglerOps(p0: any, p1: any, p2: any): void;
export declare function networkEarnBonusObjective(amount: number, p1: any, p2: any): void;
export declare function networkEarnProgressHub(p0: any, p1: any): void;
export declare function networkSpentAirFreight(hangarCargoSourcingPrice: number, fromBank: boolean, fromBankAndWallet: boolean, cost: number, warehouseId: number, warehouseSlot: number): void;
export declare function networkSpentSkipCargoSourceSetup(amount: number, fromBank: boolean, fromBankAndWallet: boolean, cost: number): void;
export declare function networkSpentStealthModule(amount: number, fromBank: boolean, fromBankAndWallet: boolean, p3: number): void;
export declare function networkSpentMissileJammer(amount: number, fromBank: boolean, fromBankAndWallet: boolean, p3: number): void;
export declare function networkSpentGeneric(price: number, p1: boolean, p2: boolean, stat: number, spent: number, p5: string | null, p6: string | null, data?: any | null): [void, any];
export declare function networkEarnGeneric(amount: number, earn: number, p2: string | null, p3: string | null, data?: any | null): [void, any];
export declare function networkClearTransactionTelemetryNonce(): void;
export declare function networkGetVcBankBalance(): number;
export declare function networkGetVcWalletBalance(characterSlot: number): number;
export declare function networkGetVcBalance(): number;
export declare function networkGetEvcBalance(): number;
export declare function networkGetPvcBalance(): number;
export declare function networkGetStringWalletBalance(characterSlot: number): string | null;
export declare function networkGetStringBankBalance(): string | null;
export declare function networkGetStringBankWalletBalance(character: number): string | null;
export declare function networkGetCanSpendFromWallet(amount: number, characterSlot: number): boolean;
export declare function networkGetCanSpendFromBank(amount: number): boolean;
export declare function networkGetCanSpendFromBankAndWallet(amount: number, characterSlot: number): boolean;
export declare function networkGetPvcTransferBalance(): number;
export declare function networkGetCanTransferCash(amount: number): boolean;
export declare function networkCanReceivePlayerCash(p0: any, p1: any, p2: any, p3: any): boolean;
export declare function networkGetRemainingTransferBalance(): number;
export declare function withdrawVc(amount: number): number;
export declare function depositVc(amount: number): boolean;
export declare function hasVcWithdrawalCompleted(p0: any): boolean;
export declare function wasVcWithdrawalSuccessful(p0: any): boolean;
export declare function netGameserverUseServerTransactions(): boolean;
export declare function netGameserverCatalogItemIsValid(name: string | null): boolean;
export declare function netGameserverCatalogItemKeyIsValid(hash: number): boolean;
export declare function netGameserverGetPrice(itemHash: number, categoryHash: number, p2: boolean): number;
export declare function netGameserverCatalogIsValid(): boolean;
export declare function netGameserverIsCatalogCurrent(): boolean;
export declare function netGameserverGetCatalogCloudCrc(): number;
export declare function netGameserverRefreshServerCatalog(): boolean;
export declare function netGameserverRetrieveCatalogRefreshStatus(state?: number | null): [boolean, number];
export declare function netGameserverInitSession(): boolean;
export declare function netGameserverRetrieveInitSessionStatus(p0?: number | null): [boolean, number];
export declare function netGameserverStartSession(charSlot: number): boolean;
export declare function netGameserverStartSessionPending(): boolean;
export declare function netGameserverRetrieveStartSessionStatus(p0?: number | null): [boolean, number];
export declare function netGameserverRetrieveSessionErrorCode(p0?: number | null): [boolean, number];
export declare function netGameserverIsSessionValid(charSlot: number): boolean;
export declare function netGameserverClearSession(p0: number): boolean;
export declare function netGameserverSessionApplyReceivedData(charSlot: number): boolean;
export declare function netGameserverIsSessionRefreshPending(): boolean;
export declare function netGameserverStartSessionRestart(inventory: boolean, playerbalance: boolean): boolean;
export declare function netGameserverTransactionInProgress(): boolean;
export declare function netGameserverGetSessionStateAndStatus(p0?: number | null, p1?: boolean | null): [boolean, number, boolean];
export declare function netGameserverBasketStart(transactionId: number | null, categoryHash: number, actionHash: number, flags: number): [boolean, number];
export declare function netGameserverBasketEnd(): boolean;
export declare function netGameserverBasketIsActive(): boolean;
export declare function netGameserverBasketAddItem(itemData: any | null, quantity: number): [boolean, any];
export declare function netGameserverBasketIsFull(): boolean;
export declare function netGameserverBasketApplyServerData(p0: any, p1?: any | null): [boolean, any];
export declare function netGameserverCheckoutStart(transactionId: number): boolean;
export declare function netGameserverBeginService(transactionId: number | null, categoryHash: number, itemHash: number, actionTypeHash: number, value: number, flags: number): [boolean, number];
export declare function netGameserverEndService(transactionId: number): boolean;
export declare function netGameserverDeleteCharacter(slot: number, transfer: boolean, reason: number): boolean;
export declare function netGameserverDeleteCharacterGetStatus(): number;
export declare function netGameserverDeleteSetTelemetryNonceSeed(): boolean;
export declare function netGameserverTransferBankToWallet(charSlot: number, amount: number): boolean;
export declare function netGameserverTransferWalletToBank(charSlot: number, amount: number): boolean;
export declare function netGameserverTransferBankToWalletGetStatus(): number;
export declare function netGameserverTransferWalletToBankGetStatus(): number;
export declare function netGameserverTransferCashSetTelemetryNonceSeed(): boolean;
export declare function netGameserverSetTelemetryNonceSeed(p0: number): boolean;
export declare function getOnlineVersion(): string | null;
export declare function networkIsSignedIn(): boolean;
export declare function networkIsSignedOnline(): boolean;
export declare function networkIsNpAvailable(): boolean;
export declare function networkIsNpPending(): boolean;
export declare function networkGetNpUnavailableReason(): number;
export declare function networkIsConnetedToNpPresence(): boolean;
export declare function networkIsLoggedInToPsn(): boolean;
export declare function networkHasValidRosCredentials(): boolean;
export declare function networkIsRefreshingRosCredentials(): boolean;
export declare function networkIsCloudAvailable(): boolean;
export declare function networkHasSocialClubAccount(): boolean;
export declare function networkAreSocialClubPoliciesCurrent(): boolean;
export declare function networkIsHost(): boolean;
export declare function networkGetHostPlayerIndex(): number;
export declare function networkWasGameSuspended(): boolean;
export declare function networkHaveOnlinePrivileges(): boolean;
export declare function networkHasAgeRestrictions(): boolean;
export declare function networkHaveUserContentPrivileges(p0: number): boolean;
export declare function networkHaveCommunicationPrivileges(p0: number, player: Player | number): boolean;
export declare function networkHavePlatformCommunicationPrivileges(): boolean;
export declare function networkCheckOnlinePrivileges(p0: any, p1: boolean): boolean;
export declare function networkCheckUserContentPrivileges(p0: number, p1: number, p2: boolean): boolean;
export declare function networkCheckCommunicationPrivileges(p0: number, p1: number, p2: boolean): boolean;
export declare function networkCheckTextCommunicationPrivileges(p0: any, p1: any, p2: any): boolean;
export declare function networkIsUsingOnlinePromotion(): boolean;
export declare function networkShouldShowPromotionAlertScreen(): boolean;
export declare function networkHasSocialNetworkingSharingPriv(): boolean;
export declare function networkGetAgeGroup(): number;
export declare function networkCheckPrivileges(p0: any, p1: any, p2: any): boolean;
export declare function networkIsPrivilegeCheckInProgress(): boolean;
export declare function networkSetPrivilegeCheckResultNotNeeded(): void;
export declare function networkResolvePrivilegeUserContent(): boolean;
export declare function networkHavePlatformSubscription(): boolean;
export declare function networkIsPlatformSubscriptionCheckPending(): boolean;
export declare function networkShowAccountUpgradeUi(): void;
export declare function networkIsShowingSystemUiOrRecentlyRequestedUpsell(): boolean;
export declare function networkNeedToStartNewGameButBlocked(): boolean;
export declare function networkCanBail(): boolean;
export declare function networkBail(p0: number, p1: number, p2: number): void;
export declare function networkOnReturnToSinglePlayer(): void;
export declare function networkTransitionStart(p0: number, p1: any, p2: any, p3: any): boolean;
export declare function networkTransitionAddStage(hash: number, p1: number, p2: number, state: number, p4: number): boolean;
export declare function networkTransitionFinish(p0: any, p1: any, p2: any): boolean;
export declare function networkCanAccessMultiplayer(loadingState?: number | null): [boolean, number];
export declare function networkIsMultiplayerDisabled(): boolean;
export declare function networkCanEnterMultiplayer(): boolean;
export declare function networkSessionDoFreeroamQuickmatch(p0: any, p1: any, p2: any): boolean;
export declare function networkSessionDoFriendMatchmaking(p0: number, p1: number, p2: number): boolean;
export declare function networkSessionDoCrewMatchmaking(crewId: number, p1: number, p2: number, maxPlayers: number): boolean;
export declare function networkSessionDoActivityQuickmatch(p0: any, p1: any, p2: any, p3: any, p4: any): boolean;
export declare function networkSessionHost(p0: number, maxPlayers: number, p2: boolean): boolean;
export declare function networkSessionHostClosed(p0: number, maxPlayers: number): boolean;
export declare function networkSessionHostFriendsOnly(p0: number, maxPlayers: number): boolean;
export declare function networkSessionIsClosedFriends(): boolean;
export declare function networkSessionIsClosedCrew(): boolean;
export declare function networkSessionIsSolo(): boolean;
export declare function networkSessionIsPrivate(): boolean;
export declare function networkSessionLeaveIncludingReason(leaveFlags: number, leaveReason: number): boolean;
export declare function networkSessionEnd(p0: boolean, p1: boolean): boolean;
export declare function networkSessionLeave(p0: any): boolean;
export declare function networkSessionKickPlayer(player: Player | number): void;
export declare function networkSessionGetKickVote(player: Player | number): boolean;
export declare function networkSessionReserveSlotsTransition(p0: any, p1: any, p2: any): boolean;
export declare function networkJoinPreviouslyFailedSession(): boolean;
export declare function networkJoinPreviouslyFailedTransition(): boolean;
export declare function networkSessionSetMatchmakingGroup(matchmakingGroup: number): void;
export declare function networkSessionSetMatchmakingGroupMax(playerType: number, playerCount: number): void;
export declare function networkSessionGetMatchmakingGroupFree(p0: number): number;
export declare function networkSessionAddActiveMatchmakingGroup(groupId: number): void;
export declare function networkSessionSetUniqueCrewLimit(p0: any): void;
export declare function networkSessionGetUniqueCrewLimit(): number;
export declare function networkSessionSetUniqueCrewLimitTransition(p0: any): void;
export declare function networkSessionSetUniqueCrewOnlyCrewsTransition(p0: boolean): void;
export declare function networkSessionSetCrewLimitMaxMembersTransition(p0: any): void;
export declare function networkSessionSetMatchmakingPropertyId(p0: boolean): void;
export declare function networkSessionSetMatchmakingMentalState(p0: number): void;
export declare function networkSessionSetNumBosses(num: number): void;
export declare function networkSessionSetScriptValidateJoin(): void;
export declare function networkSessionValidateJoin(p0: boolean): void;
export declare function networkAddFollowers(p0: number | null, p1: number): [void, number];
export declare function networkClearFollowers(): void;
export declare function networkGetGlobalMultiplayerClock(hours?: number | null, minutes?: number | null, seconds?: number | null): [void, number, number, number];
export declare function networkSessionSetGamemode(p0: any): void;
export declare function networkSessionGetHostAimPreference(): number;
export declare function networkFindGamersInCrew(crewId: number): boolean;
export declare function networkFindMatchedGamers(attribute: number, fallbackLimit: number, lowerLimit: number, upperLimit: number): boolean;
export declare function networkIsFindingGamers(): boolean;
export declare function networkDidFindGamersSucceed(): boolean;
export declare function networkGetNumFoundGamers(): number;
export declare function networkGetFoundGamer(p0: any | null, p1: any): [boolean, any];
export declare function networkClearFoundGamers(): void;
export declare function networkQueueGamerForStatus(p0?: any | null): [boolean, any];
export declare function networkGetGamerStatusFromQueue(): boolean;
export declare function networkIsGettingGamerStatus(): boolean;
export declare function networkDidGetGamerStatusSucceed(): boolean;
export declare function networkGetGamerStatusResult(p0: any | null, p1: any): [boolean, any];
export declare function networkClearGetGamerStatus(): void;
export declare function networkSessionJoinInvite(): void;
export declare function networkSessionCancelInvite(): void;
export declare function networkSessionForceCancelInvite(): void;
export declare function networkHasPendingInvite(): boolean;
export declare function networkHasConfirmedInvite(): boolean;
export declare function networkRequestInviteConfirmedEvent(): boolean;
export declare function networkSessionWasInvited(): boolean;
export declare function networkSessionGetInviter(gamerHandle?: any | null): [void, any];
export declare function networkSessionIsAwaitingInviteResponse(): boolean;
export declare function networkSessionIsDisplayingInviteConfirmation(): boolean;
export declare function networkSuppressInvite(toggle: boolean): void;
export declare function networkBlockInvites(toggle: boolean): void;
export declare function networkBlockJoinQueueInvites(toggle: boolean): void;
export declare function networkSetCanReceiveRsInvites(p0: boolean): void;
export declare function networkStoreInviteThroughRestart(): void;
export declare function networkAllowInviteProcessInPlayerSwitch(p0: boolean): void;
export declare function networkSetScriptReadyForEvents(toggle: boolean): void;
export declare function networkIsOfflineInvitePending(): boolean;
export declare function networkClearOfflineInvitePending(): void;
export declare function networkSessionHostSinglePlayer(p0: number): void;
export declare function networkSessionLeaveSinglePlayer(): void;
export declare function networkIsGameInProgress(): boolean;
export declare function networkIsSessionActive(): boolean;
export declare function networkIsInSession(): boolean;
export declare function networkIsAmericasVersion(): boolean;
export declare function networkIsSessionStarted(): boolean;
export declare function networkIsSessionBusy(): boolean;
export declare function networkCanSessionEnd(): boolean;
export declare function networkGetGameMode(): number;
export declare function networkSessionMarkVisible(toggle: boolean): void;
export declare function networkSessionIsVisible(): boolean;
export declare function networkSessionBlockJoinRequests(toggle: boolean): void;
export declare function networkSessionChangeSlots(slots: number, p1: boolean): void;
export declare function networkSessionGetPrivateSlots(): number;
export declare function networkSessionVoiceHost(): boolean;
export declare function networkSessionVoiceLeave(): boolean;
export declare function networkSessionVoiceConnectToPlayer(gamerHandle?: any | null): [void, any];
export declare function networkSessionVoiceRespondToRequest(p0: boolean, p1: number): void;
export declare function networkSessionVoiceSetTimeout(timeout: number): void;
export declare function networkSessionIsInVoiceSession(): boolean;
export declare function networkSessionIsVoiceSessionActive(): boolean;
export declare function networkSessionIsVoiceSessionBusy(): boolean;
export declare function networkSendTextMessage(message: string | null, gamerHandle?: any | null): [boolean, any];
export declare function networkSetActivitySpectator(toggle: boolean): void;
export declare function networkIsActivitySpectator(): boolean;
export declare function networkSetActivityPlayerMax(p0: any): void;
export declare function networkSetActivitySpectatorMax(maxSpectators: number): void;
export declare function networkGetActivityPlayerNum(p0: boolean): number;
export declare function networkIsActivitySpectatorFromHandle(gamerHandle?: any | null): [boolean, any];
export declare function networkHostTransition(p0: number, p1: number, p2: number, p3: number, p4: any, p5: boolean, p6: boolean, p7: number, p8: any, p9: number): boolean;
export declare function networkDoTransitionQuickmatch(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): boolean;
export declare function networkDoTransitionQuickmatchAsync(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): boolean;
export declare function networkDoTransitionQuickmatchWithGroup(p0: any, p1: any, p2: any, p3: any, p4: any | null, p5: any, p6: any, p7: any): [boolean, any];
export declare function networkJoinGroupActivity(): boolean;
export declare function networkClearGroupActivity(): void;
export declare function networkRetainActivityGroup(): void;
export declare function networkIsTransitionClosedFriends(): boolean;
export declare function networkIsTransitionClosedCrew(): boolean;
export declare function networkIsTransitionSolo(): boolean;
export declare function networkIsTransitionPrivate(): boolean;
export declare function networkGetNumTransitionNonAsyncGamers(): number;
export declare function networkMarkAsPreferredActivity(p0: boolean): void;
export declare function networkMarkAsWaitingAsync(p0: boolean): void;
export declare function networkSetInProgressFinishTime(p0: any): void;
export declare function networkSetTransitionCreatorHandle(p0?: any | null): [void, any];
export declare function networkClearTransitionCreatorHandle(): void;
export declare function networkInviteGamersToTransition(p0: any | null, p1: any): [boolean, any];
export declare function networkSetGamerInvitedToTransition(gamerHandle?: any | null): [void, any];
export declare function networkLeaveTransition(): boolean;
export declare function networkLaunchTransition(): boolean;
export declare function networkSetDoNotLaunchFromJoinAsMigratedHost(toggle: boolean): void;
export declare function networkCancelTransitionMatchmaking(): void;
export declare function networkBailTransition(p0: number, p1: number, p2: number): void;
export declare function networkDoTransitionToGame(p0: boolean, maxPlayers: number): boolean;
export declare function networkDoTransitionToNewGame(p0: boolean, maxPlayers: number, p2: boolean): boolean;
export declare function networkDoTransitionToFreemode(p0: any | null, p1: any, p2: boolean, players: number, p4: boolean): [boolean, any];
export declare function networkDoTransitionToNewFreemode(p0: any | null, p1: any, players: number, p3: boolean, p4: boolean, p5: boolean): [boolean, any];
export declare function networkIsTransitionToGame(): boolean;
export declare function networkGetTransitionMembers(data: any | null, dataCount: number): [number, any];
export declare function networkApplyTransitionParameter(p0: number, p1: number): void;
export declare function networkApplyTransitionParameterString(p0: number, string: string | null, p2: boolean): void;
export declare function networkSendTransitionGamerInstruction(gamerHandle: any | null, p1: string | null, p2: number, p3: number, p4: boolean): [boolean, any];
export declare function networkMarkTransitionGamerAsFullyJoined(p0?: any | null): [boolean, any];
export declare function networkIsTransitionHost(): boolean;
export declare function networkIsTransitionHostFromHandle(gamerHandle?: any | null): [boolean, any];
export declare function networkGetTransitionHost(gamerHandle?: any | null): [boolean, any];
export declare function networkIsInTransition(): boolean;
export declare function networkIsTransitionStarted(): boolean;
export declare function networkIsTransitionBusy(): boolean;
export declare function networkIsTransitionMatchmaking(): boolean;
export declare function networkIsTransitionLeavePostponed(): boolean;
export declare function networkTransitionSetInProgress(p0: any): void;
export declare function networkTransitionSetContentCreator(p0: any): void;
export declare function networkTransitionSetActivityIsland(p0: any): void;
export declare function networkOpenTransitionMatchmaking(): void;
export declare function networkCloseTransitionMatchmaking(): void;
export declare function networkIsTransitionOpenToMatchmaking(): boolean;
export declare function networkSetTransitionVisibilityLock(p0: boolean, p1: boolean): void;
export declare function networkIsTransitionVisibilityLocked(): boolean;
export declare function networkSetTransitionActivityId(p0: any): void;
export declare function networkChangeTransitionSlots(p0: any, p1: boolean): void;
export declare function networkTransitionBlockJoinRequests(p0: boolean): void;
export declare function networkHasPlayerStartedTransition(player: Player | number): boolean;
export declare function networkAreTransitionDetailsValid(p0: any): boolean;
export declare function networkJoinTransition(player: Player | number): boolean;
export declare function networkHasInvitedGamerToTransition(p0?: any | null): [boolean, any];
export declare function networkHasTransitionInviteBeenAcked(p0?: any | null): [boolean, any];
export declare function networkIsActivitySession(): boolean;
export declare function networkDisableRealtimeMultiplayer(): void;
export declare function networkSetPresenceSessionInvitesBlocked(toggle: boolean): void;
export declare function networkSendInviteViaPresence(gamerHandle: any | null, p1: string | null, dataCount: number, p3: number): [boolean, any];
export declare function networkSendTransitionInviteViaPresence(gamerHandle: any | null, p1: string | null, dataCount: number, p3: number): [boolean, any];
export declare function networkSendImportantTransitionInviteViaPresence(gamerHandle: any | null, p1: string | null, dataCount: number, p3: number): [boolean, any];
export declare function networkGetPresenceInviteIndexById(p0: number): number;
export declare function networkGetNumPresenceInvites(): number;
export declare function networkAcceptPresenceInvite(p0: number): boolean;
export declare function networkRemovePresenceInvite(p0: number): boolean;
export declare function networkGetPresenceInviteId(p0: number): number;
export declare function networkGetPresenceInviteInviter(p0: number): string | null;
export declare function networkGetPresenceInviteHandle(p0: any, p1?: any | null): [boolean, any];
export declare function networkGetPresenceInviteSessionId(p0: any): number;
export declare function networkGetPresenceInviteContentId(p0: number): string | null;
export declare function networkGetPresenceInvitePlaylistLength(p0: number): number;
export declare function networkGetPresenceInvitePlaylistCurrent(p0: number): number;
export declare function networkGetPresenceInviteFromAdmin(p0: number): boolean;
export declare function networkGetPresenceInviteIsTournament(p0: any): boolean;
export declare function networkHasFollowInvite(): boolean;
export declare function networkActionFollowInvite(): boolean;
export declare function networkClearFollowInvite(): boolean;
export declare function networkRemoveAndCancelAllInvites(): void;
export declare function networkRemoveTransitionInvite(p0?: any | null): [void, any];
export declare function networkRemoveAllTransitionInvite(): void;
export declare function networkRemoveAndCancelAllTransitionInvites(): void;
export declare function networkInviteGamers(p0: any | null, p1: any, p2: any | null, p3: any): [boolean, any, any];
export declare function networkHasInvitedGamer(p0?: any | null): [boolean, any];
export declare function networkHasMadeInviteDecision(gamerHandle?: any | null): [boolean, any];
export declare function networkGetInviteReplyStatus(p0: any): number;
export declare function networkGetCurrentlySelectedGamerHandleFromInviteMenu(p0?: any | null): [boolean, any];
export declare function networkSetCurrentlySelectedGamerHandleFromInviteMenu(p0?: any | null): [boolean, any];
export declare function networkSetInviteOnCallForInviteMenu(p0?: any | null): [void, any];
export declare function networkCheckDataManagerSucceededForHandle(p0: number, gamerHandle?: any | null): [boolean, any];
export declare function networkCheckDataManagerForHandle(p0: any, gamerHandle?: any | null): [boolean, any];
export declare function networkSetInviteFailedMessageForInviteMenu(p0?: any | null, p1?: any | null): [void, any, any];
export declare function filloutPmPlayerList(gamerHandle: any | null, p1: any, p2: any): [boolean, any];
export declare function filloutPmPlayerListWithNames(p0: any | null, p1: any | null, p2: any, p3: any): [boolean, any, any];
export declare function refreshPlayerListStats(p0: number): boolean;
export declare function networkSetCurrentDataManagerHandle(p0?: any | null): [boolean, any];
export declare function networkIsInPlatformParty(): boolean;
export declare function networkGetPlatformPartyMemberCount(): number;
export declare function networkGetPlatformPartyMembers(data: any | null, dataSize: number): [number, any];
export declare function networkIsInPlatformPartyChat(): boolean;
export declare function networkIsChattingInPlatformParty(gamerHandle?: any | null): [boolean, any];
export declare function networkCanQueueForPreviousSessionJoin(): boolean;
export declare function networkIsQueuingForSessionJoin(): boolean;
export declare function networkClearQueuedJoinRequest(): void;
export declare function networkSendQueuedJoinRequest(): void;
export declare function networkRemoveAllQueuedJoinRequests(): void;
export declare function networkSeedRandomNumberGenerator(seed: number): void;
export declare function networkGetRandomInt(): number;
export declare function networkGetRandomIntRanged(rangeStart: number, rangeEnd: number): number;
export declare function networkGetRandomFloatRanged(rangeStart: number, rangeEnd: number): number;
export declare function networkPlayerIsCheater(): boolean;
export declare function networkPlayerGetCheaterReason(): number;
export declare function networkPlayerIsBadsport(): boolean;
export declare function remoteCheaterPlayerDetected(player: Player | number, a: number, b: number): boolean;
export declare function badSportPlayerLeftDetected(gamerHandle: any | null, event: number, amountReceived: number): [boolean, any];
export declare function networkAddInvalidObjectModel(modelHash: number): void;
export declare function networkRemoveInvalidObjectModel(modelHash: number): void;
export declare function networkClearInvalidObjectModels(): void;
export declare function networkApplyPedScarData(ped: Ped | Player | LocalPlayer | number, p1: number): void;
export declare function networkSetThisScriptIsNetworkScript(maxNumMissionParticipants: number, p1: boolean, instanceId: number): void;
export declare function networkTryToSetThisScriptIsNetworkScript(p0: any, p1: boolean, p2: any): boolean;
export declare function networkGetThisScriptIsNetworkScript(): boolean;
export declare function networkGetMaxNumParticipants(): number;
export declare function networkGetNumParticipants(): number;
export declare function networkGetScriptStatus(): number;
export declare function networkRegisterHostBroadcastVariables(vars: number | null, numVars: number, debugName: string | null): [void, number];
export declare function networkRegisterPlayerBroadcastVariables(vars: number | null, numVars: number, debugName: string | null): [void, number];
export declare function networkRegisterHighFrequencyHostBroadcastVariables(p0: any, p1: any, p2: any): void;
export declare function networkRegisterHighFrequencyPlayerBroadcastVariables(p0: any, p1: any, p2: any): void;
export declare function networkFinishBroadcastingData(): void;
export declare function networkHasReceivedHostBroadcastData(): boolean;
export declare function networkGetPlayerIndex(player: Player | number): number;
export declare function networkGetParticipantIndex(index: number): number;
export declare function networkGetPlayerIndexFromPed(ped: Ped | Player | LocalPlayer | number): number;
export declare function networkGetNumConnectedPlayers(): number;
export declare function networkIsPlayerConnected(player: Player | number): boolean;
export declare function networkGetTotalNumPlayers(): number;
export declare function networkIsParticipantActive(p0: number): boolean;
export declare function networkIsPlayerActive(player: Player | number): boolean;
export declare function networkIsPlayerAParticipant(player: Player | number): boolean;
export declare function networkIsHostOfThisScript(): boolean;
export declare function networkGetHostOfThisScript(): number;
export declare function networkGetHostOfScript(scriptName: string | null, instance_id: number, position_hash: number): number;
export declare function networkSetMissionFinished(): void;
export declare function networkIsScriptActive(scriptName: string | null, instance_id: number, p2: boolean, position_hash: number): boolean;
export declare function networkIsScriptActiveByHash(scriptHash: number, p1: number, p2: boolean, p3: number): boolean;
export declare function networkIsThreadANetworkScript(threadId: number): boolean;
export declare function networkGetNumScriptParticipants(scriptName: string | null, instance_id: number, position_hash: number): number;
export declare function networkGetInstanceIdOfThisScript(): number;
export declare function networkGetPositionHashOfThisScript(): number;
export declare function networkIsPlayerAParticipantOnScript(player: Player | number, script: string | null, instance_id: number): boolean;
export declare function networkPreventScriptHostMigration(): void;
export declare function networkRequestToBeHostOfThisScript(): void;
export declare function participantId(): number;
export declare function participantIdToInt(): number;
export declare function networkGetKillerOfPlayer(player: Player | number, weaponHash?: number | null): [number, number];
export declare function networkGetDestroyerOfNetworkId(netId: number, weaponHash?: number | null): [number, number];
export declare function networkGetDestroyerOfEntity(entity: Entity | number, weaponHash?: number | null): [number, number];
export declare function networkGetAssistedKillOfEntity(player: Player | number, entity: Entity | number, p2?: number | null): [boolean, number];
export declare function networkGetAssistedDamageOfEntity(player: Player | number, entity: Entity | number, p2?: number | null): [boolean, number];
export declare function networkGetEntityKillerOfPlayer(player: Player | number, weaponHash?: number | null): [number, number];
export declare function networkSetCurrentPublicContentId(missionId: string | null): void;
export declare function networkSetCurrentChatOption(newChatOption: number): void;
export declare function networkSetCurrentSpawnLocationOption(mpSettingSpawn: number): void;
export declare function networkSetVehicleDrivenInTestDrive(toggle: boolean): void;
export declare function networkSetVehicleDrivenLocation(location: number): void;
export declare function networkResurrectLocalPlayer(x: number, y: number, z: number, heading: number, p4: boolean, changetime: boolean, p6: boolean, p7: number, p8: number): void;
export declare function networkSetLocalPlayerInvincibleTime(time: number): void;
export declare function networkIsLocalPlayerInvincible(): boolean;
export declare function networkDisableInvincibleFlashing(player: Player | number, toggle: boolean): void;
export declare function networkPatchPostCutsceneHs4fTunEnt(ped: Ped | Player | LocalPlayer | number): void;
export declare function networkSetLocalPlayerSyncLookAt(toggle: boolean): void;
export declare function networkHasEntityBeenRegisteredWithThisThread(entity: Entity | number): boolean;
export declare function networkGetNetworkIdFromEntity(entity: Entity | number): number;
export declare function networkGetEntityFromNetworkId(netId: number): number;
export declare function networkGetEntityIsNetworked(entity: Entity | number): boolean;
export declare function networkGetEntityIsLocal(entity: Entity | number): boolean;
export declare function networkRegisterEntityAsNetworked(entity: Entity | number): void;
export declare function networkUnregisterNetworkedEntity(entity: Entity | number): void;
export declare function networkDoesNetworkIdExist(netId: number): boolean;
export declare function networkDoesEntityExistWithNetworkId(netId: number): boolean;
export declare function networkRequestControlOfNetworkId(netId: number): boolean;
export declare function networkHasControlOfNetworkId(netId: number): boolean;
export declare function networkIsNetworkIdRemotelyControlled(netId: number): boolean;
export declare function networkRequestControlOfEntity(entity: Entity | number): boolean;
export declare function networkRequestControlOfDoor(doorID: number): boolean;
export declare function networkHasControlOfEntity(entity: Entity | number): boolean;
export declare function networkHasControlOfPickup(pickup: number): boolean;
export declare function networkHasControlOfDoor(doorHash: number): boolean;
export declare function networkIsDoorNetworked(doorHash: number): boolean;
export declare function vehToNet(vehicle: Vehicle | number): number;
export declare function pedToNet(ped: Ped | Player | LocalPlayer | number): number;
export declare function objToNet(object: number): number;
export declare function netToVeh(netHandle: number): number;
export declare function netToPed(netHandle: number): number;
export declare function netToObj(netHandle: number): number;
export declare function netToEnt(netHandle: number): number;
export declare function networkGetLocalHandle(gamerHandle: any | null, gamerHandleSize: number): [void, any];
export declare function networkHandleFromUserId(userId: string | null, gamerHandle: any | null, gamerHandleSize: number): [void, any];
export declare function networkHandleFromMemberId(memberId: string | null, gamerHandle: any | null, gamerHandleSize: number): [void, any];
export declare function networkHandleFromPlayer(player: Player | number, gamerHandle: any | null, gamerHandleSize: number): [void, any];
export declare function networkHashFromPlayerHandle(player: Player | number): number;
export declare function networkHashFromGamerHandle(gamerHandle?: any | null): [number, any];
export declare function networkHandleFromFriend(friendIndex: number, gamerHandle: any | null, gamerHandleSize: number): [void, any];
export declare function networkGamertagFromHandleStart(gamerHandle?: any | null): [boolean, any];
export declare function networkGamertagFromHandlePending(): boolean;
export declare function networkGamertagFromHandleSucceeded(): boolean;
export declare function networkGetGamertagFromHandle(gamerHandle?: any | null): [string | null, any];
export declare function networkDisplaynamesFromHandlesStart(p0: any | null, p1: any): [number, any];
export declare function networkGetDisplaynamesFromHandles(p0: any, p1: any, p2: any): number;
export declare function networkAreHandlesTheSame(gamerHandle1?: any | null, gamerHandle2?: any | null): [boolean, any, any];
export declare function networkIsHandleValid(gamerHandle: any | null, gamerHandleSize: number): [boolean, any];
export declare function networkGetPlayerFromGamerHandle(gamerHandle?: any | null): [number, any];
export declare function networkMemberIdFromGamerHandle(gamerHandle?: any | null): [string | null, any];
export declare function networkIsGamerInMySession(gamerHandle?: any | null): [boolean, any];
export declare function networkShowProfileUi(gamerHandle?: any | null): [void, any];
export declare function networkPlayerGetName(player: Player | number): string | null;
export declare function networkPlayerGetUserid(player: Player | number, userID?: number | null): [string | null, number];
export declare function networkPlayerIsRockstarDev(player: Player | number): boolean;
export declare function networkPlayerIndexIsCheater(player: Player | number): boolean;
export declare function networkEntityGetObjectId(entity: Entity | number): number;
export declare function networkGetEntityFromObjectId(p0: any): number;
export declare function networkIsInactiveProfile(p0?: any | null): [boolean, any];
export declare function networkGetMaxFriends(): number;
export declare function networkGetFriendCount(): number;
export declare function networkGetFriendName(friendIndex: number): string | null;
export declare function networkGetFriendDisplayName(friendIndex: number): string | null;
export declare function networkIsFriendOnline(name: string | null): boolean;
export declare function networkIsFriendHandleOnline(gamerHandle?: any | null): [boolean, any];
export declare function networkIsFriendInSameTitle(friendName: string | null): boolean;
export declare function networkIsFriendInMultiplayer(friendName: string | null): boolean;
export declare function networkIsFriend(gamerHandle?: any | null): [boolean, any];
export declare function networkIsPendingFriend(p0: any): boolean;
export declare function networkIsAddingFriend(): boolean;
export declare function networkAddFriend(gamerHandle: any | null, message: string | null): [boolean, any];
export declare function networkIsFriendIndexOnline(friendIndex: number): boolean;
export declare function networkSetPlayerIsPassive(toggle: boolean): void;
export declare function networkGetPlayerOwnsWaypoint(player: Player | number): boolean;
export declare function networkCanSetWaypoint(): boolean;
export declare function networkIgnoreRemoteWaypoints(): void;
export declare function networkDoesCommunicationGroupExist(communicationType: number): boolean;
export declare function networkGetCommunicationGroupFlags(communicationType: number): number;
export declare function networkSetCommunicationGroupFlags(communicationType: number, communicationGroupFlag: number): void;
export declare function networkIsPlayerOnBlocklist(gamerHandle?: any | null): [boolean, any];
export declare function networkSetScriptAutomuted(p0: any): boolean;
export declare function networkHasAutomuteOverride(): boolean;
export declare function networkHasHeadset(): boolean;
export declare function networkSetLookAtTalkers(p0: boolean): void;
export declare function networkIsPushToTalkActive(): boolean;
export declare function networkGamerHasHeadset(gamerHandle?: any | null): [boolean, any];
export declare function networkIsGamerTalking(gamerHandle?: any | null): [boolean, any];
export declare function networkPermissionsHasGamerRecord(gamerHandle?: any | null): [boolean, any];
export declare function networkCanCommunicateWithGamer(gamerHandle?: any | null): [boolean, any];
export declare function networkCanTextChatWithGamer(gamerHandle?: any | null): [boolean, any];
export declare function networkIsGamerMutedByMe(gamerHandle?: any | null): [boolean, any];
export declare function networkAmIMutedByGamer(gamerHandle?: any | null): [boolean, any];
export declare function networkIsGamerBlockedByMe(gamerHandle?: any | null): [boolean, any];
export declare function networkAmIBlockedByGamer(gamerHandle?: any | null): [boolean, any];
export declare function networkCanViewGamerUserContent(gamerHandle?: any | null): [boolean, any];
export declare function networkHasViewGamerUserContentResult(gamerHandle?: any | null): [boolean, any];
export declare function networkCanPlayMultiplayerWithGamer(gamerHandle?: any | null): [boolean, any];
export declare function networkCanGamerPlayMultiplayerWithMe(gamerHandle?: any | null): [boolean, any];
export declare function networkCanSendLocalInvite(gamerHandle?: any | null): [boolean, any];
export declare function networkCanReceiveLocalInvite(gamerHandle?: any | null): [boolean, any];
export declare function networkIsPlayerTalking(player: Player | number): boolean;
export declare function networkPlayerHasHeadset(player: Player | number): boolean;
export declare function networkIsPlayerMutedByMe(player: Player | number): boolean;
export declare function networkAmIMutedByPlayer(player: Player | number): boolean;
export declare function networkIsPlayerBlockedByMe(player: Player | number): boolean;
export declare function networkAmIBlockedByPlayer(player: Player | number): boolean;
export declare function networkGetPlayerLoudness(player: Player | number): number;
export declare function networkSetTalkerProximity(value: number): void;
export declare function networkGetTalkerProximity(): number;
export declare function networkSetVoiceActive(toggle: boolean): void;
export declare function networkRemainInGameChat(p0: boolean): void;
export declare function networkOverrideTransitionChat(p0: boolean): void;
export declare function networkSetTeamOnlyChat(toggle: boolean): void;
export declare function networkSetScriptControllingTeams(p0: any): void;
export declare function networkSetSameTeamAsLocalPlayer(p0: any, p1: any): boolean;
export declare function networkOverrideTeamRestrictions(team: number, toggle: boolean): void;
export declare function networkSetOverrideSpectatorMode(toggle: boolean): void;
export declare function networkSetOverrideTutorialSessionChat(toggle: boolean): void;
export declare function networkSetProximityAffectsTeam(toggle: boolean): void;
export declare function networkSetNoSpectatorChat(toggle: boolean): void;
export declare function networkSetIgnoreSpectatorChatLimitsSameTeam(toggle: boolean): void;
export declare function networkOverrideChatRestrictions(player: Player | number, toggle: boolean): void;
export declare function networkOverrideSendRestrictions(player: Player | number, toggle: boolean): void;
export declare function networkOverrideSendRestrictionsAll(toggle: boolean): void;
export declare function networkOverrideReceiveRestrictions(player: Player | number, toggle: boolean): void;
export declare function networkOverrideReceiveRestrictionsAll(toggle: boolean): void;
export declare function networkSetVoiceChannel(channel: number): void;
export declare function networkClearVoiceChannel(): void;
export declare function networkApplyVoiceProximityOverride(x: number, y: number, z: number): void;
export declare function networkClearVoiceProximityOverride(): void;
export declare function networkEnableVoiceBandwidthRestriction(player: Player | number): void;
export declare function networkDisableVoiceBandwidthRestriction(player: Player | number): void;
export declare function networkGetMuteCountForPlayer(p0: Player | number, p1?: number | null, p2?: number | null): [void, number, number];
export declare function networkSetSpectatorToNonSpectatorTextChat(toggle: boolean): void;
export declare function networkTextChatIsTyping(): boolean;
export declare function shutdownAndLaunchSinglePlayerGame(): void;
export declare function shutdownAndLoadMostRecentSave(): boolean;
export declare function networkSetFriendlyFireOption(toggle: boolean): void;
export declare function networkSetRichPresence(p0: number, p1: number, p2: any, p3: any): void;
export declare function networkSetRichPresenceString(p0: number, textLabel: string | null): void;
export declare function networkGetTimeoutTime(): number;
export declare function networkLeavePedBehindBeforeWarp(player: Player | number, x: number, y: number, z: number, p4: boolean, p5: boolean): void;
export declare function networkLeavePedBehindBeforeCutscene(player: Player | number, p1: boolean): void;
export declare function removeAllStickyBombsFromEntity(entity: Entity | number, ped: Ped | Player | LocalPlayer | number): void;
export declare function networkKeepEntityCollisionDisabledAfterAnimScene(p0: any, p1: any): void;
export declare function networkIsAnyPlayerNear(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): boolean;
export declare function networkClanServiceIsValid(): boolean;
export declare function networkClanPlayerIsActive(gamerHandle?: any | null): [boolean, any];
export declare function networkClanPlayerGetDesc(clanDesc: any | null, bufferSize: number, gamerHandle?: any | null): [boolean, any, any];
export declare function networkClanIsRockstarClan(clanDesc: any | null, bufferSize: number): [boolean, any];
export declare function networkClanGetUiFormattedTag(clanDesc: any | null, bufferSize: number, formattedTag: string | null): [void, any];
export declare function networkClanGetLocalMembershipsCount(): number;
export declare function networkClanGetMembershipDesc(memberDesc: any | null, p1: number): [boolean, any];
export declare function networkClanDownloadMembership(gamerHandle?: any | null): [boolean, any];
export declare function networkClanDownloadMembershipPending(p0?: any | null): [boolean, any];
export declare function networkClanAnyDownloadMembershipPending(): boolean;
export declare function networkClanRemoteMembershipsAreInCache(p0?: number | null): [boolean, number];
export declare function networkClanGetMembershipCount(p0?: number | null): [number, number];
export declare function networkClanGetMembershipValid(p0: number | null, p1: any): [boolean, number];
export declare function networkClanGetMembership(p0: number | null, clanMembership: any | null, p2: number): [boolean, number, any];
export declare function networkClanJoin(clanDesc: number): boolean;
export declare function networkClanCrewinfoGetStringValue(animDict: string | null, animName: string | null): boolean;
export declare function networkClanCrewinfoGetCrewranktitle(p0: number, p1: string | null): boolean;
export declare function networkClanHasCrewinfoMetadataBeenReceived(): boolean;
export declare function networkClanGetEmblemTxdName(netHandle: any | null, txdName: string | null): [boolean, any];
export declare function networkClanRequestEmblem(p0: any): boolean;
export declare function networkClanIsEmblemReady(p0: any, p1?: any | null): [boolean, any];
export declare function networkClanReleaseEmblem(p0: any): void;
export declare function networkGetPrimaryClanDataClear(): boolean;
export declare function networkGetPrimaryClanDataCancel(): void;
export declare function networkGetPrimaryClanDataStart(p0: any | null, p1: any): [boolean, any];
export declare function networkGetPrimaryClanDataPending(): boolean;
export declare function networkGetPrimaryClanDataSuccess(): boolean;
export declare function networkGetPrimaryClanDataNew(p0?: any | null, p1?: any | null): [boolean, any, any];
export declare function setNetworkIdCanMigrate(netId: number, toggle: boolean): void;
export declare function setNetworkIdExistsOnAllMachines(netId: number, toggle: boolean): void;
export declare function setNetworkIdAlwaysExistsForPlayer(netId: number, player: Player | number, toggle: boolean): void;
export declare function setNetworkIdCanBeReassigned(netId: number, toggle: boolean): void;
export declare function networkSetEntityCanBlend(entity: Entity | number, toggle: boolean): void;
export declare function networkSetObjectCanBlendWhenFixed(object: number, toggle: boolean): void;
export declare function networkSetEntityOnlyExistsForParticipants(entity: Entity | number, toggle: boolean): void;
export declare function setNetworkIdVisibleInCutscene(netId: number, p1: boolean, p2: boolean): void;
export declare function setNetworkIdVisibleInCutsceneHack(netId: number, p1: boolean, p2: boolean): void;
export declare function setNetworkIdVisibleInCutsceneRemainHack(p0: any, p1: any, p2: any): void;
export declare function setNetworkCutsceneEntities(toggle: boolean): void;
export declare function areCutsceneEntitiesNetworked(): boolean;
export declare function setNetworkIdPassControlInTutorial(netId: number, state: boolean): void;
export declare function isNetworkIdOwnedByParticipant(netId: number): boolean;
export declare function setRemotePlayerVisibleInCutscene(player: Player | number, locallyVisible: boolean): void;
export declare function setLocalPlayerVisibleInCutscene(p0: boolean, p1: boolean): void;
export declare function setLocalPlayerInvisibleLocally(bIncludePlayersVehicle: boolean): void;
export declare function setLocalPlayerVisibleLocally(bIncludePlayersVehicle: boolean): void;
export declare function setPlayerInvisibleLocally(player: Player | number, bIncludePlayersVehicle: boolean): void;
export declare function setPlayerVisibleLocally(player: Player | number, bIncludePlayersVehicle: boolean): void;
export declare function fadeOutLocalPlayer(p0: boolean): void;
export declare function networkFadeOutEntity(entity: Entity | number, normal: boolean, slow: boolean): void;
export declare function networkFadeInEntity(entity: Entity | number, state: boolean, p2: any): void;
export declare function networkIsPlayerFading(player: Player | number): boolean;
export declare function networkIsEntityFading(entity: Entity | number): boolean;
export declare function isPlayerInCutscene(player: Player | number): boolean;
export declare function setEntityVisibleInCutscene(p0: any, p1: boolean, p2: boolean): void;
export declare function setEntityLocallyInvisible(entity: Entity | number): void;
export declare function setEntityLocallyVisible(entity: Entity | number): void;
export declare function isDamageTrackerActiveOnNetworkId(netID: number): boolean;
export declare function activateDamageTrackerOnNetworkId(netID: number, toggle: boolean): void;
export declare function isDamageTrackerActiveOnPlayer(player: Player | number): boolean;
export declare function activateDamageTrackerOnPlayer(player: Player | number, toggle: boolean): void;
export declare function isSphereVisibleToAnotherMachine(p0: number, p1: number, p2: number, p3: number): boolean;
export declare function isSphereVisibleToPlayer(p0: any, p1: number, p2: number, p3: number, p4: number): boolean;
export declare function reserveNetworkMissionObjects(amount: number): void;
export declare function reserveNetworkMissionPeds(amount: number): void;
export declare function reserveNetworkMissionVehicles(amount: number): void;
export declare function reserveLocalNetworkMissionObjects(amount: number): void;
export declare function reserveLocalNetworkMissionPeds(amount: number): void;
export declare function reserveLocalNetworkMissionVehicles(amount: number): void;
export declare function canRegisterMissionObjects(amount: number): boolean;
export declare function canRegisterMissionPeds(amount: number): boolean;
export declare function canRegisterMissionVehicles(amount: number): boolean;
export declare function canRegisterMissionPickups(amount: number): boolean;
export declare function canRegisterMissionDoors(p0: any): boolean;
export declare function canRegisterMissionEntities(ped_amt: number, vehicle_amt: number, object_amt: number, pickup_amt: number): boolean;
export declare function getNumReservedMissionObjects(p0: boolean, p1: any): number;
export declare function getNumReservedMissionPeds(p0: boolean, p1: any): number;
export declare function getNumReservedMissionVehicles(p0: boolean, p1: any): number;
export declare function getNumCreatedMissionObjects(p0: boolean): number;
export declare function getNumCreatedMissionPeds(p0: boolean): number;
export declare function getNumCreatedMissionVehicles(p0: boolean): number;
export declare function getReservedMissionEntitiesInArea(x: number, y: number, z: number, p3: any, out1?: any | null, out2?: any | null, out3?: any | null): [void, any, any, any];
export declare function getMaxNumNetworkObjects(): number;
export declare function getMaxNumNetworkPeds(): number;
export declare function getMaxNumNetworkVehicles(): number;
export declare function getMaxNumNetworkPickups(): number;
export declare function networkSetObjectScopeDistance(object: number, range: number): void;
export declare function networkAllowCloningWhileInTutorial(p0: any, p1: any): void;
export declare function networkSetTaskCutsceneInscopeMultipler(p0: any): void;
export declare function getNetworkTime(): number;
export declare function getNetworkTimeAccurate(): number;
export declare function hasNetworkTimeStarted(): boolean;
export declare function getTimeOffset(timeA: number, timeB: number): number;
export declare function isTimeLessThan(timeA: number, timeB: number): boolean;
export declare function isTimeMoreThan(timeA: number, timeB: number): boolean;
export declare function isTimeEqualTo(timeA: number, timeB: number): boolean;
export declare function getTimeDifference(timeA: number, timeB: number): number;
export declare function getTimeAsString(time: number): string | null;
export declare function getCloudTimeAsString(): string | null;
export declare function getCloudTimeAsInt(): number;
export declare function convertPosixTime(posixTime: number, timeStructure?: any | null): [void, any];
export declare function networkSetInSpectatorMode(toggle: boolean, playerPed: Ped | Player | LocalPlayer | number): void;
export declare function networkSetInSpectatorModeExtended(toggle: boolean, playerPed: Ped | Player | LocalPlayer | number, p2: boolean): void;
export declare function networkSetInFreeCamMode(toggle: boolean): void;
export declare function networkSetAntagonisticToPlayer(toggle: boolean, player: Player | number): void;
export declare function networkIsInSpectatorMode(): boolean;
export declare function networkSetInMpCutscene(p0: boolean, p1: boolean): void;
export declare function networkIsInMpCutscene(): boolean;
export declare function networkIsPlayerInMpCutscene(player: Player | number): boolean;
export declare function networkHideProjectileInCutscene(): void;
export declare function setNetworkVehicleRespotTimer(netId: number, time: number, p2: any, p3: any): void;
export declare function isNetworkVehicleRunningRespotTimer(networkID: number): boolean;
export declare function setNetworkVehicleAsGhost(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setNetworkVehicleMaxPositionDeltaMultiplier(vehicle: Vehicle | number, multiplier: number): void;
export declare function setNetworkEnableHighSpeedEdgeFallDetection(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setLocalPlayerAsGhost(toggle: boolean, p1: boolean): void;
export declare function isEntityAGhost(entity: Entity | number): boolean;
export declare function setNonParticipantsOfThisScriptAsGhosts(p0: boolean): void;
export declare function setRemotePlayerAsGhost(player: Player | number, p1: boolean): void;
export declare function setGhostAlpha(alpha: number): void;
export declare function resetGhostAlpha(): void;
export declare function setEntityGhostedForGhostPlayers(entity: Entity | number, toggle: boolean): void;
export declare function setInvertGhosting(p0: boolean): void;
export declare function isEntityInGhostCollision(entity: Entity | number): boolean;
export declare function usePlayerColourInsteadOfTeamColour(toggle: boolean): void;
export declare function networkCreateSynchronisedScene(x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, rotationOrder: number, useOcclusionPortal: boolean, looped: boolean, p9: number, animTime: number, p11: number): number;
export declare function networkAddPedToSynchronisedScene(ped: Ped | Player | LocalPlayer | number, netScene: number, animDict: string | null, animnName: string | null, speed: number, speedMultiplier: number, duration: number, flag: number, playbackRate: number, p9: any): void;
export declare function networkAddPedToSynchronisedSceneWithIk(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void;
export declare function networkAddEntityToSynchronisedScene(entity: Entity | number, netScene: number, animDict: string | null, animName: string | null, speed: number, speedMulitiplier: number, flag: number): void;
export declare function networkAddMapEntityToSynchronisedScene(netScene: number, modelHash: number, x: number, y: number, z: number, p5: number, p6: string | null, p7: number, p8: number, flags: number): void;
export declare function networkAddSynchronisedSceneCamera(netScene: number, animDict: string | null, animName: string | null): void;
export declare function networkAttachSynchronisedSceneToEntity(netScene: number, entity: Entity | number, bone: number): void;
export declare function networkStartSynchronisedScene(netScene: number): void;
export declare function networkStopSynchronisedScene(netScene: number): void;
export declare function networkGetLocalSceneFromNetworkId(netId: number): number;
export declare function networkForceLocalUseOfSyncedSceneCamera(netScene: number): void;
export declare function networkAllowRemoteSyncedSceneLocalPlayerRequests(p0: any): void;
export declare function networkFindLargestBunchOfPlayers(p0: number, p1: any): boolean;
export declare function networkStartRespawnSearchForPlayer(player: Player | number, x: number, y: number, z: number, radius: number, p5: number, p6: number, p7: number, flags: number): boolean;
export declare function networkStartRespawnSearchInAngledAreaForPlayer(player: Player | number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p8: number, p9: number, p10: number, flags: number): boolean;
export declare function networkQueryRespawnResults(p0?: any | null): [number, any];
export declare function networkCancelRespawnSearch(): void;
export declare function networkGetRespawnResult(randomInt: number, coordinates?: Vector3 | null, heading?: number | null): [void, Vector3, number];
export declare function networkGetRespawnResultFlags(p0: number): number;
export declare function networkStartSoloTutorialSession(): void;
export declare function networkAllowGangToJoinTutorialSession(teamId: number, instanceId: number): void;
export declare function networkEndTutorialSession(): void;
export declare function networkIsInTutorialSession(): boolean;
export declare function networkWaitingPopClearTutorialSession(): boolean;
export declare function networkIsTutorialSessionChangePending(): boolean;
export declare function networkGetPlayerTutorialSessionInstance(player: Player | number): number;
export declare function networkArePlayersInSameTutorialSession(player: Player | number, index: number): boolean;
export declare function networkBlockProxyMigrationBetweenTutorialSessions(p0: any): void;
export declare function networkConcealPlayer(player: Player | number, toggle: boolean, p2: boolean): void;
export declare function networkIsPlayerConcealed(player: Player | number): boolean;
export declare function networkConcealEntity(entity: Entity | number, toggle: boolean): void;
export declare function networkIsEntityConcealed(entity: Entity | number): boolean;
export declare function networkOverrideClockTime(hours: number, minutes: number, seconds: number): void;
export declare function networkOverrideClockRate(ms: number): void;
export declare function networkClearClockTimeOverride(): void;
export declare function networkIsClockTimeOverridden(): boolean;
export declare function networkAddEntityArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
export declare function networkAddEntityAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number): number;
export declare function networkAddClientEntityArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
export declare function networkAddClientEntityAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number): number;
export declare function networkRemoveEntityArea(areaHandle: number): boolean;
export declare function networkEntityAreaDoesExist(areaHandle: number): boolean;
export declare function networkEntityAreaHaveAllReplied(areaHandle: number): boolean;
export declare function networkEntityAreaIsOccupied(areaHandle: number): boolean;
export declare function networkUseHighPrecisionBlending(netID: number, toggle: boolean): void;
export declare function networkSetCustomArenaBallParams(netId: number): void;
export declare function networkEntityUseHighPrecisionRotation(netId: number, toggle: boolean): void;
export declare function networkRequestCloudBackgroundScripts(): boolean;
export declare function networkIsCloudBackgroundScriptRequestPending(): boolean;
export declare function networkRequestCloudTunables(): void;
export declare function networkIsTunableCloudRequestPending(): boolean;
export declare function networkGetTunableCloudCrc(): number;
export declare function networkDoesTunableExist(tunableContext: string | null, tunableName: string | null): boolean;
export declare function networkAccessTunableInt(tunableContext: string | null, tunableName: string | null, value?: number | null): [boolean, number];
export declare function networkAccessTunableFloat(tunableContext: string | null, tunableName: string | null, value?: number | null): [boolean, number];
export declare function networkAccessTunableBool(tunableContext: string | null, tunableName: string | null): boolean;
export declare function networkDoesTunableExistHash(tunableContext: number, tunableName: number): boolean;
export declare function networkAccessTunableModificationDetectionClear(): boolean;
export declare function networkAccessTunableIntHash(tunableContext: number, tunableName: number, value?: number | null): [boolean, number];
export declare function networkAccessTunableIntModificationDetectionRegistrationHash(contextHash: number, nameHash: number, value?: number | null): [boolean, number];
export declare function networkAccessTunableFloatHash(tunableContext: number, tunableName: number, value?: number | null): [boolean, number];
export declare function networkAccessTunableFloatModificationDetectionRegistrationHash(contextHash: number, nameHash: number, value?: number | null): [boolean, number];
export declare function networkAccessTunableBoolHash(tunableContext: number, tunableName: number): boolean;
export declare function networkAccessTunableBoolModificationDetectionRegistrationHash(contextHash: number, nameHash: number, value?: boolean | null): [boolean, boolean];
export declare function networkTryAccessTunableBoolHash(tunableContext: number, tunableName: number, defaultValue: boolean): boolean;
export declare function networkGetContentModifierListId(contentHash: number): number;
export declare function networkGetBoneIdOfFatalHit(): number;
export declare function networkResetBodyTracker(): void;
export declare function networkGetNumberBodyTrackerHits(): number;
export declare function networkHasBoneBeenHitByKiller(boneIndex: number): boolean;
export declare function networkSetAttributeDamageToPlayer(ped: Ped | Player | LocalPlayer | number, player: Player | number): boolean;
export declare function networkTriggerDamageEventForZeroDamage(entity: Entity | number, toggle: boolean): void;
export declare function networkTriggerDamageEventForZeroWeaponHash(entity: Entity | number, toggle: boolean): void;
export declare function networkSetNoLongerNeeded(entity: Entity | number, toggle: boolean): void;
export declare function networkExplodeVehicle(vehicle: Vehicle | number, isAudible: boolean, isInvisible: boolean, netId: number): boolean;
export declare function networkExplodeHeli(vehicle: Vehicle | number, isAudible: boolean, isInvisible: boolean, netId: number): void;
export declare function networkUseLogarithmicBlendingThisFrame(entity: Entity | number): void;
export declare function networkOverrideCoordsAndHeading(entity: Entity | number, x: number, y: number, z: number, heading: number): void;
export declare function networkEnableExtraVehicleOrientationBlendChecks(netId: number, toggle: boolean): void;
export declare function networkDisableProximityMigration(netID: number): void;
export declare function networkSetPropertyId(id: number): void;
export declare function networkClearPropertyId(): void;
export declare function networkSetPlayerMentalState(p0: number): void;
export declare function networkSetMinimumRankForMission(p0: boolean): void;
export declare function networkCacheLocalPlayerHeadBlendData(): void;
export declare function networkHasCachedPlayerHeadBlendData(player: Player | number): boolean;
export declare function networkApplyCachedPlayerHeadBlendData(ped: Ped | Player | LocalPlayer | number, player: Player | number): boolean;
export declare function getNumCommerceItems(): number;
export declare function isCommerceDataValid(): boolean;
export declare function triggerCommerceDataFetch(p0: any): void;
export declare function isCommerceDataFetchInProgress(): boolean;
export declare function getCommerceItemId(index: number): string | null;
export declare function getCommerceItemName(index: number): string | null;
export declare function getCommerceProductPrice(index: number): string | null;
export declare function getCommerceItemNumCats(index: number): number;
export declare function getCommerceItemCat(index: number, index2: number): string | null;
export declare function openCommerceStore(p0: string | null, p1: string | null, p2: number): void;
export declare function isCommerceStoreOpen(): boolean;
export declare function setStoreEnabled(toggle: boolean): void;
export declare function requestCommerceItemImage(index: number): boolean;
export declare function releaseAllCommerceItemImages(): void;
export declare function getCommerceItemTexturename(index: number): string | null;
export declare function isStoreAvailableToUser(): boolean;
export declare function delayMpStoreOpen(): void;
export declare function resetStoreNetworkGameTracking(): void;
export declare function isUserOldEnoughToAccessStore(): boolean;
export declare function setLastViewedShopItem(p0: number, p1: number, p2: number): void;
export declare function getUserPremiumAccess(): number;
export declare function getUserStarterAccess(): number;
export declare function cloudDeleteMemberFile(p0: string | null): number;
export declare function cloudHasRequestCompleted(requestId: number): boolean;
export declare function cloudDidRequestSucceed(requestId: number): boolean;
export declare function cloudCheckAvailability(): void;
export declare function cloudIsCheckingAvailability(): boolean;
export declare function cloudGetAvailabilityCheckResult(): boolean;
export declare function getContentToLoadType(): number;
export declare function getIsLaunchFromLiveArea(): boolean;
export declare function getIsLiveAreaLaunchWithContent(): boolean;
export declare function clearServiceEventArguments(): void;
export declare function ugcCopyContent(p0?: any | null, p1?: any | null): [boolean, any, any];
export declare function ugcIsCreating(): boolean;
export declare function ugcHasCreateFinished(): boolean;
export declare function ugcDidCreateSucceed(): boolean;
export declare function ugcGetCreateResult(): number;
export declare function ugcGetCreateContentId(): string | null;
export declare function ugcClearCreateResult(): void;
export declare function ugcQueryMyContent(p0: any, p1: any, p2: any | null, p3: any, p4: any, p5: any): [boolean, any];
export declare function ugcQueryByCategory(p0: any, p1: any, p2: any, p3: string | null, p4: any, p5: boolean): boolean;
export declare function ugcQueryByContentId(contentId: string | null, latestVersion: boolean, contentTypeName: string | null): boolean;
export declare function ugcQueryByContentIds(data: any | null, count: number, latestVersion: boolean, contentTypeName: string | null): [boolean, any];
export declare function ugcQueryMostRecentlyCreatedContent(offset: number, count: number, contentTypeName: string | null, p3: number): boolean;
export declare function ugcGetBookmarkedContent(p0: any, p1: any, p2: string | null, p3?: any | null): [boolean, any];
export declare function ugcGetMyContent(p0: any, p1: any, p2: string | null, p3?: any | null): [boolean, any];
export declare function ugcGetFriendContent(p0: any, p1: any, p2: string | null, p3?: any | null): [boolean, any];
export declare function ugcGetCrewContent(p0: any, p1: any, p2: any, p3: string | null, p4?: any | null): [boolean, any];
export declare function ugcGetGetByCategory(p0: any, p1: any, p2: any, p3: string | null, p4?: any | null): [boolean, any];
export declare function ugcGetGetByContentId(contentId: string | null, contentTypeName: string | null): boolean;
export declare function ugcGetGetByContentIds(data: any | null, dataCount: number, contentTypeName: string | null): [boolean, any];
export declare function ugcGetMostRecentlyCreatedContent(p0: any, p1: any, p2?: any | null, p3?: any | null): [boolean, any, any];
export declare function ugcGetMostRecentlyPlayedContent(p0: any, p1: any, p2?: any | null, p3?: any | null): [boolean, any, any];
export declare function ugcGetTopRatedContent(p0: any, p1: any, p2?: any | null, p3?: any | null): [boolean, any, any];
export declare function ugcCancelQuery(): void;
export declare function ugcIsGetting(): boolean;
export declare function ugcHasGetFinished(): boolean;
export declare function ugcDidGetSucceed(): boolean;
export declare function ugcWasQueryForceCancelled(): boolean;
export declare function ugcGetQueryResult(): number;
export declare function ugcGetContentNum(): number;
export declare function ugcGetContentTotal(): number;
export declare function ugcGetContentHash(): number;
export declare function ugcClearQueryResults(): void;
export declare function ugcGetContentUserId(p0: number): string | null;
export declare function ugcGetContentCreatorGamerHandle(p0: number, p1?: any | null): [boolean, any];
export declare function ugcGetContentCreatedByLocalPlayer(p0: any): boolean;
export declare function ugcGetContentUserName(p0: any): string | null;
export declare function ugcGetContentIsUsingScNickname(p0: any): boolean;
export declare function ugcGetContentCategory(p0: number): number;
export declare function ugcGetContentId(p0: number): string | null;
export declare function ugcGetRootContentId(p0: number): string | null;
export declare function ugcGetContentName(p0: any): string | null;
export declare function ugcGetContentDescriptionHash(p0: any): number;
export declare function ugcGetContentPath(p0: number, p1: number): string | null;
export declare function ugcGetContentUpdatedDate(p0: any, p1?: any | null): [void, any];
export declare function ugcGetContentFileVersion(p0: any, p1: any): number;
export declare function ugcGetContentHasLoResPhoto(p0: number): boolean;
export declare function ugcGetContentHasHiResPhoto(p0: number): boolean;
export declare function ugcGetContentLanguage(p0: any): number;
export declare function ugcGetContentIsPublished(p0: any): boolean;
export declare function ugcGetContentIsVerified(p0: any): boolean;
export declare function ugcGetContentRating(p0: any, p1: any): number;
export declare function ugcGetContentRatingCount(p0: any, p1: any): number;
export declare function ugcGetContentRatingPositiveCount(p0: any, p1: any): number;
export declare function ugcGetContentRatingNegativeCount(p0: any, p1: any): number;
export declare function ugcGetContentHasPlayerRecord(p0: any): boolean;
export declare function ugcGetContentHasPlayerBookmarked(p0: any): boolean;
export declare function ugcRequestContentDataFromIndex(p0: number, p1: number): number;
export declare function ugcRequestContentDataFromParams(contentTypeName: string | null, contentId: string | null, p2: number, p3: number, p4: number): number;
export declare function ugcRequestCachedDescription(p0: number): number;
export declare function ugcIsDescriptionRequestInProgress(p0: any): boolean;
export declare function ugcHasDescriptionRequestFinished(p0: any): boolean;
export declare function ugcDidDescriptionRequestSucceed(p0: any): boolean;
export declare function ugcGetCachedDescription(p0: any, p1: any): string | null;
export declare function ugcReleaseCachedDescription(p0: any): boolean;
export declare function ugcReleaseAllCachedDescriptions(): void;
export declare function ugcHasPermissionToWrite(): boolean;
export declare function ugcPublish(contentId: string | null, baseContentId: string | null, contentTypeName: string | null): boolean;
export declare function ugcSetBookmarked(contentId: string | null, bookmarked: boolean, contentTypeName: string | null): boolean;
export declare function ugcSetDeleted(p0: any | null, p1: boolean, p2: string | null): [boolean, any];
export declare function ugcIsModifying(): boolean;
export declare function ugcHasModifyFinished(): boolean;
export declare function ugcDidModifySucceed(): boolean;
export declare function ugcGetModifyResult(): number;
export declare function ugcClearModifyResult(): void;
export declare function ugcGetCreatorsByUserId(p0?: any | null, p1?: any | null): [boolean, any, any];
export declare function ugcHasQueryCreatorsFinished(): boolean;
export declare function ugcDidQueryCreatorsSucceed(): boolean;
export declare function ugcGetCreatorNum(): number;
export declare function ugcLoadOfflineQuery(p0: any): boolean;
export declare function ugcClearOfflineQuery(): void;
export declare function ugcSetQueryDataFromOffline(p0: boolean): void;
export declare function ugcSetUsingOfflineContent(p0: boolean): void;
export declare function ugcIsLanguageSupported(p0: any): boolean;
export declare function facebookPostCompletedHeist(heistName: string | null, cashEarned: number, xpEarned: number): boolean;
export declare function facebookPostCreateCharacter(): boolean;
export declare function facebookPostCompletedMilestone(milestoneId: number): boolean;
export declare function facebookHasPostCompleted(): boolean;
export declare function facebookDidPostSucceed(): boolean;
export declare function facebookCanPostToFacebook(): boolean;
export declare function textureDownloadRequest(gamerHandle: any | null, filePath: string | null, name: string | null, p3: boolean): [number, any];
export declare function titleTextureDownloadRequest(filePath: string | null, name: string | null, p2: boolean): number;
export declare function ugcTextureDownloadRequest(p0: string | null, p1: number, p2: number, p3: number, p4: string | null, p5: boolean): number;
export declare function textureDownloadRelease(p0: number): void;
export declare function textureDownloadHasFailed(p0: number): boolean;
export declare function textureDownloadGetName(p0: number): string | null;
export declare function getStatusOfTextureDownload(p0: number): number;
export declare function networkCheckRosLinkWentdownNotNet(): boolean;
export declare function networkShouldShowStrictNatWarning(): boolean;
export declare function networkIsCableConnected(): boolean;
export declare function networkHaveScsPrivateMsgPriv(): boolean;
export declare function networkHaveRosSocialClubPriv(): boolean;
export declare function networkHaveRosBannedPriv(): boolean;
export declare function networkHaveRosCreateTicketPriv(): boolean;
export declare function networkHaveRosMultiplayerPriv(): boolean;
export declare function networkHaveRosLeaderboardWritePriv(): boolean;
export declare function networkHasRosPrivilege(index: number): boolean;
export declare function networkHasRosPrivilegeEndDate(privilege: number, banType?: number | null, timeData?: any | null): [boolean, number, any];
export declare function networkHasRosPrivilegePlayedLastGen(): boolean;
export declare function networkHasRosPrivilegeSpecialEditionContent(): boolean;
export declare function networkHasRosPrivilegeMpTextCommunication(): boolean;
export declare function networkHasRosPrivilegeMpVoiceCommunication(): boolean;
export declare function networkStartCommunicationPermissionsCheck(p0: any): number;
export declare function networkStartUserContentPermissionsCheck(netHandle?: any | null): [number, any];
export declare function networkSkipRadioResetNextClose(): void;
export declare function networkSkipRadioResetNextOpen(): void;
export declare function networkSkipRadioWarning(): boolean;
export declare function networkForceLocalPlayerScarSync(): void;
export declare function networkDisableLeaveRemotePedBehind(toggle: boolean): void;
export declare function networkAllowRemoteAttachmentModification(entity: Entity | number, toggle: boolean): void;
export declare function networkShowChatRestrictionMsc(player: Player | number): void;
export declare function networkShowPsnUgcRestriction(): void;
export declare function networkIsTitleUpdateRequired(): boolean;
export declare function networkQuitMpToDesktop(): void;
export declare function networkIsConnectedViaRelay(player: Player | number): boolean;
export declare function networkGetAverageLatency(player: Player | number): number;
export declare function networkGetAveragePing(player: Player | number): number;
export declare function networkGetAveragePacketLoss(player: Player | number): number;
export declare function networkGetNumUnackedReliables(player: Player | number): number;
export declare function networkGetUnreliableResendCount(player: Player | number): number;
export declare function networkGetHighestReliableResendCount(player: Player | number): number;
export declare function networkReportCodeTamper(): void;
export declare function networkGetLastEntityPosReceivedOverNetwork(entity: Entity | number): Vector3;
export declare function networkGetLastPlayerPosReceivedOverNetwork(player: Player | number): Vector3;
export declare function networkGetLastVelReceivedOverNetwork(entity: Entity | number): Vector3;
export declare function networkGetPredictedVelocity(entity: Entity | number, maxSpeedToPredict: number): Vector3;
export declare function networkDumpNetIfConfig(): void;
export declare function networkGetSignallingInfo(p0?: any | null): [void, any];
export declare function networkGetNetStatisticsInfo(p0?: any | null): [void, any];
export declare function networkGetPlayerAccountId(player: Player | number): number;
export declare function networkUgcNav(p0: any, p1: any): void;
export declare function createObject(modelHash: number, x: number, y: number, z: number, isNetwork: boolean, bScriptHostObj: boolean, dynamic: boolean): number;
export declare function createObjectNoOffset(modelHash: number, x: number, y: number, z: number, isNetwork: boolean, bScriptHostObj: boolean, dynamic: boolean): number;
export declare function deleteObject(object?: number | null): [void, number];
export declare function placeObjectOnGroundProperly(object: number): boolean;
export declare function placeObjectOnGroundOrObjectProperly(object: number): boolean;
export declare function rotateObject(object: number, p1: number, p2: number, p3: boolean): boolean;
export declare function slideObject(object: number, toX: number, toY: number, toZ: number, speedX: number, speedY: number, speedZ: number, collision: boolean): boolean;
export declare function setObjectTargettable(object: number, targettable: boolean, p2: any): void;
export declare function setObjectForceVehiclesToAvoid(object: number, toggle: boolean): void;
export declare function getClosestObjectOfType(x: number, y: number, z: number, radius: number, modelHash: number, isMission: boolean, p6: boolean, p7: boolean): number;
export declare function hasObjectBeenBroken(object: number, p1: any): boolean;
export declare function hasClosestObjectOfTypeBeenBroken(p0: number, p1: number, p2: number, p3: number, modelHash: number, p5: any): boolean;
export declare function hasClosestObjectOfTypeBeenCompletelyDestroyed(x: number, y: number, z: number, radius: number, modelHash: number, p5: boolean): boolean;
export declare function getHasObjectBeenCompletelyDestroyed(p0: any): boolean;
export declare function getOffsetFromCoordAndHeadingInWorldCoords(xPos: number, yPos: number, zPos: number, heading: number, xOffset: number, yOffset: number, zOffset: number): Vector3;
export declare function getCoordsAndRotationOfClosestObjectOfType(x: number, y: number, z: number, radius: number, modelHash: number, outPosition: Vector3 | null, outRotation: Vector3 | null, rotationOrder: number): [boolean, Vector3, Vector3];
export declare function setStateOfClosestDoorOfType(type: number, x: number, y: number, z: number, locked: boolean, heading: number, p6: boolean): void;
export declare function getStateOfClosestDoorOfType(type: number, x: number, y: number, z: number, locked?: boolean | null, heading?: number | null): [void, boolean, number];
export declare function setLockedUnstreamedInDoorOfType(modelHash: number, x: number, y: number, z: number, locked: boolean, xRotMult: number, yRotMult: number, zRotMult: number): void;
export declare function playObjectAutoStartAnim(p0: any): void;
export declare function addDoorToSystem(doorHash: number, modelHash: number, x: number, y: number, z: number, p5: boolean, scriptDoor: boolean, isLocal: boolean): void;
export declare function removeDoorFromSystem(doorHash: number, p1: any): void;
export declare function doorSystemSetDoorState(doorHash: number, state: number, requestDoor: boolean, forceUpdate: boolean): void;
export declare function doorSystemGetDoorState(doorHash: number): number;
export declare function doorSystemGetDoorPendingState(doorHash: number): number;
export declare function doorSystemSetAutomaticRate(doorHash: number, rate: number, requestDoor: boolean, forceUpdate: boolean): void;
export declare function doorSystemSetAutomaticDistance(doorHash: number, distance: number, requestDoor: boolean, forceUpdate: boolean): void;
export declare function doorSystemSetOpenRatio(doorHash: number, ajar: number, requestDoor: boolean, forceUpdate: boolean): void;
export declare function doorSystemGetAutomaticDistance(doorHash: number): number;
export declare function doorSystemGetOpenRatio(doorHash: number): number;
export declare function doorSystemSetSpringRemoved(doorHash: number, removed: boolean, requestDoor: boolean, forceUpdate: boolean): void;
export declare function doorSystemSetHoldOpen(doorHash: number, toggle: boolean): void;
export declare function doorSystemSetDoorOpenForRaces(doorHash: number, p1: boolean): void;
export declare function isDoorRegisteredWithSystem(doorHash: number): boolean;
export declare function isDoorClosed(doorHash: number): boolean;
export declare function openAllBarriersForRace(p0: boolean): void;
export declare function closeAllBarriersForRace(): void;
export declare function doorSystemGetIsPhysicsLoaded(p0: any): boolean;
export declare function doorSystemFindExistingDoor(x: number, y: number, z: number, modelHash: number, outDoorHash?: number | null): [boolean, number];
export declare function isGarageEmpty(garageHash: number, p1: boolean, p2: number): boolean;
export declare function isPlayerEntirelyInsideGarage(garageHash: number, player: Player | number, p2: number, p3: number): boolean;
export declare function isPlayerPartiallyInsideGarage(garageHash: number, player: Player | number, p2: number): boolean;
export declare function areEntitiesEntirelyInsideGarage(garageHash: number, p1: boolean, p2: boolean, p3: boolean, p4: any): boolean;
export declare function isAnyEntityEntirelyInsideGarage(garageHash: number, p1: boolean, p2: boolean, p3: boolean, p4: any): boolean;
export declare function isObjectEntirelyInsideGarage(garageHash: number, entity: Entity | number, p2: number, p3: number): boolean;
export declare function isObjectPartiallyInsideGarage(garageHash: number, entity: Entity | number, p2: number): boolean;
export declare function clearGarage(garageHash: number, isNetwork: boolean): void;
export declare function clearObjectsInsideGarage(garageHash: number, vehicles: boolean, peds: boolean, objects: boolean, isNetwork: boolean): void;
export declare function disableTidyingUpInGarage(id: number, toggle: boolean): void;
export declare function enableSavingInGarage(garageHash: number, toggle: boolean): void;
export declare function closeSafehouseGarages(): void;
export declare function doesObjectOfTypeExistAtCoords(x: number, y: number, z: number, radius: number, hash: number, p5: boolean): boolean;
export declare function isPointInAngledArea(xPos: number, yPos: number, zPos: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, debug: boolean, includeZ: boolean): boolean;
export declare function setObjectAllowLowLodBuoyancy(object: number, toggle: boolean): void;
export declare function setObjectPhysicsParams(object: number, weight: number, p2: number, p3: number, p4: number, p5: number, gravity: number, p7: number, p8: number, p9: number, p10: number, buoyancy: number): void;
export declare function getObjectFragmentDamageHealth(p0: any, p1: boolean): number;
export declare function setActivateObjectPhysicsAsSoonAsItIsUnfrozen(object: number, toggle: boolean): void;
export declare function isAnyObjectNearPoint(x: number, y: number, z: number, range: number, p4: boolean): boolean;
export declare function isObjectNearPoint(objectHash: number, x: number, y: number, z: number, range: number): boolean;
export declare function removeObjectHighDetailModel(object: number): void;
export declare function breakObjectFragmentChild(p0: number, p1: any, p2: boolean): void;
export declare function damageObjectFragmentChild(p0: any, p1: any, p2: any): void;
export declare function fixObjectFragment(object: number): void;
export declare function trackObjectVisibility(object: number): void;
export declare function isObjectVisible(object: number): boolean;
export declare function setObjectIsSpecialGolfball(object: number, toggle: boolean): void;
export declare function setObjectTakesDamageFromCollidingWithBuildings(p0: any, p1: boolean): void;
export declare function allowDamageEventsForNonNetworkedObjects(value: boolean): void;
export declare function setCutscenesWeaponFlashlightOnThisFrame(object: number, toggle: boolean): void;
export declare function getRayfireMapObject(x: number, y: number, z: number, radius: number, name: string | null): number;
export declare function setStateOfRayfireMapObject(object: number, state: number): void;
export declare function getStateOfRayfireMapObject(object: number): number;
export declare function doesRayfireMapObjectExist(object: number): boolean;
export declare function getRayfireMapObjectAnimPhase(object: number): number;
export declare function createPickup(pickupHash: number, posX: number, posY: number, posZ: number, p4: number, value: number, p6: boolean, modelHash: number): number;
export declare function createPickupRotate(pickupHash: number, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, flag: number, amount: number, p9: any, p10: boolean, modelHash: number): number;
export declare function forcePickupRotateFaceUp(): void;
export declare function setCustomPickupWeaponHash(pickupHash: number, pickup: number): void;
export declare function createAmbientPickup(pickupHash: number, posX: number, posY: number, posZ: number, flags: number, value: number, modelHash: number, p7: boolean, p8: boolean): number;
export declare function createNonNetworkedAmbientPickup(pickupHash: number, posX: number, posY: number, posZ: number, flags: number, value: number, modelHash: number, p7: boolean, p8: boolean): number;
export declare function blockPlayersForAmbientPickup(p0: any, p1: any): void;
export declare function createPortablePickup(pickupHash: number, x: number, y: number, z: number, placeOnGround: boolean, modelHash: number): number;
export declare function createNonNetworkedPortablePickup(pickupHash: number, x: number, y: number, z: number, placeOnGround: boolean, modelHash: number): number;
export declare function attachPortablePickupToPed(pickupObject: number, ped: Ped | Player | LocalPlayer | number): void;
export declare function detachPortablePickupFromPed(pickupObject: number): void;
export declare function forcePortablePickupLastAccessiblePositionSetting(object: number): void;
export declare function hidePortablePickupWhenDetached(pickupObject: number, toggle: boolean): void;
export declare function setMaxNumPortablePickupsCarriedByPlayer(modelHash: number, number: number): void;
export declare function setLocalPlayerCanCollectPortablePickups(toggle: boolean): void;
export declare function getSafePickupCoords(x: number, y: number, z: number, p3: number, p4: number): Vector3;
export declare function addExtendedPickupProbeArea(x: number, y: number, z: number, radius: number): void;
export declare function clearExtendedPickupProbeAreas(): void;
export declare function getPickupCoords(pickup: number): Vector3;
export declare function suppressPickupSoundForPickup(p0: any, p1: any): void;
export declare function removeAllPickupsOfType(pickupHash: number): void;
export declare function hasPickupBeenCollected(pickup: number): boolean;
export declare function removePickup(pickup: number): void;
export declare function createMoneyPickups(x: number, y: number, z: number, value: number, amount: number, model: number): void;
export declare function doesPickupExist(pickup: number): boolean;
export declare function doesPickupObjectExist(pickupObject: number): boolean;
export declare function getPickupObject(pickup: number): number;
export declare function isObjectAPickup(object: number): boolean;
export declare function isObjectAPortablePickup(object: number): boolean;
export declare function doesPickupOfTypeExistInArea(pickupHash: number, x: number, y: number, z: number, radius: number): boolean;
export declare function setPickupRegenerationTime(pickup: number, duration: number): void;
export declare function forcePickupRegenerate(p0: any): void;
export declare function setPlayerPermittedToCollectPickupsOfType(player: Player | number, pickupHash: number, toggle: boolean): void;
export declare function setLocalPlayerPermittedToCollectPickupsWithModel(modelHash: number, toggle: boolean): void;
export declare function allowAllPlayersToCollectPickupsOfType(pickupHash: number): void;
export declare function setTeamPickupObject(object: number, p1: any, p2: boolean): void;
export declare function preventCollectionOfPortablePickup(object: number, p1: boolean, p2: boolean): void;
export declare function setPickupObjectGlowWhenUncollectable(pickup: number, toggle: boolean): void;
export declare function setPickupGlowOffset(pickup: number, p1: number): void;
export declare function setPickupObjectGlowOffset(pickup: number, p1: number, p2: boolean): void;
export declare function setObjectGlowInSameTeam(pickup: number): void;
export declare function setPickupObjectArrowMarker(pickup: number, toggle: boolean): void;
export declare function allowPickupArrowMarkerWhenUncollectable(pickup: number, toggle: boolean): void;
export declare function getDefaultAmmoForWeaponPickup(pickupHash: number): number;
export declare function setPickupGenerationRangeMultiplier(multiplier: number): void;
export declare function getPickupGenerationRangeMultiplier(): number;
export declare function setOnlyAllowAmmoCollectionWhenLow(p0: boolean): void;
export declare function setPickupUncollectable(pickup: number, toggle: boolean): void;
export declare function setPickupTransparentWhenUncollectable(pickup: number, toggle: boolean): void;
export declare function setPickupHiddenWhenUncollectable(pickup: number, toggle: boolean): void;
export declare function setPickupObjectTransparentWhenUncollectable(pickup: number, toggle: boolean): void;
export declare function setPickupObjectAlphaWhenTransparent(p0: number): void;
export declare function setPortablePickupPersist(pickup: number, toggle: boolean): void;
export declare function allowPortablePickupToMigrateToNonParticipants(pickup: number, toggle: boolean): void;
export declare function forceActivatePhysicsOnUnfixedPickup(pickup: number, toggle: boolean): void;
export declare function allowPickupByNoneParticipant(pickup: number, toggle: boolean): void;
export declare function suppressPickupRewardType(rewardType: number, suppress: boolean): void;
export declare function clearAllPickupRewardTypeSuppression(): void;
export declare function clearPickupRewardTypeSuppression(rewardType: number): void;
export declare function renderFakePickupGlow(x: number, y: number, z: number, colorIndex: number): void;
export declare function setPickupObjectCollectableInVehicle(pickup: number): void;
export declare function setPickupTrackDamageEvents(pickup: number, toggle: boolean): void;
export declare function setEntityFlagSuppressShadow(entity: Entity | number, toggle: boolean): void;
export declare function setEntityFlagRenderSmallShadow(object: number, toggle: boolean): void;
export declare function getWeaponTypeFromPickupType(pickupHash: number): number;
export declare function getPickupTypeFromWeaponHash(weaponHash: number): number;
export declare function isPickupWeaponObjectValid(object: number): boolean;
export declare function getObjectTintIndex(object: number): number;
export declare function setObjectTintIndex(object: number, textureVariation: number): void;
export declare function setTintIndexClosestBuildingOfType(x: number, y: number, z: number, radius: number, modelHash: number, textureVariation: number): boolean;
export declare function setPropTintIndex(p0: any, p1: any): void;
export declare function setPropLightColor(object: number, p1: boolean, r: number, g: number, b: number): boolean;
export declare function isPropLightOverriden(object: number): boolean;
export declare function setObjectIsVisibleInMirrors(object: number, toggle: boolean): void;
export declare function setObjectSpeedBoostAmount(object: number, p1: any): void;
export declare function setObjectSpeedBoostDuration(object: number, duration: number): void;
export declare function convertOldPickupTypeToNew(pickupHash: number): number;
export declare function setForceObjectThisFrame(x: number, y: number, z: number, p3: number): void;
export declare function onlyCleanUpObjectWhenOutOfRange(object: number): void;
export declare function setDisableCollisionsBetweenCarsAndCarParachute(p0: any): void;
export declare function setProjectilesShouldExplodeOnContact(entity: Entity | number, p1: any): void;
export declare function setDriveArticulatedJoint(object: number, toggle: boolean, p2: number): void;
export declare function setDriveArticulatedJointWithInflictor(object: number, toggle: boolean, p2: number, ped: Ped | Player | LocalPlayer | number): void;
export declare function setObjectIsAPressurePlate(object: number, toggle: boolean): void;
export declare function setWeaponImpactsApplyGreaterForce(object: number, p1: boolean): void;
export declare function getIsArticulatedJointAtMinAngle(object: number, p1: any): boolean;
export declare function getIsArticulatedJointAtMaxAngle(p0: any, p1: any): boolean;
export declare function setIsObjectArticulated(object: number, toggle: boolean): void;
export declare function setIsObjectBall(object: number, toggle: boolean): void;
export declare function isControlEnabled(control: number, action: number): boolean;
export declare function isControlPressed(control: number, action: number): boolean;
export declare function isControlReleased(control: number, action: number): boolean;
export declare function isControlJustPressed(control: number, action: number): boolean;
export declare function isControlJustReleased(control: number, action: number): boolean;
export declare function getControlValue(control: number, action: number): number;
export declare function getControlNormal(control: number, action: number): number;
export declare function setUseAdjustedMouseCoords(toggle: boolean): void;
export declare function getControlUnboundNormal(control: number, action: number): number;
export declare function setControlValueNextFrame(control: number, action: number, value: number): boolean;
export declare function isDisabledControlPressed(control: number, action: number): boolean;
export declare function isDisabledControlReleased(control: number, action: number): boolean;
export declare function isDisabledControlJustPressed(control: number, action: number): boolean;
export declare function isDisabledControlJustReleased(control: number, action: number): boolean;
export declare function getDisabledControlNormal(control: number, action: number): number;
export declare function getDisabledControlUnboundNormal(control: number, action: number): number;
export declare function getControlHowLongAgo(control: number): number;
export declare function isUsingKeyboardAndMouse(control: number): boolean;
export declare function isUsingCursor(control: number): boolean;
export declare function setCursorPosition(x: number, y: number): boolean;
export declare function isUsingRemotePlay(control: number): boolean;
export declare function haveControlsChanged(control: number): boolean;
export declare function getControlInstructionalButtonsString(control: number, action: number, allowXOSwap: boolean): string | null;
export declare function getControlGroupInstructionalButtonsString(control: number, controlGroup: number, allowXOSwap: boolean): string | null;
export declare function setControlLightEffectColor(control: number, red: number, green: number, blue: number): void;
export declare function clearControlLightEffect(control: number): void;
export declare function setControlShake(control: number, duration: number, frequency: number): void;
export declare function setControlTriggerShake(control: number, leftDuration: number, leftFrequency: number, rightDuration: number, rightFrequency: number): void;
export declare function stopControlShake(control: number): void;
export declare function setControlShakeSuppressedId(control: number, uniqueId: number): void;
export declare function clearControlShakeSuppressedId(control: number): void;
export declare function isLookInverted(): boolean;
export declare function isMouseLookInverted(): boolean;
export declare function getLocalPlayerAimState(): number;
export declare function getLocalPlayerGamepadAimState(): number;
export declare function getIsUsingAlternateHandbrake(): boolean;
export declare function getIsUsingAlternateDriveby(): boolean;
export declare function getAllowMovementWhileZoomed(): boolean;
export declare function setPlayerpadShakesWhenControllerDisabled(toggle: boolean): void;
export declare function setInputExclusive(control: number, action: number): void;
export declare function disableControlAction(control: number, action: number, disableRelatedActions: boolean): void;
export declare function enableControlAction(control: number, action: number, enableRelatedActions: boolean): void;
export declare function disableAllControlActions(control: number): void;
export declare function enableAllControlActions(control: number): void;
export declare function initPcScriptedControls(schemeName: string | null): boolean;
export declare function switchPcScriptedControls(schemeName: string | null): boolean;
export declare function shutdownPcScriptedControls(): void;
export declare function allowAlternativeScriptControlsLayout(control: number): void;
export declare function setRoadsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, nodeEnabled: boolean, unknown2: boolean): void;
export declare function setRoadsInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, unknown1: boolean, unknown2: boolean, unknown3: boolean): void;
export declare function setPedPathsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: any): void;
export declare function getSafeCoordForPed(x: number, y: number, z: number, onGround: boolean, outPosition: Vector3 | null, flags: number): [boolean, Vector3];
export declare function getClosestVehicleNode(x: number, y: number, z: number, outPosition: Vector3 | null, nodeFlags: number, p5: number, p6: number): [boolean, Vector3];
export declare function getClosestMajorVehicleNode(x: number, y: number, z: number, outPosition: Vector3 | null, unknown1: number, unknown2: number): [boolean, Vector3];
export declare function getClosestVehicleNodeWithHeading(x: number, y: number, z: number, outPosition: Vector3 | null, outHeading: number | null, nodeType: number, p6: number, p7: number): [boolean, Vector3, number];
export declare function getNthClosestVehicleNode(x: number, y: number, z: number, nthClosest: number, outPosition: Vector3 | null, nodeFlags: number, unknown1: number, unknown2: number): [boolean, Vector3];
export declare function getNthClosestVehicleNodeId(x: number, y: number, z: number, nth: number, nodeFlags: number, p5: number, p6: number): number;
export declare function getNthClosestVehicleNodeWithHeading(x: number, y: number, z: number, nthClosest: number, outPosition: Vector3 | null, outHeading: number | null, outNumLanes: number | null, nodeFlags: number, unknown3: number, unknown4: number): [boolean, Vector3, number, number];
export declare function getNthClosestVehicleNodeIdWithHeading(x: number, y: number, z: number, nthClosest: number, outPosition: Vector3 | null, outHeading: number | null, nodeFlags: number, p7: number, p8: number): [number, Vector3, number];
export declare function getNthClosestVehicleNodeFavourDirection(x: number, y: number, z: number, desiredX: number, desiredY: number, desiredZ: number, nthClosest: number, outPosition: Vector3 | null, outHeading: number | null, nodeFlags: number, p10: number, p11: number): [boolean, Vector3, number];
export declare function getVehicleNodeProperties(x: number, y: number, z: number, density?: number | null, flags?: number | null): [boolean, number, number];
export declare function isVehicleNodeIdValid(vehicleNodeId: number): boolean;
export declare function getVehicleNodePosition(nodeId: number, outPosition?: Vector3 | null): [void, Vector3];
export declare function getVehicleNodeIsGpsAllowed(nodeID: number): boolean;
export declare function getVehicleNodeIsSwitchedOff(nodeID: number): boolean;
export declare function getClosestRoad(x: number, y: number, z: number, p3: number, p4: number, p5: Vector3 | null, p6: Vector3 | null, p7: any | null, p8: any | null, p9: number | null, p10: boolean): [boolean, Vector3, Vector3, any, any, number];
export declare function loadAllPathNodes(set: boolean): boolean;
export declare function setAllowStreamPrologueNodes(toggle: boolean): void;
export declare function setAllowStreamHeistIslandNodes(type: number): void;
export declare function areNodesLoadedForArea(x1: number, y1: number, x2: number, y2: number): boolean;
export declare function requestPathNodesInAreaThisFrame(x1: number, y1: number, x2: number, y2: number): boolean;
export declare function setRoadsBackToOriginal(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: any): void;
export declare function setRoadsBackToOriginalInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, p7: any): void;
export declare function setAmbientPedRangeMultiplierThisFrame(multiplier: number): void;
export declare function adjustAmbientPedSpawnDensitiesThisFrame(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
export declare function setPedPathsBackToOriginal(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: any): void;
export declare function getRandomVehicleNode(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, p6: boolean, outPosition?: Vector3 | null, nodeId?: number | null): [boolean, Vector3, number];
export declare function getSpawnCoordsForVehicleNode(nodeAddress: number, towardsCoorsX: number, towardsCoorsY: number, towardsCoorsZ: number, centrePoint?: Vector3 | null, heading?: number | null): [Vector3, Vector3, number];
export declare function getStreetNameAtCoord(x: number, y: number, z: number, streetName?: number | null, crossingRoad?: number | null): [void, number, number];
export declare function generateDirectionsToCoord(x: number, y: number, z: number, p3: boolean, direction?: number | null, p5?: number | null, distToNxJunction?: number | null): [number, number, number, number];
export declare function setIgnoreNoGpsFlag(toggle: boolean): void;
export declare function setIgnoreNoGpsFlagUntilFirstNormalNode(toggle: boolean): void;
export declare function setGpsDisabledZone(x1: number, y1: number, z1: number, x2: number, y2: number, z3: number): void;
export declare function getGpsBlipRouteLength(): number;
export declare function getPosAlongGpsTypeRoute(result: Vector3 | null, p1: boolean, p2: number, p3: number): [boolean, Vector3];
export declare function getGpsBlipRouteFound(): boolean;
export declare function getRoadBoundaryUsingHeading(x: number, y: number, z: number, heading: number, outPosition?: Vector3 | null): [boolean, Vector3];
export declare function getPositionBySideOfRoad(x: number, y: number, z: number, p3: number, outPosition?: Vector3 | null): [boolean, Vector3];
export declare function isPointOnRoad(x: number, y: number, z: number, vehicle: Vehicle | number): boolean;
export declare function getNextGpsDisabledZoneIndex(): number;
export declare function setGpsDisabledZoneAtIndex(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, index: number): void;
export declare function clearGpsDisabledZoneAtIndex(index: number): void;
export declare function addNavmeshRequiredRegion(x: number, y: number, radius: number): void;
export declare function removeNavmeshRequiredRegions(): void;
export declare function isNavmeshRequiredRegionInUse(): boolean;
export declare function disableNavmeshInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, toggle: boolean): void;
export declare function areAllNavmeshRegionsLoaded(): boolean;
export declare function isNavmeshLoadedInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
export declare function getNumNavmeshesExistingInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
export declare function addNavmeshBlockingObject(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: boolean, p8: any): number;
export declare function updateNavmeshBlockingObject(p0: any, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: any): void;
export declare function removeNavmeshBlockingObject(p0: any): void;
export declare function doesNavmeshBlockingObjectExist(p0: any): boolean;
export declare function getApproxHeightForPoint(x: number, y: number): number;
export declare function getApproxHeightForArea(x1: number, y1: number, x2: number, y2: number): number;
export declare function getApproxFloorForPoint(x: number, y: number): number;
export declare function getApproxFloorForArea(x1: number, y1: number, x2: number, y2: number): number;
export declare function calculateTravelDistanceBetweenPoints(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
export declare function createPed(pedType: number, modelHash: number, x: number, y: number, z: number, heading: number, isNetwork: boolean, bScriptHostPed: boolean): number;
export declare function deletePed(ped?: Ped | Player | LocalPlayer | number | null): [void, number];
export declare function clonePed(ped: Ped | Player | LocalPlayer | number, isNetwork: boolean, bScriptHostPed: boolean, copyHeadBlendFlag: boolean): number;
export declare function clonePedAlt(ped: Ped | Player | LocalPlayer | number, isNetwork: boolean, bScriptHostPed: boolean, copyHeadBlendFlag: boolean, p4: boolean): number;
export declare function clonePedToTarget(ped: Ped | Player | LocalPlayer | number, targetPed: Ped | Player | LocalPlayer | number): void;
export declare function clonePedToTargetAlt(ped: Ped | Player | LocalPlayer | number, targetPed: Ped | Player | LocalPlayer | number, p2: boolean): void;
export declare function isPedInVehicle(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, atGetIn: boolean): boolean;
export declare function isPedInModel(ped: Ped | Player | LocalPlayer | number, modelHash: number): boolean;
export declare function isPedInAnyVehicle(ped: Ped | Player | LocalPlayer | number, atGetIn: boolean): boolean;
export declare function isCopPedInArea3d(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
export declare function isPedInjured(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedHurt(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedFatallyInjured(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedDeadOrDying(ped: Ped | Player | LocalPlayer | number, p1: boolean): boolean;
export declare function isConversationPedDead(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedAimingFromCover(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedReloading(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedAPlayer(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function createPedInsideVehicle(vehicle: Vehicle | number, pedType: number, modelHash: number, seat: number, isNetwork: boolean, bScriptHostPed: boolean): number;
export declare function setPedDesiredHeading(ped: Ped | Player | LocalPlayer | number, heading: number): void;
export declare function forceAllHeadingValuesToAlign(ped: Ped | Player | LocalPlayer | number): void;
export declare function isPedFacingPed(ped: Ped | Player | LocalPlayer | number, otherPed: Ped | Player | LocalPlayer | number, angle: number): boolean;
export declare function isPedInMeleeCombat(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedStopped(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedShootingInArea(ped: Ped | Player | LocalPlayer | number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p7: boolean, p8: boolean): boolean;
export declare function isAnyPedShootingInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean): boolean;
export declare function isPedShooting(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedAccuracy(ped: Ped | Player | LocalPlayer | number, accuracy: number): void;
export declare function getPedAccuracy(ped: Ped | Player | LocalPlayer | number): number;
export declare function setAmbientLawPedAccuracyModifier(multiplier: number): void;
export declare function isPedModel(ped: Ped | Player | LocalPlayer | number, modelHash: number): boolean;
export declare function explodePedHead(ped: Ped | Player | LocalPlayer | number, weaponHash: number): void;
export declare function removePedElegantly(ped?: Ped | Player | LocalPlayer | number | null): [void, number];
export declare function addArmourToPed(ped: Ped | Player | LocalPlayer | number, amount: number): void;
export declare function setPedArmour(ped: Ped | Player | LocalPlayer | number, amount: number): void;
export declare function setPedIntoVehicle(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, seatIndex: number): void;
export declare function setPedAllowVehiclesOverride(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function canCreateRandomPed(p0: boolean): boolean;
export declare function createRandomPed(posX: number, posY: number, posZ: number): number;
export declare function createRandomPedAsDriver(vehicle: Vehicle | number, returnHandle: boolean): number;
export declare function canCreateRandomDriver(): boolean;
export declare function canCreateRandomBikeRider(): boolean;
export declare function setPedMoveAnimsBlendOut(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedCanBeDraggedOut(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedAllowHurtCombatForAllMissionPeds(toggle: boolean): void;
export declare function isPedMale(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedHuman(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function getVehiclePedIsIn(ped: Ped | Player | LocalPlayer | number, includeEntering: boolean): number;
export declare function resetPedLastVehicle(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedDensityMultiplierThisFrame(multiplier: number): void;
export declare function setScenarioPedDensityMultiplierThisFrame(p0: number, p1: number): void;
export declare function suppressAmbientPedAggressiveCleanupThisFrame(): void;
export declare function setScriptedConversionCoordThisFrame(x: number, y: number, z: number): void;
export declare function setPedNonCreationArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): void;
export declare function clearPedNonCreationArea(): void;
export declare function instantlyFillPedPopulation(): void;
export declare function isPedOnMount(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function getMount(ped: Ped | Player | LocalPlayer | number): number;
export declare function isPedOnVehicle(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedOnSpecificVehicle(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number): boolean;
export declare function setPedMoney(ped: Ped | Player | LocalPlayer | number, amount: number): void;
export declare function getPedMoney(ped: Ped | Player | LocalPlayer | number): number;
export declare function setHealthSnacksCarriedByAllNewPeds(p0: number, p1: any): void;
export declare function setAmbientPedsDropMoney(p0: boolean): void;
export declare function setBlockingOfNonTemporaryEventsForAmbientPedsThisFrame(p0: boolean): void;
export declare function setPedSuffersCriticalHits(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedUpperBodyDamageOnly(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function isPedSittingInVehicle(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number): boolean;
export declare function isPedSittingInAnyVehicle(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedOnFoot(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedOnAnyBike(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedPlantingBomb(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function getDeadPedPickupCoords(ped: Ped | Player | LocalPlayer | number, p1: number, p2: number): Vector3;
export declare function isPedInAnyBoat(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedInAnySub(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedInAnyHeli(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedInAnyPlane(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedInFlyingVehicle(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedDiesInWater(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function getPedDiesInWater(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedDiesInSinkingVehicle(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function getPedArmour(ped: Ped | Player | LocalPlayer | number): number;
export declare function setPedStayInVehicleWhenJacked(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedCanBeShotInVehicle(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function getPedLastDamageBone(ped: Ped | Player | LocalPlayer | number, outBone?: number | null): [boolean, number];
export declare function clearPedLastDamageBone(ped: Ped | Player | LocalPlayer | number): void;
export declare function setAiWeaponDamageModifier(value: number): void;
export declare function resetAiWeaponDamageModifier(): void;
export declare function setAiMeleeWeaponDamageModifier(modifier: number): void;
export declare function resetAiMeleeWeaponDamageModifier(): void;
export declare function setTreatAsAmbientPedForDriverLockon(ped: Ped | Player | LocalPlayer | number, p1: boolean): void;
export declare function setPedCanBeTargetted(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedCanBeTargettedByTeam(ped: Ped | Player | LocalPlayer | number, team: number, toggle: boolean): void;
export declare function setPedCanBeTargettedByPlayer(ped: Ped | Player | LocalPlayer | number, player: Player | number, toggle: boolean): void;
export declare function setAllowLockonToPedIfFriendly(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setUseCameraHeadingForDesiredDirectionLockOnTest(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function isPedInAnyPoliceVehicle(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function forcePedToOpenParachute(ped: Ped | Player | LocalPlayer | number): void;
export declare function isPedInParachuteFreeFall(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedFalling(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedJumping(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedLanding(p0: any): boolean;
export declare function isPedDoingABeastJump(p0: any): boolean;
export declare function isPedClimbing(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedVaulting(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedDiving(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedJumpingOutOfVehicle(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedOpeningDoor(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function getPedParachuteState(ped: Ped | Player | LocalPlayer | number): number;
export declare function getPedParachuteLandingType(ped: Ped | Player | LocalPlayer | number): number;
export declare function setPedParachuteTintIndex(ped: Ped | Player | LocalPlayer | number, tintIndex: number): void;
export declare function getPedParachuteTintIndex(ped: Ped | Player | LocalPlayer | number, outTintIndex?: number | null): [void, number];
export declare function setPedReserveParachuteTintIndex(ped: Ped | Player | LocalPlayer | number, p1: any): void;
export declare function createParachuteBagObject(ped: Ped | Player | LocalPlayer | number, p1: boolean, p2: boolean): number;
export declare function setPedDucking(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function isPedDucking(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedInAnyTaxi(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedIdRange(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function setPedHighlyPerceptive(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setCopPerceptionOverrides(seeingRange: number, seeingRangePeripheral: number, hearingRange: number, visualFieldMinAzimuthAngle: number, visualFieldMaxAzimuthAngle: number, fieldOfGazeMaxAngle: number, p6: number): void;
export declare function setPedInjuredOnGroundBehaviour(ped: Ped | Player | LocalPlayer | number, p1: number): void;
export declare function disablePedInjuredOnGroundBehaviour(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedSeeingRange(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function setPedHearingRange(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function setPedVisualFieldMinAngle(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function setPedVisualFieldMaxAngle(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function setPedVisualFieldMinElevationAngle(ped: Ped | Player | LocalPlayer | number, angle: number): void;
export declare function setPedVisualFieldMaxElevationAngle(ped: Ped | Player | LocalPlayer | number, angle: number): void;
export declare function setPedVisualFieldPeripheralRange(ped: Ped | Player | LocalPlayer | number, range: number): void;
export declare function setPedVisualFieldCenterAngle(ped: Ped | Player | LocalPlayer | number, angle: number): void;
export declare function getPedVisualFieldCenterAngle(ped: Ped | Player | LocalPlayer | number): number;
export declare function setPedStealthMovement(ped: Ped | Player | LocalPlayer | number, p1: boolean, action: string | null): void;
export declare function getPedStealthMovement(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function createGroup(unused: number): number;
export declare function setPedAsGroupLeader(ped: Ped | Player | LocalPlayer | number, groupId: number): void;
export declare function setPedAsGroupMember(ped: Ped | Player | LocalPlayer | number, groupId: number): void;
export declare function setPedCanTeleportToGroupLeader(pedHandle: Ped | Player | LocalPlayer | number, groupHandle: number, toggle: boolean): void;
export declare function removeGroup(groupId: number): void;
export declare function removePedFromGroup(ped: Ped | Player | LocalPlayer | number): void;
export declare function isPedGroupMember(ped: Ped | Player | LocalPlayer | number, groupId: number): boolean;
export declare function isPedHangingOnToVehicle(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setGroupSeparationRange(groupHandle: number, separationRange: number): void;
export declare function setPedMinGroundTimeForStungun(ped: Ped | Player | LocalPlayer | number, ms: number): void;
export declare function isPedProne(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedInCombat(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number): boolean;
export declare function getPedTargetFromCombatPed(ped: Ped | Player | LocalPlayer | number, p1: any): number;
export declare function canPedInCombatSeeTarget(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedDoingDriveby(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedJacking(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedBeingJacked(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedBeingStunned(ped: Ped | Player | LocalPlayer | number, p1: number): boolean;
export declare function getPedsJacker(ped: Ped | Player | LocalPlayer | number): number;
export declare function getJackTarget(ped: Ped | Player | LocalPlayer | number): number;
export declare function isPedFleeing(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedInCover(ped: Ped | Player | LocalPlayer | number, exceptUseWeapon: boolean): boolean;
export declare function isPedInCoverFacingLeft(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedInHighCover(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedGoingIntoCover(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedPinnedDown(ped: Ped | Player | LocalPlayer | number, pinned: boolean, i: number): boolean;
export declare function hasPedClearLosToEntity(ped: Ped | Player | LocalPlayer | number, entity: Entity | number, x: number, y: number, z: number, p5: number, p6: boolean, p7: boolean): boolean;
export declare function getSeatPedIsTryingToEnter(ped: Ped | Player | LocalPlayer | number): number;
export declare function getVehiclePedIsTryingToEnter(ped: Ped | Player | LocalPlayer | number): number;
export declare function getPedSourceOfDeath(ped: Ped | Player | LocalPlayer | number): number;
export declare function getPedCauseOfDeath(ped: Ped | Player | LocalPlayer | number): number;
export declare function getPedTimeOfDeath(ped: Ped | Player | LocalPlayer | number): number;
export declare function countPedsInCombatWithTarget(ped: Ped | Player | LocalPlayer | number): number;
export declare function countPedsInCombatWithTargetWithinRadius(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, radius: number): number;
export declare function setPedRelationshipGroupDefaultHash(ped: Ped | Player | LocalPlayer | number, hash: number): void;
export declare function setPedRelationshipGroupHash(ped: Ped | Player | LocalPlayer | number, hash: number): void;
export declare function setRelationshipBetweenGroups(relationship: number, group1: number, group2: number): void;
export declare function clearRelationshipBetweenGroups(relationship: number, group1: number, group2: number): void;
export declare function addRelationshipGroup(name: string | null, groupHash?: number | null): [boolean, number];
export declare function removeRelationshipGroup(groupHash: number): void;
export declare function doesRelationshipGroupExist(groupHash: number): boolean;
export declare function getRelationshipBetweenPeds(ped1: Ped | Player | LocalPlayer | number, ped2: Ped | Player | LocalPlayer | number): number;
export declare function getPedRelationshipGroupDefaultHash(ped: Ped | Player | LocalPlayer | number): number;
export declare function getPedRelationshipGroupHash(ped: Ped | Player | LocalPlayer | number): number;
export declare function getRelationshipBetweenGroups(group1: number, group2: number): number;
export declare function setRelationshipGroupAffectsWantedLevel(group: number, p1: boolean): void;
export declare function tellGroupPedsInAreaToAttack(ped: Ped | Player | LocalPlayer | number, p1: any, p2: number, hash: number, p4: any, p5: any): void;
export declare function setPedCanBeTargetedWithoutLos(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedToInformRespectedFriends(ped: Ped | Player | LocalPlayer | number, radius: number, maxFriends: number): void;
export declare function isPedRespondingToEvent(ped: Ped | Player | LocalPlayer | number, event: any): boolean;
export declare function getPosFromFiredEvent(ped: Ped | Player | LocalPlayer | number, eventType: number, outData?: any | null): [boolean, any];
export declare function setPedFiringPattern(ped: Ped | Player | LocalPlayer | number, patternHash: number): void;
export declare function setPedShootRate(ped: Ped | Player | LocalPlayer | number, shootRate: number): void;
export declare function setCombatFloat(ped: Ped | Player | LocalPlayer | number, combatType: number, p2: number): void;
export declare function getCombatFloat(ped: Ped | Player | LocalPlayer | number, p1: number): number;
export declare function getGroupSize(groupID: number, p1?: any | null, sizeInMembers?: number | null): [void, any, number];
export declare function doesGroupExist(groupId: number): boolean;
export declare function getPedGroupIndex(ped: Ped | Player | LocalPlayer | number): number;
export declare function isPedInGroup(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function getPlayerPedIsFollowing(ped: Ped | Player | LocalPlayer | number): number;
export declare function setGroupFormation(groupId: number, formationType: number): void;
export declare function setGroupFormationSpacing(groupId: number, x: number, y: number, z: number): void;
export declare function resetGroupFormationDefaultSpacing(groupHandle: number): void;
export declare function getVehiclePedIsUsing(ped: Ped | Player | LocalPlayer | number): number;
export declare function getVehiclePedIsEntering(ped: Ped | Player | LocalPlayer | number): number;
export declare function setPedGravity(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function applyDamageToPed(ped: Ped | Player | LocalPlayer | number, damageAmount: number, p2: boolean, p3: any, weaponType: number): void;
export declare function getTimePedDamagedByWeapon(ped: Ped | Player | LocalPlayer | number, weaponHash: number): number;
export declare function setPedAllowedToDuck(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedNeverLeavesGroup(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function getPedType(ped: Ped | Player | LocalPlayer | number): number;
export declare function setPedAsCop(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedHealthPendingLastDamageEventOverrideFlag(toggle: boolean): void;
export declare function setPedMaxHealth(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function getPedMaxHealth(ped: Ped | Player | LocalPlayer | number): number;
export declare function setPedMaxTimeInWater(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function setPedMaxTimeUnderwater(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function setCorpseRagdollFriction(ped: Ped | Player | LocalPlayer | number, p1: number): void;
export declare function setPedVehicleForcedSeatUsage(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, seatIndex: number, flags: number, p4: any): void;
export declare function clearAllPedVehicleForcedSeatUsage(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedCanBeKnockedOffBike(p0: any, p1: any): void;
export declare function setPedCanBeKnockedOffVehicle(ped: Ped | Player | LocalPlayer | number, state: number): void;
export declare function canKnockPedOffVehicle(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function knockPedOffVehicle(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedCoordsNoGang(ped: Ped | Player | LocalPlayer | number, posX: number, posY: number, posZ: number): void;
export declare function getPedAsGroupMember(groupID: number, memberNumber: number): number;
export declare function getPedAsGroupLeader(groupID: number): number;
export declare function setPedKeepTask(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedAllowMinorReactionsAsMissionPed(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function isPedSwimming(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedSwimmingUnderWater(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedCoordsKeepVehicle(ped: Ped | Player | LocalPlayer | number, posX: number, posY: number, posZ: number): void;
export declare function setPedDiesInVehicle(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setCreateRandomCops(toggle: boolean): void;
export declare function setCreateRandomCopsNotOnScenarios(toggle: boolean): void;
export declare function setCreateRandomCopsOnScenarios(toggle: boolean): void;
export declare function canCreateRandomCops(): boolean;
export declare function setPedAsEnemy(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedCanSmashGlass(ped: Ped | Player | LocalPlayer | number, p1: boolean, p2: boolean): void;
export declare function isPedInAnyTrain(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedGettingIntoAVehicle(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedTryingToEnterALockedVehicle(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setEnableHandcuffs(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setEnableBoundAnkles(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setEnableScuba(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setCanAttackFriendly(ped: Ped | Player | LocalPlayer | number, toggle: boolean, p2: boolean): void;
export declare function getPedAlertness(ped: Ped | Player | LocalPlayer | number): number;
export declare function setPedAlertness(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function setPedGetOutUpsideDownVehicle(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedMovementClipset(ped: Ped | Player | LocalPlayer | number, clipSet: string | null, transitionSpeed: number): void;
export declare function resetPedMovementClipset(ped: Ped | Player | LocalPlayer | number, p1: number): void;
export declare function setPedStrafeClipset(ped: Ped | Player | LocalPlayer | number, clipSet: string | null): void;
export declare function resetPedStrafeClipset(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedWeaponMovementClipset(ped: Ped | Player | LocalPlayer | number, clipSet: string | null): void;
export declare function resetPedWeaponMovementClipset(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedDriveByClipsetOverride(ped: Ped | Player | LocalPlayer | number, clipset: string | null): void;
export declare function clearPedDriveByClipsetOverride(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedMotionInCoverClipsetOverride(ped: Ped | Player | LocalPlayer | number, p1: string | null): void;
export declare function clearPedMotionInCoverClipsetOverride(ped: Ped | Player | LocalPlayer | number): void;
export declare function clearPedFallUpperBodyClipsetOverride(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedInVehicleContext(ped: Ped | Player | LocalPlayer | number, context: number): void;
export declare function resetPedInVehicleContext(ped: Ped | Player | LocalPlayer | number): void;
export declare function isScriptedScenarioPedUsingConditionalAnim(ped: Ped | Player | LocalPlayer | number, animDict: string | null, anim: string | null): boolean;
export declare function setPedAlternateWalkAnim(ped: Ped | Player | LocalPlayer | number, animDict: string | null, animName: string | null, p3: number, p4: boolean): void;
export declare function clearPedAlternateWalkAnim(ped: Ped | Player | LocalPlayer | number, p1: number): void;
export declare function setPedAlternateMovementAnim(ped: Ped | Player | LocalPlayer | number, stance: number, animDictionary: string | null, animationName: string | null, p4: number, p5: boolean): void;
export declare function clearPedAlternateMovementAnim(ped: Ped | Player | LocalPlayer | number, stance: number, p2: number): void;
export declare function setPedGestureGroup(ped: Ped | Player | LocalPlayer | number, animGroupGesture: string | null): void;
export declare function getAnimInitialOffsetPosition(animDict: string | null, animName: string | null, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p8: number, p9: number): Vector3;
export declare function getAnimInitialOffsetRotation(animDict: string | null, animName: string | null, x: number, y: number, z: number, xRot: number, yRot: number, zRot: number, p8: number, p9: number): Vector3;
export declare function getPedDrawableVariation(ped: Ped | Player | LocalPlayer | number, componentId: number): number;
export declare function getNumberOfPedDrawableVariations(ped: Ped | Player | LocalPlayer | number, componentId: number): number;
export declare function getPedTextureVariation(ped: Ped | Player | LocalPlayer | number, componentId: number): number;
export declare function getNumberOfPedTextureVariations(ped: Ped | Player | LocalPlayer | number, componentId: number, drawableId: number): number;
export declare function getNumberOfPedPropDrawableVariations(ped: Ped | Player | LocalPlayer | number, propId: number): number;
export declare function getNumberOfPedPropTextureVariations(ped: Ped | Player | LocalPlayer | number, propId: number, drawableId: number): number;
export declare function getPedPaletteVariation(ped: Ped | Player | LocalPlayer | number, componentId: number): number;
export declare function getMpOutfitDataFromMetadata(p0?: any | null, p1?: any | null): [boolean, any, any];
export declare function getFmMaleShopPedApparelItemIndex(p0: number): number;
export declare function getFmFemaleShopPedApparelItemIndex(p0: number): number;
export declare function isPedComponentVariationValid(ped: Ped | Player | LocalPlayer | number, componentId: number, drawableId: number, textureId: number): boolean;
export declare function setPedComponentVariation(ped: Ped | Player | LocalPlayer | number, componentId: number, drawableId: number, textureId: number, paletteId: number): void;
export declare function setPedRandomComponentVariation(ped: Ped | Player | LocalPlayer | number, p1: number): void;
export declare function setPedRandomProps(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedDefaultComponentVariation(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedBlendFromParents(ped: Ped | Player | LocalPlayer | number, p1: any, p2: any, p3: number, p4: number): void;
export declare function setPedHeadBlendData(ped: Ped | Player | LocalPlayer | number, shapeFirstID: number, shapeSecondID: number, shapeThirdID: number, skinFirstID: number, skinSecondID: number, skinThirdID: number, shapeMix: number, skinMix: number, thirdMix: number, isParent: boolean): void;
export declare function getPedHeadBlendData(ped: Ped | Player | LocalPlayer | number, headBlendData?: any | null): [boolean, any];
export declare function updatePedHeadBlendData(ped: Ped | Player | LocalPlayer | number, shapeMix: number, skinMix: number, thirdMix: number): void;
export declare function setHeadBlendEyeColor(ped: Ped | Player | LocalPlayer | number, index: number): void;
export declare function getHeadBlendEyeColor(ped: Ped | Player | LocalPlayer | number): number;
export declare function setPedHeadOverlay(ped: Ped | Player | LocalPlayer | number, overlayID: number, index: number, opacity: number): void;
export declare function getPedHeadOverlay(ped: Ped | Player | LocalPlayer | number, overlayID: number): number;
export declare function getPedHeadOverlayNum(overlayID: number): number;
export declare function setPedHeadOverlayTint(ped: Ped | Player | LocalPlayer | number, overlayID: number, colorType: number, colorID: number, secondColorID: number): void;
export declare function setPedHairTint(ped: Ped | Player | LocalPlayer | number, colorID: number, highlightColorID: number): void;
export declare function getNumPedHairTints(): number;
export declare function getNumPedMakeupTints(): number;
export declare function getPedHairTintColor(hairColorIndex: number, outR?: number | null, outG?: number | null, outB?: number | null): [void, number, number, number];
export declare function getPedMakeupTintColor(makeupColorIndex: number, outR?: number | null, outG?: number | null, outB?: number | null): [void, number, number, number];
export declare function isPedHairTintForCreator(colorId: number): boolean;
export declare function getDefaultSecondaryTintForCreator(colorId: number): number;
export declare function isPedLipstickTintForCreator(colorId: number): boolean;
export declare function isPedBlushTintForCreator(colorId: number): boolean;
export declare function isPedHairTintForBarber(colorID: number): boolean;
export declare function getDefaultSecondaryTintForBarber(colorID: number): number;
export declare function isPedLipstickTintForBarber(colorID: number): boolean;
export declare function isPedBlushTintForBarber(colorID: number): boolean;
export declare function isPedBlushFacepaintTintForBarber(colorId: number): boolean;
export declare function getTintIndexForLastGenHairTexture(modelHash: number, drawableId: number, textureId: number): number;
export declare function setPedMicroMorph(ped: Ped | Player | LocalPlayer | number, index: number, scale: number): void;
export declare function hasPedHeadBlendFinished(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function finalizeHeadBlend(ped: Ped | Player | LocalPlayer | number): void;
export declare function setHeadBlendPaletteColor(ped: Ped | Player | LocalPlayer | number, r: number, g: number, b: number, id: number): void;
export declare function disableHeadBlendPaletteColor(ped: Ped | Player | LocalPlayer | number): void;
export declare function getPedHeadBlendFirstIndex(type: number): number;
export declare function getPedHeadBlendNumHeads(type: number): number;
export declare function setPedPreloadVariationData(ped: Ped | Player | LocalPlayer | number, slot: number, drawableId: number, textureId: number): number;
export declare function hasPedPreloadVariationDataFinished(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function releasePedPreloadVariationData(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedPreloadPropData(ped: Ped | Player | LocalPlayer | number, componentId: number, drawableId: number, TextureId: number): number;
export declare function hasPedPreloadPropDataFinished(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function releasePedPreloadPropData(ped: Ped | Player | LocalPlayer | number): void;
export declare function getPedPropIndex(ped: Ped | Player | LocalPlayer | number, componentId: number, p2: any): number;
export declare function setPedPropIndex(ped: Ped | Player | LocalPlayer | number, componentId: number, drawableId: number, TextureId: number, attach: boolean, p5: any): void;
export declare function knockOffPedProp(ped: Ped | Player | LocalPlayer | number, p1: boolean, p2: boolean, p3: boolean, p4: boolean): void;
export declare function clearPedProp(ped: Ped | Player | LocalPlayer | number, propId: number, p2: any): void;
export declare function clearAllPedProps(ped: Ped | Player | LocalPlayer | number, p1: any): void;
export declare function dropAmbientProp(ped: Ped | Player | LocalPlayer | number): void;
export declare function getPedPropTextureIndex(ped: Ped | Player | LocalPlayer | number, componentId: number): number;
export declare function clearPedParachutePackVariation(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedScubaGearVariation(ped: Ped | Player | LocalPlayer | number): void;
export declare function clearPedScubaGearVariation(ped: Ped | Player | LocalPlayer | number): void;
export declare function isUsingPedScubaGearVariation(p0: any): boolean;
export declare function setBlockingOfNonTemporaryEvents(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedBoundsOrientation(ped: Ped | Player | LocalPlayer | number, p1: number, p2: number, x: number, y: number, z: number): void;
export declare function registerTarget(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number): void;
export declare function registerHatedTargetsAroundPed(ped: Ped | Player | LocalPlayer | number, radius: number): void;
export declare function getRandomPedAtCoord(x: number, y: number, z: number, xRadius: number, yRadius: number, zRadius: number, pedType: number): number;
export declare function getClosestPed(x: number, y: number, z: number, radius: number, p4: boolean, p5: boolean, outPed: Ped | Player | LocalPlayer | number | null, p7: boolean, p8: boolean, pedType: number): [boolean, number];
export declare function setScenarioPedsToBeReturnedByNextCommand(value: boolean): void;
export declare function getCanPedBeGrabbedByScript(ped: Ped | Player | LocalPlayer | number, p1: boolean, p2: boolean, p3: boolean, p4: boolean, p5: boolean, p6: boolean, p7: boolean, p8: any): boolean;
export declare function setDriverRacingModifier(driver: Ped | Player | LocalPlayer | number, modifier: number): void;
export declare function setDriverAbility(driver: Ped | Player | LocalPlayer | number, ability: number): void;
export declare function setDriverAggressiveness(driver: Ped | Player | LocalPlayer | number, aggressiveness: number): void;
export declare function canPedRagdoll(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedToRagdoll(ped: Ped | Player | LocalPlayer | number, time1: number, time2: number, ragdollType: number, p4: boolean, p5: boolean, p6: boolean): boolean;
export declare function setPedToRagdollWithFall(ped: Ped | Player | LocalPlayer | number, time: number, p2: number, ragdollType: number, x: number, y: number, z: number, velocity: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number): boolean;
export declare function setPedRagdollOnCollision(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function isPedRagdoll(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedRunningRagdollTask(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedRagdollForceFall(ped: Ped | Player | LocalPlayer | number): void;
export declare function resetPedRagdollTimer(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedCanRagdoll(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function isPedRunningMeleeTask(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedRunningMobilePhoneTask(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isMobilePhoneToPedEar(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setRagdollBlockingFlags(ped: Ped | Player | LocalPlayer | number, blockingFlag: number): void;
export declare function clearRagdollBlockingFlags(ped: Ped | Player | LocalPlayer | number, blockingFlag: number): void;
export declare function setPedAngledDefensiveArea(ped: Ped | Player | LocalPlayer | number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean, p9: boolean): void;
export declare function setPedSphereDefensiveArea(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, radius: number, p5: boolean, p6: boolean): void;
export declare function setPedDefensiveSphereAttachedToPed(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number, xOffset: number, yOffset: number, zOffset: number, radius: number, p6: boolean): void;
export declare function setPedDefensiveSphereAttachedToVehicle(ped: Ped | Player | LocalPlayer | number, target: Vehicle | number, xOffset: number, yOffset: number, zOffset: number, radius: number, p6: boolean): void;
export declare function setPedDefensiveAreaAttachedToPed(ped: Ped | Player | LocalPlayer | number, attachPed: Ped | Player | LocalPlayer | number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: boolean, p10: boolean): void;
export declare function setPedDefensiveAreaDirection(ped: Ped | Player | LocalPlayer | number, p1: number, p2: number, p3: number, p4: boolean): void;
export declare function removePedDefensiveArea(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function getPedDefensiveAreaPosition(ped: Ped | Player | LocalPlayer | number, p1: boolean): Vector3;
export declare function isPedDefensiveAreaActive(ped: Ped | Player | LocalPlayer | number, p1: boolean): boolean;
export declare function setPedPreferredCoverSet(ped: Ped | Player | LocalPlayer | number, itemSet: any): void;
export declare function removePedPreferredCoverSet(ped: Ped | Player | LocalPlayer | number): void;
export declare function reviveInjuredPed(ped: Ped | Player | LocalPlayer | number): void;
export declare function resurrectPed(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedNameDebug(ped: Ped | Player | LocalPlayer | number, name: string | null): void;
export declare function getPedExtractedDisplacement(ped: Ped | Player | LocalPlayer | number, worldSpace: boolean): Vector3;
export declare function setPedDiesWhenInjured(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedEnableWeaponBlocking(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function specialFunctionDoNotUse(ped: Ped | Player | LocalPlayer | number, p1: boolean): void;
export declare function resetPedVisibleDamage(ped: Ped | Player | LocalPlayer | number): void;
export declare function applyPedBloodDamageByZone(ped: Ped | Player | LocalPlayer | number, p1: any, p2: number, p3: number, p4: any): void;
export declare function applyPedBlood(ped: Ped | Player | LocalPlayer | number, boneIndex: number, xRot: number, yRot: number, zRot: number, woundType: string | null): void;
export declare function applyPedBloodByZone(ped: Ped | Player | LocalPlayer | number, p1: number, p2: number, p3: number, p4: string | null): void;
export declare function applyPedBloodSpecific(ped: Ped | Player | LocalPlayer | number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: string | null): void;
export declare function applyPedDamageDecal(ped: Ped | Player | LocalPlayer | number, damageZone: number, xOffset: number, yOffset: number, heading: number, scale: number, alpha: number, variation: number, fadeIn: boolean, decalName: string | null): void;
export declare function applyPedDamagePack(ped: Ped | Player | LocalPlayer | number, damagePack: string | null, damage: number, mult: number): void;
export declare function clearPedBloodDamage(ped: Ped | Player | LocalPlayer | number): void;
export declare function clearPedBloodDamageByZone(ped: Ped | Player | LocalPlayer | number, p1: number): void;
export declare function hidePedBloodDamageByZone(ped: Ped | Player | LocalPlayer | number, p1: any, p2: boolean): void;
export declare function clearPedDamageDecalByZone(ped: Ped | Player | LocalPlayer | number, p1: number, p2: string | null): void;
export declare function getPedDecorationsState(ped: Ped | Player | LocalPlayer | number): number;
export declare function markPedDecorationsAsClonedFromLocalPlayer(ped: Ped | Player | LocalPlayer | number, p1: boolean): void;
export declare function clearPedWetness(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedWetnessHeight(ped: Ped | Player | LocalPlayer | number, height: number): void;
export declare function setPedWetnessEnabledThisFrame(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedWetness(ped: Ped | Player | LocalPlayer | number, wetLevel: number): void;
export declare function clearPedEnvDirt(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedSweat(ped: Ped | Player | LocalPlayer | number, sweat: number): void;
export declare function addPedDecorationFromHashes(ped: Ped | Player | LocalPlayer | number, collection: number, overlay: number): void;
export declare function addPedDecorationFromHashesInCorona(ped: Ped | Player | LocalPlayer | number, collection: number, overlay: number): void;
export declare function getPedDecorationZoneFromHashes(collection: number, overlay: number): number;
export declare function clearPedDecorations(ped: Ped | Player | LocalPlayer | number): void;
export declare function clearPedDecorationsLeaveScars(ped: Ped | Player | LocalPlayer | number): void;
export declare function wasPedSkeletonUpdated(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function getPedBoneCoords(ped: Ped | Player | LocalPlayer | number, boneId: number, offsetX: number, offsetY: number, offsetZ: number): Vector3;
export declare function createNmMessage(startImmediately: boolean, messageId: number): void;
export declare function givePedNmMessage(ped: Ped | Player | LocalPlayer | number): void;
export declare function addScenarioBlockingArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: boolean, p7: boolean, p8: boolean, p9: boolean, p10: any): number;
export declare function removeScenarioBlockingAreas(): void;
export declare function removeScenarioBlockingArea(p0: any, p1: boolean): void;
export declare function setScenarioPedsSpawnInSphereArea(x: number, y: number, z: number, range: number, p4: number): void;
export declare function doesScenarioBlockingAreaExists(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): boolean;
export declare function isPedUsingScenario(ped: Ped | Player | LocalPlayer | number, scenario: string | null): boolean;
export declare function isPedUsingAnyScenario(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedPanicExitScenario(p0: any, p1: any, p2: any, p3: any): boolean;
export declare function toggleScenarioPedCowerInPlace(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function triggerPedScenarioPanicexittoflee(p0: any, p1: any, p2: any, p3: any): boolean;
export declare function setPedShouldPlayDirectedNormalScenarioExit(p0: any, p1: any, p2: any, p3: any): boolean;
export declare function setPedShouldPlayNormalScenarioExit(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedShouldPlayImmediateScenarioExit(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedShouldPlayFleeScenarioExit(ped: Ped | Player | LocalPlayer | number, p1: any, p2: any, p3: any): boolean;
export declare function setPedShouldIgnoreScenarioExitCollisionChecks(ped: Ped | Player | LocalPlayer | number, p1: boolean): void;
export declare function setPedShouldIgnoreScenarioNavChecks(p0: any, p1: boolean): void;
export declare function setPedShouldProbeForScenarioExitsInOneFrame(p0: any, p1: boolean): void;
export declare function isPedGesturing(p0: any): boolean;
export declare function resetFacialIdleAnim(ped: Ped | Player | LocalPlayer | number): void;
export declare function playFacialAnim(ped: Ped | Player | LocalPlayer | number, animName: string | null, animDict: string | null): void;
export declare function setFacialClipset(ped: Ped | Player | LocalPlayer | number, animDict: string | null): void;
export declare function setFacialIdleAnimOverride(ped: Ped | Player | LocalPlayer | number, animName: string | null, animDict: string | null): void;
export declare function clearFacialIdleAnimOverride(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedCanPlayGestureAnims(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedCanPlayVisemeAnims(ped: Ped | Player | LocalPlayer | number, toggle: boolean, p2: boolean): void;
export declare function setPedIsIgnoredByAutoOpenDoors(ped: Ped | Player | LocalPlayer | number, p1: boolean): void;
export declare function setPedCanPlayAmbientAnims(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedCanPlayAmbientBaseAnims(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function triggerIdleAnimationOnPed(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedCanArmIk(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedCanHeadIk(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedCanLegIk(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedCanTorsoIk(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedCanTorsoReactIk(ped: Ped | Player | LocalPlayer | number, p1: boolean): void;
export declare function setPedCanTorsoVehicleIk(ped: Ped | Player | LocalPlayer | number, p1: boolean): void;
export declare function setPedCanUseAutoConversationLookat(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function isPedHeadtrackingPed(ped1: Ped | Player | LocalPlayer | number, ped2: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedHeadtrackingEntity(ped: Ped | Player | LocalPlayer | number, entity: Entity | number): boolean;
export declare function setPedPrimaryLookat(ped: Ped | Player | LocalPlayer | number, lookAt: Ped | Player | LocalPlayer | number): void;
export declare function setPedClothPinFrames(p0: any, p1: any): void;
export declare function setPedClothPackageIndex(p0: any, p1: any): void;
export declare function setPedClothProne(p0: any, p1: boolean): void;
export declare function setPedConfigFlag(ped: Ped | Player | LocalPlayer | number, flagId: number, value: boolean): void;
export declare function setPedResetFlag(ped: Ped | Player | LocalPlayer | number, flagId: number, doReset: boolean): void;
export declare function getPedConfigFlag(ped: Ped | Player | LocalPlayer | number, flagId: number, p2: boolean): boolean;
export declare function getPedResetFlag(ped: Ped | Player | LocalPlayer | number, flagId: number): boolean;
export declare function setPedGroupMemberPassengerIndex(ped: Ped | Player | LocalPlayer | number, index: number): void;
export declare function setPedCanEvasiveDive(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function isPedEvasiveDiving(ped: Ped | Player | LocalPlayer | number, evadingEntity?: Entity | number | null): [boolean, number];
export declare function setPedShootsAtCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, toggle: boolean): void;
export declare function setPedModelIsSuppressed(modelHash: number, toggle: boolean): void;
export declare function stopAnyPedModelBeingSuppressed(): void;
export declare function setPedCanBeTargetedWhenInjured(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedGeneratesDeadBodyEvents(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function blockPedFromGeneratingDeadBodyEventsWhenDead(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedWillOnlyAttackWantedPlayer(p0: any, p1: any): void;
export declare function setPedCanRagdollFromPlayerImpact(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function givePedHelmet(ped: Ped | Player | LocalPlayer | number, cannotRemove: boolean, helmetFlag: number, textureIndex: number): void;
export declare function removePedHelmet(ped: Ped | Player | LocalPlayer | number, instantly: boolean): void;
export declare function isPedTakingOffHelmet(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedHelmet(ped: Ped | Player | LocalPlayer | number, canWearHelmet: boolean): void;
export declare function setPedHelmetFlag(ped: Ped | Player | LocalPlayer | number, helmetFlag: number): void;
export declare function setPedHelmetPropIndex(ped: Ped | Player | LocalPlayer | number, propIndex: number, p2: boolean): void;
export declare function setPedHelmetVisorPropIndices(ped: Ped | Player | LocalPlayer | number, p1: boolean, p2: number, p3: number): void;
export declare function isPedHelmetVisorUp(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedHelmetTextureIndex(ped: Ped | Player | LocalPlayer | number, textureIndex: number): void;
export declare function isPedWearingHelmet(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function clearPedStoredHatProp(ped: Ped | Player | LocalPlayer | number): void;
export declare function getPedHelmetStoredHatPropIndex(ped: Ped | Player | LocalPlayer | number): number;
export declare function getPedHelmetStoredHatTexIndex(ped: Ped | Player | LocalPlayer | number): number;
export declare function isCurrentHeadPropAHelmet(p0: any): boolean;
export declare function setPedToLoadCover(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedCanCowerInCover(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedCanPeekInCover(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedPlaysHeadOnHornAnimWhenDiesInVehicle(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedLegIkMode(ped: Ped | Player | LocalPlayer | number, mode: number): void;
export declare function setPedMotionBlur(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedCanSwitchWeapon(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedDiesInstantlyInWater(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setLadderClimbInputState(ped: Ped | Player | LocalPlayer | number, p1: number): void;
export declare function stopPedWeaponFiringWhenDropped(ped: Ped | Player | LocalPlayer | number): void;
export declare function setScriptedAnimSeatOffset(ped: Ped | Player | LocalPlayer | number, p1: number): void;
export declare function setPedCombatMovement(ped: Ped | Player | LocalPlayer | number, combatMovement: number): void;
export declare function getPedCombatMovement(ped: Ped | Player | LocalPlayer | number): number;
export declare function setPedCombatAbility(ped: Ped | Player | LocalPlayer | number, abilityLevel: number): void;
export declare function setPedCombatRange(ped: Ped | Player | LocalPlayer | number, combatRange: number): void;
export declare function getPedCombatRange(ped: Ped | Player | LocalPlayer | number): number;
export declare function setPedCombatAttributes(ped: Ped | Player | LocalPlayer | number, attributeId: number, enabled: boolean): void;
export declare function setPedTargetLossResponse(ped: Ped | Player | LocalPlayer | number, responseType: number): void;
export declare function isPedPerformingMeleeAction(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedPerformingStealthKill(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedPerformingACounterAttack(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedBeingStealthKilled(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function getMeleeTargetForPed(ped: Ped | Player | LocalPlayer | number): number;
export declare function wasPedKilledByStealth(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function wasPedKilledByTakedown(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function wasPedKnockedOut(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedFleeAttributes(ped: Ped | Player | LocalPlayer | number, attributeFlags: number, enable: boolean): void;
export declare function setPedCowerHash(ped: Ped | Player | LocalPlayer | number, p1: string | null): void;
export declare function setPedSteersAroundDeadBodies(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedSteersAroundPeds(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedSteersAroundObjects(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedSteersAroundVehicles(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedIsAvoidedByOthers(p0: any, p1: boolean): void;
export declare function setPedIncreasedAvoidanceRadius(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedBlocksPathingWhenDead(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedNoTimeDelayBeforeShot(p0: any): void;
export declare function isAnyPedNearPoint(x: number, y: number, z: number, radius: number): boolean;
export declare function forcePedAiAndAnimationUpdate(ped: Ped | Player | LocalPlayer | number, p1: boolean, p2: boolean): void;
export declare function isPedHeadingTowardsPosition(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, p4: number): boolean;
export declare function requestPedVisibilityTracking(ped: Ped | Player | LocalPlayer | number): void;
export declare function requestPedVehicleVisibilityTracking(ped: Ped | Player | LocalPlayer | number, p1: boolean): void;
export declare function requestPedRestrictedVehicleVisibilityTracking(ped: Ped | Player | LocalPlayer | number, p1: boolean): void;
export declare function requestPedUseSmallBboxVisibilityTracking(ped: Ped | Player | LocalPlayer | number, p1: boolean): void;
export declare function isTrackedPedVisible(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function getTrackedPedPixelcount(ped: Ped | Player | LocalPlayer | number): number;
export declare function isPedTracked(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function hasPedReceivedEvent(ped: Ped | Player | LocalPlayer | number, eventId: number): boolean;
export declare function canPedSeeHatedPed(ped1: Ped | Player | LocalPlayer | number, ped2: Ped | Player | LocalPlayer | number): boolean;
export declare function canPedShuffleToOrFromTurretSeat(ped: Ped | Player | LocalPlayer | number, p1?: number | null): [boolean, number];
export declare function canPedShuffleToOrFromExtraSeat(ped: Ped | Player | LocalPlayer | number, p1?: number | null): [boolean, number];
export declare function getPedBoneIndex(ped: Ped | Player | LocalPlayer | number, boneId: number): number;
export declare function getPedRagdollBoneIndex(ped: Ped | Player | LocalPlayer | number, bone: number): number;
export declare function setPedEnveffScale(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function getPedEnveffScale(ped: Ped | Player | LocalPlayer | number): number;
export declare function setEnablePedEnveffScale(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedEnveffCpvAdd(ped: Ped | Player | LocalPlayer | number, p1: number): void;
export declare function setPedEnveffColorModulator(ped: Ped | Player | LocalPlayer | number, p1: number, p2: number, p3: number): void;
export declare function setPedEmissiveScale(ped: Ped | Player | LocalPlayer | number, intensity: number): void;
export declare function getPedEmissiveScale(ped: Ped | Player | LocalPlayer | number): number;
export declare function isPedShaderReady(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedEnableCrewEmblem(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function requestRagdollBoundsUpdate(p0: any, p1: any): void;
export declare function setPedAoBlobRendering(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function isPedSheltered(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function createSynchronizedScene(x: number, y: number, z: number, roll: number, pitch: number, yaw: number, p6: number): number;
export declare function createSynchronizedSceneAtMapObject(x: number, y: number, z: number, radius: number, object: number): number;
export declare function isSynchronizedSceneRunning(sceneId: number): boolean;
export declare function setSynchronizedSceneOrigin(sceneID: number, x: number, y: number, z: number, roll: number, pitch: number, yaw: number, p7: boolean): void;
export declare function setSynchronizedScenePhase(sceneID: number, phase: number): void;
export declare function getSynchronizedScenePhase(sceneID: number): number;
export declare function setSynchronizedSceneRate(sceneID: number, rate: number): void;
export declare function getSynchronizedSceneRate(sceneID: number): number;
export declare function setSynchronizedSceneLooped(sceneID: number, toggle: boolean): void;
export declare function isSynchronizedSceneLooped(sceneID: number): boolean;
export declare function setSynchronizedSceneHoldLastFrame(sceneID: number, toggle: boolean): void;
export declare function isSynchronizedSceneHoldLastFrame(sceneID: number): boolean;
export declare function attachSynchronizedSceneToEntity(sceneID: number, entity: Entity | number, boneIndex: number): void;
export declare function detachSynchronizedScene(sceneID: number): void;
export declare function takeOwnershipOfSynchronizedScene(scene: number): void;
export declare function forcePedMotionState(ped: Ped | Player | LocalPlayer | number, motionStateHash: number, p2: boolean, p3: number, p4: boolean): boolean;
export declare function getPedCurrentMoveBlendRatio(ped: Ped | Player | LocalPlayer | number, speedX?: number | null, speedY?: number | null): [boolean, number, number];
export declare function setPedMaxMoveBlendRatio(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function setPedMinMoveBlendRatio(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function setPedMoveRateOverride(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function setPedMoveRateInWaterOverride(ped: Ped | Player | LocalPlayer | number, p1: number): void;
export declare function pedHasSexinessFlagSet(ped: Ped | Player | LocalPlayer | number, sexinessFlag: number): boolean;
export declare function getPedNearbyVehicles(ped: Ped | Player | LocalPlayer | number, sizeAndVehs?: any | null): [number, any];
export declare function getPedNearbyPeds(ped: Ped | Player | LocalPlayer | number, sizeAndPeds: any | null, ignore: number): [number, any];
export declare function haveAllStreamingRequestsCompleted(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedUsingActionMode(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedUsingActionMode(ped: Ped | Player | LocalPlayer | number, p1: boolean, p2: number, action: string | null): void;
export declare function setMovementModeOverride(ped: Ped | Player | LocalPlayer | number, name: string | null): void;
export declare function setPedCapsule(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function registerPedheadshot(ped: Ped | Player | LocalPlayer | number): number;
export declare function registerPedheadshotHires(ped: Ped | Player | LocalPlayer | number): number;
export declare function registerPedheadshotTransparent(ped: Ped | Player | LocalPlayer | number): number;
export declare function unregisterPedheadshot(id: number): void;
export declare function isPedheadshotValid(id: number): boolean;
export declare function isPedheadshotReady(id: number): boolean;
export declare function getPedheadshotTxdString(id: number): string | null;
export declare function requestPedheadshotImgUpload(id: number): boolean;
export declare function releasePedheadshotImgUpload(id: number): void;
export declare function isPedheadshotImgUploadAvailable(): boolean;
export declare function hasPedheadshotImgUploadFailed(): boolean;
export declare function hasPedheadshotImgUploadSucceeded(): boolean;
export declare function setPedHeatscaleOverride(ped: Ped | Player | LocalPlayer | number, heatScale: number): void;
export declare function disablePedHeatscaleOverride(ped: Ped | Player | LocalPlayer | number): void;
export declare function spawnpointsStartSearch(p0: number, p1: number, p2: number, p3: number, p4: number, interiorFlags: number, scale: number, duration: number): void;
export declare function spawnpointsStartSearchInAngledArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, width: number, interiorFlags: number, scale: number, duration: number): void;
export declare function spawnpointsCancelSearch(): void;
export declare function spawnpointsIsSearchActive(): boolean;
export declare function spawnpointsIsSearchComplete(): boolean;
export declare function spawnpointsIsSearchFailed(): boolean;
export declare function spawnpointsGetNumSearchResults(): number;
export declare function spawnpointsGetSearchResult(randomInt: number, x?: number | null, y?: number | null, z?: number | null): [void, number, number, number];
export declare function spawnpointsGetSearchResultFlags(p0: number, p1?: number | null): [void, number];
export declare function setIkTarget(ped: Ped | Player | LocalPlayer | number, ikIndex: number, entityLookAt: Entity | number, boneLookAt: number, offsetX: number, offsetY: number, offsetZ: number, p7: any, blendInDuration: number, blendOutDuration: number): void;
export declare function forceInstantLegIkSetup(ped: Ped | Player | LocalPlayer | number): void;
export declare function requestActionModeAsset(asset: string | null): void;
export declare function hasActionModeAssetLoaded(asset: string | null): boolean;
export declare function removeActionModeAsset(asset: string | null): void;
export declare function requestStealthModeAsset(asset: string | null): void;
export declare function hasStealthModeAssetLoaded(asset: string | null): boolean;
export declare function removeStealthModeAsset(asset: string | null): void;
export declare function setPedLodMultiplier(ped: Ped | Player | LocalPlayer | number, multiplier: number): void;
export declare function setPedCanLosePropsOnDamage(ped: Ped | Player | LocalPlayer | number, toggle: boolean, p2: number): void;
export declare function setForceFootstepUpdate(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setForceStepType(ped: Ped | Player | LocalPlayer | number, p1: boolean, type: number, p3: number): void;
export declare function isAnyHostilePedNearPoint(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, radius: number): boolean;
export declare function setPedCanPlayInCarIdles(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function isTargetPedInPerceptionArea(ped: Ped | Player | LocalPlayer | number, targetPed: Ped | Player | LocalPlayer | number, p2: number, p3: number, p4: number, p5: number): boolean;
export declare function setPopControlSphereThisFrame(x: number, y: number, z: number, min: number, max: number): void;
export declare function forceZeroMassInCollisions(ped: Ped | Player | LocalPlayer | number): void;
export declare function setDisableHighFallDeath(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedPhonePaletteIdx(p0: any, p1: any): void;
export declare function setPedSteerBias(ped: Ped | Player | LocalPlayer | number, value: number): void;
export declare function isPedSwitchingWeapon(Ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedTreatedAsFriendly(p0: any, p1: any, p2: any): void;
export declare function setDisablePedMapCollision(ped: Ped | Player | LocalPlayer | number): void;
export declare function enableMpLight(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function getMpLightEnabled(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function clearCoverPointForPed(ped: Ped | Player | LocalPlayer | number): void;
export declare function setAllowStuntJumpCamera(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function addRope(x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, length: number, ropeType: number, maxLength: number, minLength: number, windingSpeed: number, p11: boolean, p12: boolean, rigid: boolean, p14: number, breakWhenShot: boolean, unkPtr?: any | null): [number, any];
export declare function deleteRope(ropeId?: number | null): [void, number];
export declare function deleteChildRope(ropeId: number): void;
export declare function doesRopeExist(ropeId?: number | null): [boolean, number];
export declare function ropeDrawEnabled(ropeId: number | null, p1: boolean): [void, number];
export declare function ropeDrawShadowEnabled(ropeId: number | null, toggle: boolean): [void, number];
export declare function loadRopeData(ropeId: number, rope_preset: string | null): void;
export declare function pinRopeVertex(ropeId: number, vertex: number, x: number, y: number, z: number): void;
export declare function unpinRopeVertex(ropeId: number, vertex: number): void;
export declare function getRopeVertexCount(ropeId: number): number;
export declare function attachEntitiesToRope(ropeId: number, ent1: Entity | number, ent2: Entity | number, ent1_x: number, ent1_y: number, ent1_z: number, ent2_x: number, ent2_y: number, ent2_z: number, length: number, p10: boolean, p11: boolean, p12?: any | null, p13?: any | null): [void, any, any];
export declare function attachRopeToEntity(ropeId: number, entity: Entity | number, x: number, y: number, z: number, p5: boolean): void;
export declare function detachRopeFromEntity(ropeId: number, entity: Entity | number): void;
export declare function ropeSetUpdatePinverts(ropeId: number): void;
export declare function ropeSetUpdateOrder(ropeId: number, p1: any): void;
export declare function ropeSetSmoothReelin(ropeId: number, p1: boolean): void;
export declare function isRopeAttachedAtBothEnds(ropeId?: number | null): [boolean, number];
export declare function getRopeLastVertexCoord(ropeId: number): Vector3;
export declare function getRopeVertexCoord(ropeId: number, vertex: number): Vector3;
export declare function startRopeWinding(ropeId: number): void;
export declare function stopRopeWinding(ropeId: number): void;
export declare function startRopeUnwindingFront(ropeId: number): void;
export declare function stopRopeUnwindingFront(ropeId: number): void;
export declare function ropeConvertToSimple(ropeId: number): void;
export declare function ropeLoadTextures(): void;
export declare function ropeAreTexturesLoaded(): boolean;
export declare function ropeUnloadTextures(): void;
export declare function doesScriptOwnRope(ropeId: number): boolean;
export declare function ropeAttachVirtualBoundGeom(ropeId: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: number, p11: number, p12: number, p13: number): void;
export declare function ropeChangeScriptOwner(p0: any, p1: boolean, p2: boolean): void;
export declare function ropeSetRefframevelocityColliderorder(ropeId: number, p1: number): void;
export declare function ropeGetDistanceBetweenEnds(ropeId: number): number;
export declare function ropeForceLength(ropeId: number, length: number): void;
export declare function ropeResetLength(ropeId: number, length: number): void;
export declare function applyImpulseToCloth(posX: number, posY: number, posZ: number, vecX: number, vecY: number, vecZ: number, impulse: number): void;
export declare function setDamping(entity: Entity | number, vertex: number, value: number): void;
export declare function activatePhysics(entity: Entity | number): void;
export declare function setCgoffset(entity: Entity | number, x: number, y: number, z: number): void;
export declare function getCgoffset(entity: Entity | number): Vector3;
export declare function setCgAtBoundcenter(entity: Entity | number): void;
export declare function breakEntityGlass(entity: Entity | number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: any, p10: boolean): void;
export declare function getIsEntityAFrag(object: number): boolean;
export declare function setDisableBreaking(object: number, toggle: boolean): void;
export declare function resetDisableBreaking(object: number): void;
export declare function setDisableFragDamage(object: number, toggle: boolean): void;
export declare function setUseKinematicPhysics(entity: Entity | number, toggle: boolean): void;
export declare function setInStuntMode(p0: boolean): void;
export declare function setInArenaMode(toggle: boolean): void;
export declare function getPlayerPed(player: Player | number): number;
export declare function getPlayerPedScriptIndex(player: Player | number): number;
export declare function setPlayerModel(player: Player | number, model: number): void;
export declare function changePlayerPed(player: Player | number, ped: Ped | Player | LocalPlayer | number, p2: boolean, resetDamage: boolean): void;
export declare function getPlayerRgbColour(player: Player | number, r?: number | null, g?: number | null, b?: number | null): [void, number, number, number];
export declare function getNumberOfPlayers(): number;
export declare function getPlayerTeam(player: Player | number): number;
export declare function setPlayerTeam(player: Player | number, team: number): void;
export declare function getNumberOfPlayersInTeam(team: number): number;
export declare function getPlayerName(player: Player | number): string | null;
export declare function getWantedLevelRadius(player: Player | number): number;
export declare function getPlayerWantedCentrePosition(player: Player | number): Vector3;
export declare function setPlayerWantedCentrePosition(player: Player | number, position: Vector3 | null, p2: boolean, p3: boolean): [void, Vector3];
export declare function getWantedLevelThreshold(wantedLevel: number): number;
export declare function setPlayerWantedLevel(player: Player | number, wantedLevel: number, disableNoMission: boolean): void;
export declare function setPlayerWantedLevelNoDrop(player: Player | number, wantedLevel: number, p2: boolean): void;
export declare function setPlayerWantedLevelNow(player: Player | number, p1: boolean): void;
export declare function arePlayerFlashingStarsAboutToDrop(player: Player | number): boolean;
export declare function arePlayerStarsGreyedOut(player: Player | number): boolean;
export declare function isWantedAndHasBeenSeenByCops(player: Player | number): boolean;
export declare function setDispatchCopsForPlayer(player: Player | number, toggle: boolean): void;
export declare function isPlayerWantedLevelGreater(player: Player | number, wantedLevel: number): boolean;
export declare function clearPlayerWantedLevel(player: Player | number): void;
export declare function isPlayerDead(player: Player | number): boolean;
export declare function isPlayerPressingHorn(player: Player | number): boolean;
export declare function setPlayerControl(player: Player | number, bHasControl: boolean, flags: number): void;
export declare function getPlayerWantedLevel(player: Player | number): number;
export declare function setMaxWantedLevel(maxWantedLevel: number): void;
export declare function setPoliceRadarBlips(toggle: boolean): void;
export declare function setPoliceIgnorePlayer(player: Player | number, toggle: boolean): void;
export declare function isPlayerPlaying(player: Player | number): boolean;
export declare function setEveryoneIgnorePlayer(player: Player | number, toggle: boolean): void;
export declare function setAllRandomPedsFlee(player: Player | number, toggle: boolean): void;
export declare function setAllRandomPedsFleeThisFrame(player: Player | number): void;
export declare function setAllNeutralRandomPedsFlee(player: Player | number, toggle: boolean): void;
export declare function setAllNeutralRandomPedsFleeThisFrame(player: Player | number): void;
export declare function setLawPedsCanAttackNonWantedPlayerThisFrame(player: Player | number): void;
export declare function setIgnoreLowPriorityShockingEvents(player: Player | number, toggle: boolean): void;
export declare function setWantedLevelMultiplier(multiplier: number): void;
export declare function setWantedLevelDifficulty(player: Player | number, difficulty: number): void;
export declare function resetWantedLevelDifficulty(player: Player | number): void;
export declare function getWantedLevelTimeToEscape(): number;
export declare function setWantedLevelHiddenEscapeTime(player: Player | number, wantedLevel: number, lossTime: number): void;
export declare function resetWantedLevelHiddenEscapeTime(player: Player | number): void;
export declare function startFiringAmnesty(duration: number): void;
export declare function reportCrime(player: Player | number, crimeType: number, wantedLvlThresh: number): void;
export declare function suppressCrimeThisFrame(player: Player | number, crimeType: number): void;
export declare function updateWantedPositionThisFrame(player: Player | number): void;
export declare function suppressLosingWantedLevelIfHiddenThisFrame(player: Player | number): void;
export declare function allowEvasionHudIfDisablingHiddenEvasionThisFrame(player: Player | number, p1: any): void;
export declare function forceStartHiddenEvasion(player: Player | number): void;
export declare function suppressWitnessesCallingPoliceThisFrame(player: Player | number): void;
export declare function reportPoliceSpottedPlayer(player: Player | number): void;
export declare function setLawResponseDelayOverride(p0: number): void;
export declare function resetLawResponseDelayOverride(): void;
export declare function canPlayerStartMission(player: Player | number): boolean;
export declare function isPlayerReadyForCutscene(player: Player | number): boolean;
export declare function isPlayerTargettingEntity(player: Player | number, entity: Entity | number): boolean;
export declare function getPlayerTargetEntity(player: Player | number, entity?: Entity | number | null): [boolean, number];
export declare function isPlayerFreeAiming(player: Player | number): boolean;
export declare function isPlayerFreeAimingAtEntity(player: Player | number, entity: Entity | number): boolean;
export declare function getEntityPlayerIsFreeAimingAt(player: Player | number, entity?: Entity | number | null): [boolean, number];
export declare function setPlayerLockonRangeOverride(player: Player | number, range: number): void;
export declare function setPlayerCanDoDriveBy(player: Player | number, toggle: boolean): void;
export declare function setPlayerCanBeHassledByGangs(player: Player | number, toggle: boolean): void;
export declare function setPlayerCanUseCover(player: Player | number, toggle: boolean): void;
export declare function getMaxWantedLevel(): number;
export declare function isPlayerTargettingAnything(player: Player | number): boolean;
export declare function setPlayerSprint(player: Player | number, toggle: boolean): void;
export declare function resetPlayerStamina(player: Player | number): void;
export declare function restorePlayerStamina(player: Player | number, p1: number): void;
export declare function getPlayerSprintStaminaRemaining(player: Player | number): number;
export declare function getPlayerSprintTimeRemaining(player: Player | number): number;
export declare function getPlayerUnderwaterTimeRemaining(player: Player | number): number;
export declare function setPlayerUnderwaterBreathPercentRemaining(player: Player | number, time: number): number;
export declare function getPlayerGroup(player: Player | number): number;
export declare function getPlayerMaxArmour(player: Player | number): number;
export declare function isPlayerControlOn(player: Player | number): boolean;
export declare function getAreCameraControlsDisabled(): boolean;
export declare function isPlayerScriptControlOn(player: Player | number): boolean;
export declare function isPlayerClimbing(player: Player | number): boolean;
export declare function isPlayerBeingArrested(player: Player | number, atArresting: boolean): boolean;
export declare function resetPlayerArrestState(player: Player | number): void;
export declare function getPlayersLastVehicle(): number;
export declare function getPlayerIndex(): number;
export declare function intToPlayerindex(value: number): number;
export declare function intToParticipantindex(value: number): number;
export declare function getTimeSincePlayerHitVehicle(player: Player | number): number;
export declare function getTimeSincePlayerHitPed(player: Player | number): number;
export declare function getTimeSincePlayerDroveOnPavement(player: Player | number): number;
export declare function getTimeSincePlayerDroveAgainstTraffic(player: Player | number): number;
export declare function isPlayerFreeForAmbientTask(player: Player | number): boolean;
export declare function playerId(): number;
export declare function playerPedId(): number;
export declare function networkPlayerIdToInt(): number;
export declare function hasForceCleanupOccurred(cleanupFlags: number): boolean;
export declare function forceCleanup(cleanupFlags: number): void;
export declare function forceCleanupForAllThreadsWithThisName(name: string | null, cleanupFlags: number): void;
export declare function forceCleanupForThreadWithThisId(id: number, cleanupFlags: number): void;
export declare function getCauseOfMostRecentForceCleanup(): number;
export declare function setPlayerMayOnlyEnterThisVehicle(player: Player | number, vehicle: Vehicle | number): void;
export declare function setPlayerMayNotEnterAnyVehicle(player: Player | number): void;
export declare function giveAchievementToPlayer(achievementId: number): boolean;
export declare function setAchievementProgress(achievementId: number, progress: number): boolean;
export declare function getAchievementProgress(achievementId: number): number;
export declare function hasAchievementBeenPassed(achievementId: number): boolean;
export declare function isPlayerOnline(): boolean;
export declare function isPlayerLoggingInNp(): boolean;
export declare function displaySystemSigninUi(p0: boolean): void;
export declare function isSystemUiBeingDisplayed(): boolean;
export declare function setPlayerInvincible(player: Player | number, toggle: boolean): void;
export declare function getPlayerInvincible(player: Player | number): boolean;
export declare function getPlayerDebugInvincible(player: Player | number): boolean;
export declare function setPlayerInvincibleButHasReactions(player: Player | number, toggle: boolean): void;
export declare function setPlayerCanCollectDroppedMoney(player: Player | number, p1: boolean): void;
export declare function removePlayerHelmet(player: Player | number, p2: boolean): void;
export declare function givePlayerRagdollControl(player: Player | number, toggle: boolean): void;
export declare function setPlayerLockon(player: Player | number, toggle: boolean): void;
export declare function setPlayerTargetingMode(targetMode: number): void;
export declare function getPlayerTargetingMode(): number;
export declare function setPlayerTargetLevel(targetLevel: number): void;
export declare function getIsUsingFpsThirdPersonCover(): boolean;
export declare function getIsUsingHoodCamera(): boolean;
export declare function clearPlayerHasDamagedAtLeastOnePed(player: Player | number): void;
export declare function hasPlayerDamagedAtLeastOnePed(player: Player | number): boolean;
export declare function clearPlayerHasDamagedAtLeastOneNonAnimalPed(player: Player | number): void;
export declare function hasPlayerDamagedAtLeastOneNonAnimalPed(player: Player | number): boolean;
export declare function setAirDragMultiplierForPlayersVehicle(player: Player | number, multiplier: number): void;
export declare function setSwimMultiplierForPlayer(player: Player | number, multiplier: number): void;
export declare function setRunSprintMultiplierForPlayer(player: Player | number, multiplier: number): void;
export declare function getTimeSinceLastArrest(): number;
export declare function getTimeSinceLastDeath(): number;
export declare function assistedMovementCloseRoute(): void;
export declare function assistedMovementFlushRoute(): void;
export declare function setPlayerForcedAim(player: Player | number, toggle: boolean): void;
export declare function setPlayerForcedZoom(player: Player | number, toggle: boolean): void;
export declare function setPlayerForceSkipAimIntro(player: Player | number, toggle: boolean): void;
export declare function disablePlayerFiring(player: Player | number, toggle: boolean): void;
export declare function disablePlayerThrowGrenadeWhileUsingGun(): void;
export declare function setDisableAmbientMeleeMove(player: Player | number, toggle: boolean): void;
export declare function setPlayerMaxArmour(player: Player | number, value: number): void;
export declare function specialAbilityActivate(player: Player | number, p1: number): void;
export declare function setSpecialAbilityMp(player: Player | number, p1: number, p2: any): void;
export declare function specialAbilityDeactivateMp(player: Player | number, p1: number): void;
export declare function specialAbilityDeactivate(player: Player | number, p1: any): void;
export declare function specialAbilityDeactivateFast(player: Player | number, p1: any): void;
export declare function specialAbilityReset(player: Player | number, p1: any): void;
export declare function specialAbilityChargeOnMissionFailed(player: Player | number, p1: any): void;
export declare function specialAbilityChargeSmall(player: Player | number, p1: boolean, p2: boolean, p3: any): void;
export declare function specialAbilityChargeMedium(player: Player | number, p1: boolean, p2: boolean, p3: any): void;
export declare function specialAbilityChargeLarge(player: Player | number, p1: boolean, p2: boolean, p3: any): void;
export declare function specialAbilityChargeContinuous(player: Player | number, p1: Ped | Player | LocalPlayer | number, p2: any): void;
export declare function specialAbilityChargeAbsolute(player: Player | number, p1: number, p2: boolean, p3: any): void;
export declare function specialAbilityChargeNormalized(player: Player | number, normalizedValue: number, p2: boolean, p3: any): void;
export declare function specialAbilityFillMeter(player: Player | number, p1: boolean, p2: any): void;
export declare function specialAbilityDepleteMeter(player: Player | number, p1: boolean, p2: any): void;
export declare function specialAbilityLock(playerModel: number, p1: any): void;
export declare function specialAbilityUnlock(playerModel: number, p1: any): void;
export declare function isSpecialAbilityUnlocked(playerModel: number): boolean;
export declare function isSpecialAbilityActive(player: Player | number, p1: any): boolean;
export declare function isSpecialAbilityMeterFull(player: Player | number, p1: any): boolean;
export declare function enableSpecialAbility(player: Player | number, toggle: boolean, p2: any): void;
export declare function isSpecialAbilityEnabled(player: Player | number, p1: any): boolean;
export declare function setSpecialAbilityMultiplier(multiplier: number): void;
export declare function updateSpecialAbilityFromStat(player: Player | number, p1: any): void;
export declare function getIsPlayerDrivingOnHighway(player: Player | number): boolean;
export declare function getIsPlayerDrivingWreckless(player: Player | number, p1: number): boolean;
export declare function getIsMoppingAreaFreeInFrontOfPlayer(player: Player | number, p1: number): boolean;
export declare function startPlayerTeleport(player: Player | number, x: number, y: number, z: number, heading: number, p5: boolean, findCollisionLand: boolean, p7: boolean): void;
export declare function updatePlayerTeleport(player: Player | number): boolean;
export declare function stopPlayerTeleport(): void;
export declare function isPlayerTeleportActive(): boolean;
export declare function getPlayerCurrentStealthNoise(player: Player | number): number;
export declare function setPlayerHealthRechargeMultiplier(player: Player | number, regenRate: number): void;
export declare function getPlayerHealthRechargeMaxPercent(player: Player | number): number;
export declare function setPlayerHealthRechargeMaxPercent(player: Player | number, limit: number): void;
export declare function disablePlayerHealthRecharge(player: Player | number): void;
export declare function setPlayerFallDistanceToTriggerRagdollOverride(player: Player | number, p1: number): void;
export declare function setPlayerWeaponDamageModifier(player: Player | number, modifier: number): void;
export declare function setPlayerWeaponDefenseModifier(player: Player | number, modifier: number): void;
export declare function setPlayerWeaponMinigunDefenseModifier(player: Player | number, modifier: number): void;
export declare function setPlayerMeleeWeaponDamageModifier(player: Player | number, modifier: number, p2: boolean): void;
export declare function setPlayerMeleeWeaponDefenseModifier(player: Player | number, modifier: number): void;
export declare function setPlayerVehicleDamageModifier(player: Player | number, modifier: number): void;
export declare function setPlayerVehicleDefenseModifier(player: Player | number, modifier: number): void;
export declare function setPlayerMaxExplosiveDamage(player: Player | number, p1: number): void;
export declare function setPlayerExplosiveDamageModifier(player: Player | number, p1: any): void;
export declare function setPlayerWeaponTakedownDefenseModifier(player: Player | number, p1: number): void;
export declare function setPlayerParachuteTintIndex(player: Player | number, tintIndex: number): void;
export declare function getPlayerParachuteTintIndex(player: Player | number, tintIndex?: number | null): [void, number];
export declare function setPlayerReserveParachuteTintIndex(player: Player | number, index: number): void;
export declare function getPlayerReserveParachuteTintIndex(player: Player | number, index?: number | null): [void, number];
export declare function setPlayerParachutePackTintIndex(player: Player | number, tintIndex: number): void;
export declare function getPlayerParachutePackTintIndex(player: Player | number, tintIndex?: number | null): [void, number];
export declare function setPlayerHasReserveParachute(player: Player | number): void;
export declare function getPlayerHasReserveParachute(player: Player | number): boolean;
export declare function setPlayerCanLeaveParachuteSmokeTrail(player: Player | number, enabled: boolean): void;
export declare function setPlayerParachuteSmokeTrailColor(player: Player | number, r: number, g: number, b: number): void;
export declare function getPlayerParachuteSmokeTrailColor(player: Player | number, r?: number | null, g?: number | null, b?: number | null): [void, number, number, number];
export declare function setPlayerPhonePaletteIdx(player: Player | number, flags: number): void;
export declare function setPlayerNoiseMultiplier(player: Player | number, multiplier: number): void;
export declare function setPlayerSneakingNoiseMultiplier(player: Player | number, multiplier: number): void;
export declare function canPedHearPlayer(player: Player | number, ped: Ped | Player | LocalPlayer | number): boolean;
export declare function simulatePlayerInputGait(player: Player | number, amount: number, gaitType: number, speed: number, p4: boolean, p5: boolean, p6: any): void;
export declare function resetPlayerInputGait(player: Player | number): void;
export declare function setAutoGiveParachuteWhenEnterPlane(player: Player | number, toggle: boolean): void;
export declare function setAutoGiveScubaGearWhenExitVehicle(player: Player | number, toggle: boolean): void;
export declare function setPlayerStealthPerceptionModifier(player: Player | number, value: number): void;
export declare function isRemotePlayerInNonClonedVehicle(player: Player | number): boolean;
export declare function increasePlayerJumpSuppressionRange(player: Player | number): void;
export declare function setPlayerSimulateAiming(player: Player | number, toggle: boolean): void;
export declare function setPlayerClothPinFrames(player: Player | number, p1: number): void;
export declare function setPlayerClothPackageIndex(index: number): void;
export declare function setPlayerClothLockCounter(value: number): void;
export declare function playerAttachVirtualBound(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): void;
export declare function playerDetachVirtualBound(): void;
export declare function hasPlayerBeenSpottedInStolenVehicle(player: Player | number): boolean;
export declare function isPlayerBattleAware(player: Player | number): boolean;
export declare function getPlayerReceivedBattleEventRecently(player: Player | number, p1: number, p2: boolean): boolean;
export declare function extendWorldBoundaryForPlayer(x: number, y: number, z: number): void;
export declare function resetWorldBoundaryForPlayer(): void;
export declare function isPlayerRidingTrain(player: Player | number): boolean;
export declare function hasPlayerLeftTheWorld(player: Player | number): boolean;
export declare function setPlayerLeavePedBehind(player: Player | number, toggle: boolean): void;
export declare function setPlayerParachuteVariationOverride(player: Player | number, p1: number, p2: any, p3: any, p4: boolean): void;
export declare function clearPlayerParachuteVariationOverride(player: Player | number): void;
export declare function setPlayerParachuteModelOverride(player: Player | number, model: number): void;
export declare function setPlayerReserveParachuteModelOverride(player: Player | number, model: number): void;
export declare function getPlayerParachuteModelOverride(player: Player | number): number;
export declare function getPlayerReserveParachuteModelOverride(player: Player | number): number;
export declare function clearPlayerParachuteModelOverride(player: Player | number): void;
export declare function clearPlayerReserveParachuteModelOverride(player: Player | number): void;
export declare function setPlayerParachutePackModelOverride(player: Player | number, model: number): void;
export declare function clearPlayerParachutePackModelOverride(player: Player | number): void;
export declare function disablePlayerVehicleRewards(player: Player | number): void;
export declare function setPlayerSpectatedVehicleRadioOverride(p0: boolean): void;
export declare function setPlayerBluetoothState(player: Player | number, state: boolean): void;
export declare function isPlayerBluetoothEnable(player: Player | number): boolean;
export declare function disableCameraViewModeCycle(player: Player | number): void;
export declare function getPlayerFakeWantedLevel(player: Player | number): number;
export declare function setPlayerCanDamagePlayer(player1: Player | number, player2: Player | number, toggle: boolean): void;
export declare function setApplyWaypointOfPlayer(player: Player | number, hudColor: number): void;
export declare function isPlayerVehicleWeaponToggledToNonHoming(p0: any): boolean;
export declare function setPlayerVehicleWeaponToNonHoming(p0: any): void;
export declare function setPlayerHomingDisabledForAllVehicleWeapons(p0: any, p1: any): void;
export declare function addPlayerTargetableEntity(player: Player | number, entity: Entity | number): void;
export declare function removePlayerTargetableEntity(player: Player | number, entity: Entity | number): void;
export declare function setPlayerPreviousVariationData(player: Player | number, p1: number, p2: number, p3: any, p4: any, p5: any): void;
export declare function removeScriptFirePosition(): void;
export declare function setScriptFirePosition(coordX: number, coordY: number, coordZ: number): void;
export declare function replayStartEvent(p0: number): void;
export declare function replayStopEvent(): void;
export declare function replayCancelEvent(): void;
export declare function replayRecordBackForTime(p0: number, p1: number, p2: number): void;
export declare function replayCheckForEventThisFrame(missionNameLabel: string | null, p1: any): void;
export declare function replayPreventRecordingThisFrame(): void;
export declare function replayResetEventInfo(): void;
export declare function replayDisableCameraMovementThisFrame(): void;
export declare function recordGreatestMoment(p0: number, p1: number, p2: number): void;
export declare function startReplayRecording(mode: number): void;
export declare function stopReplayRecording(): void;
export declare function cancelReplayRecording(): void;
export declare function saveReplayRecording(): boolean;
export declare function isReplayRecording(): boolean;
export declare function isReplayInitialized(): boolean;
export declare function isReplayAvailable(): boolean;
export declare function isReplayRecordSpaceAvailable(p0: boolean): boolean;
export declare function registerEffectForReplayEditor(p0: string | null, p1: boolean): void;
export declare function replaySystemHasRequestedAScriptCleanup(): boolean;
export declare function setScriptsHaveCleanedUpForReplaySystem(): void;
export declare function setReplaySystemPausedForSave(p0: boolean): void;
export declare function replayControlShutdown(): void;
export declare function activateRockstarEditor(p0: number): void;
export declare function savemigrationIsMpEnabled(): boolean;
export declare function savemigrationMpRequestAccounts(): boolean;
export declare function savemigrationMpGetAccountsStatus(): number;
export declare function savemigrationMpNumAccounts(): number;
export declare function savemigrationMpGetAccount(p0: number, p1?: any | null): [boolean, any];
export declare function savemigrationMpRequestStatus(): boolean;
export declare function savemigrationMpGetStatus(): number;
export declare function requestScript(scriptName: string | null): void;
export declare function setScriptAsNoLongerNeeded(scriptName: string | null): void;
export declare function hasScriptLoaded(scriptName: string | null): boolean;
export declare function doesScriptExist(scriptName: string | null): boolean;
export declare function requestScriptWithNameHash(scriptHash: number): void;
export declare function setScriptWithNameHashAsNoLongerNeeded(scriptHash: number): void;
export declare function hasScriptWithNameHashLoaded(scriptHash: number): boolean;
export declare function doesScriptWithNameHashExist(scriptHash: number): boolean;
export declare function terminateThread(threadId: number): void;
export declare function isThreadActive(threadId: number): boolean;
export declare function getNameOfScriptWithThisId(threadId: number): string | null;
export declare function scriptThreadIteratorReset(): void;
export declare function scriptThreadIteratorGetNextThreadId(): number;
export declare function getIdOfThisThread(): number;
export declare function terminateThisThread(): void;
export declare function getNumberOfThreadsRunningTheScriptWithThisHash(scriptHash: number): number;
export declare function getThisScriptName(): string | null;
export declare function getHashOfThisScriptName(): number;
export declare function getNumberOfEvents(eventGroup: number): number;
export declare function getEventExists(eventGroup: number, eventIndex: number): boolean;
export declare function getEventAtIndex(eventGroup: number, eventIndex: number): number;
export declare function getEventData(eventGroup: number, eventIndex: number, eventData: any | null, eventDataSize: number): [boolean, any];
export declare function triggerScriptEvent(eventGroup: number, eventData: any | null, eventDataSize: number, playerBits: number): [void, any];
export declare function shutdownLoadingScreen(): void;
export declare function setNoLoadingScreen(toggle: boolean): void;
export declare function getNoLoadingScreen(): boolean;
export declare function commitToLoadingscreenSelction(): void;
export declare function bgIsExitflagSet(): boolean;
export declare function bgSetExitflagResponse(): void;
export declare function bgStartContextHash(contextHash: number): void;
export declare function bgEndContextHash(contextHash: number): void;
export declare function bgStartContext(contextName: string | null): void;
export declare function bgEndContext(contextName: string | null): void;
export declare function bgDoesLaunchParamExist(scriptIndex: number, p1: string | null): boolean;
export declare function bgGetLaunchParamValue(scriptIndex: number, p1: string | null): number;
export declare function bgGetScriptIdFromNameHash(p0: number): number;
export declare function sendTuScriptEventNew(eventGroup: number, eventData: any | null, eventDataSize: number, playerBits: number, eventType: number): [void, any];
export declare function registerScriptVariable(variable?: any | null): [void, any];
export declare function unregisterScriptVariable(variable?: any | null): [void, any];
export declare function forceCheckScriptVariables(): void;
export declare function startShapeTestLosProbe(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, entity: Entity | number, p8: number): number;
export declare function startExpensiveSynchronousShapeTestLosProbe(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, entity: Entity | number, p8: number): number;
export declare function startShapeTestBoundingBox(entity: Entity | number, flags1: number, flags2: number): number;
export declare function startShapeTestBox(x: number, y: number, z: number, dimX: number, dimY: number, dimZ: number, rotX: number, rotY: number, rotZ: number, p9: any, flags: number, entity: Entity | number, p12: any): number;
export declare function startShapeTestBound(entity: Entity | number, flags1: number, flags2: number): number;
export declare function startShapeTestCapsule(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number, flags: number, entity: Entity | number, p9: number): number;
export declare function startShapeTestSweptSphere(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, radius: number, flags: number, entity: Entity | number, p9: any): number;
export declare function startShapeTestMouseCursorLosProbe(pVec1: Vector3 | null, pVec2: Vector3 | null, flag: number, entity: Entity | number, flag2: number): [number, Vector3, Vector3];
export declare function getShapeTestResult(shapeTestHandle: number, hit?: boolean | null, endCoords?: Vector3 | null, surfaceNormal?: Vector3 | null, entityHit?: Entity | number | null): [number, boolean, Vector3, Vector3, number];
export declare function getShapeTestResultIncludingMaterial(shapeTestHandle: number, hit?: boolean | null, endCoords?: Vector3 | null, surfaceNormal?: Vector3 | null, materialHash?: number | null, entityHit?: Entity | number | null): [number, boolean, Vector3, Vector3, number, number];
export declare function releaseScriptGuidFromEntity(entityHit: Entity | number): void;
export declare function scInboxGetTotalNumMessages(): number;
export declare function scInboxGetMessageTypeAtIndex(msgIndex: number): number;
export declare function scInboxGetMessageIsReadAtIndex(msgIndex: number): boolean;
export declare function scInboxSetMessageAsReadAtIndex(msgIndex: number): boolean;
export declare function scInboxMessageGetDataInt(p0: number, context: string | null, out?: number | null): [boolean, number];
export declare function scInboxMessageGetDataBool(p0: number, p1: string | null): boolean;
export declare function scInboxMessageGetDataString(p0: number, context: string | null, out: string | null): boolean;
export declare function scInboxMessageDoApply(p0: number): boolean;
export declare function scInboxMessageGetRawTypeAtIndex(p0: number): string | null;
export declare function scInboxMessagePushGamerT0RecipList(gamerHandle?: any | null): [void, any];
export declare function scInboxSendUgcstatupdateToRecipList(data?: any | null): [void, any];
export declare function scInboxMessageGetUgcdata(p0: number, p1?: any | null): [boolean, any];
export declare function scInboxGetBountyDataAtIndex(index: number, outData?: any | null): [boolean, any];
export declare function scEmailRetrieveEmails(offset: number, limit: number): void;
export declare function scEmailGetRetrievalStatus(): number;
export declare function scEmailGetNumRetrievedEmails(): number;
export declare function scEmailGetEmailAtIndex(p0: number, p1?: any | null): [boolean, any];
export declare function scEmailDeleteEmails(p0: any | null, p1: any): [void, any];
export declare function scEmailMessagePushGamerToRecipList(gamerHandle?: any | null): [void, any];
export declare function scEmailMessageClearRecipList(): void;
export declare function scEmailSendEmail(p0: string | null): void;
export declare function scEmailSetCurrentEmailTag(p0: any): boolean;
export declare function scCacheNewRockstarMsgs(toggle: boolean): void;
export declare function scHasNewRockstarMsg(): boolean;
export declare function scGetNewRockstarMsg(): string | null;
export declare function scPresenceAttrSetInt(attrHash: number, value: number): boolean;
export declare function scPresenceAttrSetFloat(attrHash: number, value: number): boolean;
export declare function scPresenceAttrSetString(attrHash: number, value: string | null): boolean;
export declare function scPresenceSetActivityRating(p0: any, p1: number): boolean;
export declare function scGamerdataGetInt(name: string | null, value?: number | null): [boolean, number];
export declare function scGamerdataGetFloat(name: string | null, value?: number | null): [boolean, number];
export declare function scGamerdataGetBool(name: string | null): boolean;
export declare function scGamerdataGetString(name: string | null, value: string | null): boolean;
export declare function scGamerdataGetActiveXpBonus(value?: number | null): [boolean, number];
export declare function scProfanityCheckString(string: string | null, token?: number | null): [boolean, number];
export declare function scProfanityCheckStringUgc(string: string | null, token?: number | null): [boolean, number];
export declare function scProfanityGetCheckIsValid(token: number): boolean;
export declare function scProfanityGetCheckIsPending(token: number): boolean;
export declare function scProfanityGetStringPassed(token: number): boolean;
export declare function scProfanityGetStringStatus(token: number): number;
export declare function scLicenseplateCheckString(p0: string | null, p1?: number | null): [boolean, number];
export declare function scLicenseplateGetCheckIsValid(p0: any): boolean;
export declare function scLicenseplateGetCheckIsPending(p0: any): boolean;
export declare function scLicenseplateGetCount(token: number): number;
export declare function scLicenseplateGetPlate(token: number, plateIndex: number): string | null;
export declare function scLicenseplateGetPlateData(token: number, plateIndex: number): string | null;
export declare function scLicenseplateSetPlateData(oldPlateText: string | null, newPlateText: string | null, plateData?: any | null): [boolean, any];
export declare function scLicenseplateAdd(plateText: string | null, plateData?: any | null, token?: number | null): [boolean, any, number];
export declare function scLicenseplateGetAddIsPending(token: number): boolean;
export declare function scLicenseplateGetAddStatus(token: number): number;
export declare function scLicenseplateIsvalid(plateText: string | null, token?: number | null): [boolean, number];
export declare function scLicenseplateGetIsvalidIsPending(token: number): boolean;
export declare function scLicenseplateGetIsvalidStatus(token: number): number;
export declare function scCommunityEventIsActive(): boolean;
export declare function scCommunityEventGetEventId(): number;
export declare function scCommunityEventGetExtraDataInt(p0: string | null, p1?: number | null): [boolean, number];
export declare function scCommunityEventGetExtraDataFloat(p0: string | null, p1?: number | null): [boolean, number];
export declare function scCommunityEventGetExtraDataString(p0: string | null, p1: string | null): boolean;
export declare function scCommunityEventGetDisplayName(p0: string | null): boolean;
export declare function scCommunityEventIsActiveForType(p0: string | null): boolean;
export declare function scCommunityEventGetEventIdForType(p0: string | null): number;
export declare function scCommunityEventGetExtraDataIntForType(p0: string | null, p1: number | null, p2: string | null): [boolean, number];
export declare function scCommunityEventGetExtraDataFloatForType(p0: string | null, p1: number | null, p2: string | null): [boolean, number];
export declare function scCommunityEventGetExtraDataStringForType(p0: string | null, p1: string | null, p2: string | null): boolean;
export declare function scCommunityEventGetDisplayNameForType(p0: string | null, p1: string | null): boolean;
export declare function scCommunityEventIsActiveById(p0: number): boolean;
export declare function scCommunityEventGetExtraDataIntById(p0: number, p1: string | null, p2?: number | null): [boolean, number];
export declare function scCommunityEventGetExtraDataFloatById(p0: number, p1: string | null, p2?: number | null): [boolean, number];
export declare function scCommunityEventGetExtraDataStringById(p0: number, p1: string | null, p2: string | null): boolean;
export declare function scCommunityEventGetDisplayNameById(p0: number, p1: string | null): boolean;
export declare function scTransitionNewsShow(p0: any): boolean;
export declare function scTransitionNewsShowTimed(p0: any, p1: any): boolean;
export declare function scTransitionNewsShowNextItem(): boolean;
export declare function scTransitionNewsHasExtraDataTu(): boolean;
export declare function scTransitionNewsGetExtraDataIntTu(p0: string | null, p1?: number | null): [boolean, number];
export declare function scTransitionNewsEnd(): void;
export declare function scPauseNewsInitStarterPack(p0: any): boolean;
export declare function scPauseNewsGetPendingStory(p0: any): boolean;
export declare function scPauseNewsShutdown(): void;
export declare function scAccountInfoGetNickname(): string | null;
export declare function scAchievementInfoStatus(p0?: number | null): [boolean, number];
export declare function scHasAchievementBeenPassed(achievementId: number): boolean;
export declare function statClearSlotForReload(statSlot: number): boolean;
export declare function statLoad(statSlot: number): boolean;
export declare function statSave(p0: number, p1: boolean, p2: number, p3: boolean): boolean;
export declare function statSetOpenSavetypeInJob(p0: number): void;
export declare function statLoadPending(statSlot: number): boolean;
export declare function statSavePending(): boolean;
export declare function statSavePendingOrRequested(): boolean;
export declare function statDeleteSlot(p0: number): boolean;
export declare function statSlotIsLoaded(statSlot: number): boolean;
export declare function statCloudSlotLoadFailed(p0: number): boolean;
export declare function statCloudSlotLoadFailedCode(p0: any): number;
export declare function statSetBlockSaves(toggle: boolean): void;
export declare function statGetBlockSaves(): boolean;
export declare function statCloudSlotSaveFailed(p0: any): boolean;
export declare function statClearPendingSaves(p0: any): void;
export declare function statLoadDirtyReadDetected(): boolean;
export declare function statClearDirtyReadDetected(): void;
export declare function statGetLoadSafeToProgressToMpFromSp(): boolean;
export declare function getStatHashForCharacterStat(dataType: number, statIndex: number, charSlot: number): number;
export declare function statSetInt(statName: number, value: number, save: boolean): boolean;
export declare function statSetFloat(statName: number, value: number, save: boolean): boolean;
export declare function statSetBool(statName: number, value: boolean, save: boolean): boolean;
export declare function statSetGxtLabel(statName: number, value: string | null, save: boolean): boolean;
export declare function statSetDate(statName: number, value: any | null, numFields: number, save: boolean): [boolean, any];
export declare function statSetString(statName: number, value: string | null, save: boolean): boolean;
export declare function statSetPos(statName: number, x: number, y: number, z: number, save: boolean): boolean;
export declare function statSetMaskedInt(statName: number, p1: number, p2: number, p3: number, save: boolean): boolean;
export declare function statSetUserId(statName: number, value: string | null, save: boolean): boolean;
export declare function statSetCurrentPosixTime(statName: number, p1: boolean): boolean;
export declare function statGetInt(statHash: number, outValue: number | null, p2: number): [boolean, number];
export declare function statGetFloat(statHash: number, outValue: number | null, p2: any): [boolean, number];
export declare function statGetBool(statHash: number, outValue: boolean | null, p2: any): [boolean, boolean];
export declare function statGetDate(statHash: number, outValue: any | null, numFields: number, p3: any): [boolean, any];
export declare function statGetString(statHash: number, p1: number): string | null;
export declare function statGetPos(statName: number, outX: number | null, outY: number | null, outZ: number | null, p4: any): [boolean, number, number, number];
export declare function statGetMaskedInt(statHash: number, outValue: number | null, p2: number, p3: number, p4: any): [boolean, number];
export declare function statGetUserId(statHash: number): string | null;
export declare function statGetLicensePlate(statName: number): string | null;
export declare function statSetLicensePlate(statName: number, str: string | null): boolean;
export declare function statIncrement(statName: number, value: number): void;
export declare function statCommunityStartSynch(): boolean;
export declare function statCommunitySynchIsPending(): boolean;
export declare function statCommunityGetHistory(statName: number, p1: number, outValue?: number | null): [boolean, number];
export declare function statResetAllOnlineCharacterStats(p0: number): void;
export declare function statLocalResetAllOnlineCharacterStats(p0: number): void;
export declare function statGetNumberOfDays(statName: number): number;
export declare function statGetNumberOfHours(statName: number): number;
export declare function statGetNumberOfMinutes(statName: number): number;
export declare function statGetNumberOfSeconds(statName: number): number;
export declare function statSetProfileSettingValue(profileSetting: number, value: number): void;
export declare function statsCompletedCharacterCreation(p0: any): void;
export declare function packedStatGetIntStatIndex(p0: number): number;
export declare function getPackedIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number;
export declare function getPackedTuIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number): number;
export declare function getPackedNgIntStatKey(index: number, spStat: boolean, charStat: boolean, character: number, section: string | null): number;
export declare function getPackedStatBoolCode(index: number, characterSlot: number): boolean;
export declare function getPackedStatIntCode(index: number, characterSlot: number): number;
export declare function setPackedStatBoolCode(index: number, value: boolean, characterSlot: number): void;
export declare function setPackedStatIntCode(index: number, value: number, characterSlot: number): void;
export declare function playstatsBackgroundScriptAction(action: string | null, value: number): void;
export declare function playstatsFlowLow(posX: number, posY: number, posZ: number, p3: string | null, p4: any, amount: number): void;
export declare function playstatsFlowMedium(x: number, y: number, z: number, interiorAction: string | null, p4: number, p5: number): void;
export declare function playstatsNpcInvite(p0: string | null): void;
export declare function playstatsAwardXp(amount: number, type: number, category: number): void;
export declare function playstatsRankUp(rank: number): void;
export declare function playstatsStartedSessionInOfflinemode(): void;
export declare function playstatsActivityDone(p0: number, activityId: number, p2: any): void;
export declare function playstatsLeaveJobChain(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function playstatsMissionStarted(p0: string | null, p1: any, p2: any, p3: boolean): void;
export declare function playstatsMissionOver(p0: string | null, p1: any, p2: any, p3: boolean, p4: boolean, p5: boolean): void;
export declare function playstatsMissionCheckpoint(p0: string | null, p1: any, p2: any, p3: any): void;
export declare function playstatsRandomMissionDone(name: string | null, p1: any, p2: any, p3: any): void;
export declare function playstatsRosBet(amount: number, act: number, player: Player | number, cm: number): void;
export declare function playstatsRaceCheckpoint(p0: Vehicle | number, p1: any, p2: number, p3: number, p4: any): void;
export declare function playstatsCreateMatchHistoryId2(playerAccountId?: number | null, posixTime?: number | null): [boolean, number, number];
export declare function playstatsMatchStarted(p0: any, p1: any, p2: any): void;
export declare function playstatsShopItem(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function playstatsCrateDropMissionDone(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void;
export declare function playstatsCrateCreated(p0: number, p1: number, p2: number): void;
export declare function playstatsHoldUpMissionDone(p0: any, p1: any, p2: any, p3: any): void;
export declare function playstatsImportExportMissionDone(p0: any, p1: any, p2: any, p3: any): void;
export declare function playstatsRaceToPointMissionDone(p0: number, p1: any, p2: any, p3: any): void;
export declare function playstatsAcquiredHiddenPackage(p0: any): void;
export declare function playstatsWebsiteVisited(scaleformHash: number, p1: number): void;
export declare function playstatsFriendActivity(p0: number, p1: boolean): void;
export declare function playstatsOddjobDone(totalTimeMs: number, p1: number, p2: boolean): void;
export declare function playstatsPropChange(p0: Ped | Player | LocalPlayer | number, p1: number, p2: number, p3: number): void;
export declare function playstatsClothChange(p0: Ped | Player | LocalPlayer | number, p1: any, p2: any, p3: any, p4: any): void;
export declare function playstatsWeaponModeChange(weaponHash: number, componentHashTo: number, componentHashFrom: number): void;
export declare function playstatsCheatApplied(cheat: string | null): void;
export declare function playstatsJobActivityEnd(p0?: any | null, p1?: any | null, p2?: any | null, p3?: any | null): [void, any, any, any, any];
export declare function playstatsJobBend(p0?: any | null, p1?: any | null, p2?: any | null, p3?: any | null): [void, any, any, any, any];
export declare function playstatsJobLtsEnd(p0?: any | null, p1?: any | null, p2?: any | null, p3?: any | null): [void, any, any, any, any];
export declare function playstatsJobLtsRoundEnd(p0?: any | null, p1?: any | null, p2?: any | null, p3?: any | null): [void, any, any, any, any];
export declare function playstatsQuickfixTool(element: number, item: string | null): void;
export declare function playstatsIdleKick(msStoodIdle: number): void;
export declare function playstatsSetJoinType(joinType: number): void;
export declare function playstatsHeistSaveCheat(hash: number, p1: number): void;
export declare function playstatsAppendDirectorMetric(p0?: any | null): [void, any];
export declare function playstatsAwardBadSport(id: number): void;
export declare function playstatsPegasusAsPersonalAircraft(modelHash: number): void;
export declare function playstatsShopmenuNav(p0: any, p1: any, p2: any, p3: any): void;
export declare function playstatsFmEventChallenges(p0: any): void;
export declare function playstatsFmEventVehicletarget(p0: any): void;
export declare function playstatsFmEventUrbanwarfare(p0: any): void;
export declare function playstatsFmEventCheckpointcollection(p0: any): void;
export declare function playstatsFmEventAtob(p0: any): void;
export declare function playstatsFmEventPennedin(p0: any): void;
export declare function playstatsFmEventPasstheparcel(p0: any): void;
export declare function playstatsFmEventHotproperty(p0: any): void;
export declare function playstatsFmEventDeaddrop(p0: any): void;
export declare function playstatsFmEventKingofthecastle(p0: any): void;
export declare function playstatsFmEventCriminaldamage(p0: any): void;
export declare function playstatsFmEventCompetitiveurbanwarfare(p0: any): void;
export declare function playstatsFmEventHuntbeast(p0: any): void;
export declare function playstatsPimenuHideOptions(data?: any | null): [void, any];
export declare function leaderboardsGetNumberOfColumns(p0: number, p1: any): number;
export declare function leaderboardsGetColumnId(p0: number, p1: number, p2: number): number;
export declare function leaderboardsGetColumnType(p0: number, p1: any, p2: any): number;
export declare function leaderboardsReadClearAll(): number;
export declare function leaderboardsReadClear(p0: any, p1: any, p2: any): number;
export declare function leaderboardsReadPending(p0: any, p1: any, p2: any): boolean;
export declare function leaderboardsReadAnyPending(): boolean;
export declare function leaderboardsReadSuccessful(p0: any, p1: any, p2: any): boolean;
export declare function leaderboards2ReadFriendsByRow(p0: any | null, p1: any | null, p2: any, p3: boolean, p4: any, p5: any): [boolean, any, any];
export declare function leaderboards2ReadByHandle(p0?: any | null, p1?: any | null): [boolean, any, any];
export declare function leaderboards2ReadByRank(p0: any | null, p1: any, p2: any): [boolean, any];
export declare function leaderboards2ReadByRadius(p0: any | null, p1: any, p2?: any | null): [boolean, any, any];
export declare function leaderboards2ReadByScoreInt(p0: any | null, p1: any, p2: any): [boolean, any];
export declare function leaderboards2ReadByScoreFloat(p0: any | null, p1: number, p2: any): [boolean, any];
export declare function leaderboards2ReadRankPrediction(p0?: any | null, p1?: any | null, p2?: any | null): [boolean, any, any, any];
export declare function leaderboards2ReadByPlaform(p0: any | null, gamerHandleCsv: string | null, platformName: string | null): [boolean, any];
export declare function leaderboards2ReadGetRowDataStart(p0?: any | null): [boolean, any];
export declare function leaderboards2ReadGetRowDataEnd(): void;
export declare function leaderboards2ReadGetRowDataInfo(p0: any, p1?: any | null): [boolean, any];
export declare function leaderboards2ReadGetRowDataInt(p0: any, p1: any): number;
export declare function leaderboards2ReadGetRowDataFloat(p0: any, p1: any): number;
export declare function leaderboards2WriteData(p0?: any | null): [boolean, any];
export declare function leaderboardsWriteAddColumn(p0: any, p1: any, p2: number): void;
export declare function leaderboardsWriteAddColumnLong(p0: any, p1: any, p2: any): void;
export declare function leaderboardsCacheDataRow(p0?: any | null): [boolean, any];
export declare function leaderboardsClearCacheData(): void;
export declare function leaderboardsClearCacheDataId(p0: any): void;
export declare function leaderboardsGetCacheExists(p0: any): boolean;
export declare function leaderboardsGetCacheTime(p0: any): number;
export declare function leaderboardsGetCacheNumberOfRows(p0: any): number;
export declare function leaderboardsGetCacheDataRow(p0: any, p1: any, p2?: any | null): [boolean, any];
export declare function presenceEventUpdatestatInt(statHash: number, value: number, p2: number): void;
export declare function presenceEventUpdatestatFloat(statHash: number, value: number, p2: number): void;
export declare function presenceEventUpdatestatIntWithString(statHash: number, value: number, p2: number, string: string | null): void;
export declare function getPlayerHasDrivenAllVehicles(): boolean;
export declare function setHasPostedAllVehiclesDriven(): void;
export declare function setProfileSettingPrologueComplete(): void;
export declare function setProfileSettingSpChopMissionComplete(): void;
export declare function setProfileSettingCreatorRacesDone(value: number): void;
export declare function setProfileSettingCreatorDmDone(value: number): void;
export declare function setProfileSettingCreatorCtfDone(value: number): void;
export declare function setJobActivityIdStarted(p0: any, characterSlot: number): void;
export declare function setFreemodePrologueDone(p0: any, characterSlot: number): void;
export declare function setFreemodeStrandProgressionStatus(profileSetting: number, settingValue: number): void;
export declare function statNetworkIncrementOnSuicide(p0: any, p1: number): void;
export declare function statSetCheatIsActive(): void;
export declare function leaderboards2WriteDataForEventType(p0?: any | null, p1?: any | null): [boolean, any, any];
export declare function forceCloudMpStatsDownloadAndOverwriteLocalSave(): void;
export declare function statMigrateClearForRestart(): void;
export declare function statMigrateSavegameStart(platformName: string | null): boolean;
export declare function statMigrateSavegameGetStatus(): number;
export declare function statMigrateCheckAlreadyDone(): boolean;
export declare function statMigrateCheckStart(): boolean;
export declare function statMigrateCheckGetIsPlatformAvailable(p0: number): number;
export declare function statMigrateCheckGetPlatformStatus(p0: number, p1?: any | null): [number, any];
export declare function statGetSaveMigrationStatus(data?: any | null): [number, any];
export declare function statSaveMigrationCancelPendingOperation(): boolean;
export declare function statGetCancelSaveMigrationStatus(): number;
export declare function statSaveMigrationConsumeContent(contentId: number, srcPlatform: string | null, srcGamerHandle: string | null): boolean;
export declare function statGetSaveMigrationConsumeContentStatus(p0?: number | null): [number, number];
export declare function statEnableStatsTracking(): void;
export declare function statDisableStatsTracking(): void;
export declare function statIsStatsTrackingEnabled(): boolean;
export declare function statStartRecordStat(statType: number, valueType: number): boolean;
export declare function statStopRecordStat(): boolean;
export declare function statGetRecordedValue(value?: number | null): [boolean, number];
export declare function statIsRecordingStat(): boolean;
export declare function statGetCurrentNearMissNocrashPrecise(): number;
export declare function statGetCurrentRearWheelDistance(): number;
export declare function statGetCurrentFrontWheelDistance(): number;
export declare function statGetCurrentJumpDistance(): number;
export declare function statGetCurrentDriveNocrashDistance(): number;
export declare function statGetCurrentSpeed(): number;
export declare function statGetCurrentDrivingReverseDistance(): number;
export declare function statGetCurrentSkydivingDistance(): number;
export declare function statGetChallengeFlyingDist(): number;
export declare function statGetFlyingAltitude(outValue?: number | null): [boolean, number];
export declare function statIsPlayerVehicleAboveOcean(): boolean;
export declare function statGetVehicleBailDistance(): number;
export declare function statRollbackSaveMigration(): boolean;
export declare function setHasSpecialeditionContent(value: number): void;
export declare function setSaveMigrationTransactionIdWarning(transactionId: number): void;
export declare function getBossGoonUuid(characterSlot: number, p1: any, p2: any): void;
export declare function playstatsBwBossonbossdeathmatch(p0: any): void;
export declare function playstatsBwYatchattack(p0: any): void;
export declare function playstatsBwHuntTheBoss(p0: any): void;
export declare function playstatsBwSightseer(p0: any): void;
export declare function playstatsBwAssault(p0: any): void;
export declare function playstatsBwBellyOfTheBeast(p0: any): void;
export declare function playstatsBwHeadHunter(p0: any): void;
export declare function playstatsBwFragileGoods(p0: any): void;
export declare function playstatsBwAirFreight(p0: any): void;
export declare function playstatsBcCarJacking(p0: any): void;
export declare function playstatsBcSmashAndGrab(p0: any): void;
export declare function playstatsBcProtectionRacket(p0: any): void;
export declare function playstatsBcMostWanted(p0: any): void;
export declare function playstatsBcFindersKeepers(p0: any): void;
export declare function playstatsBcPointToPoint(p0: any): void;
export declare function playstatsBcCashing(p0: any): void;
export declare function playstatsBcSalvage(p0: any): void;
export declare function playstatsSpentPiCustomLoadout(amount: number): void;
export declare function playstatsBuyContrabandMission(data?: any | null): [void, any];
export declare function playstatsSellContrabandMission(data?: any | null): [void, any];
export declare function playstatsDefendContrabandMission(data?: any | null): [void, any];
export declare function playstatsRecoverContrabandMission(data?: any | null): [void, any];
export declare function playstatsHitContrabandDestroyLimit(p0: any): void;
export declare function startBeingBoss(p0: any, p1: any, p2: any): void;
export declare function startBeingGoon(p0: any, p1: any, p2: any): void;
export declare function endBeingBoss(p0: any, p1: any, p2: any): void;
export declare function endBeingGoon(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function hiredLimo(p0: any, p1: any): void;
export declare function orderBossVehicle(p0: any, p1: any, vehicleHash: number): void;
export declare function changeUniform(p0: any, p1: any, p2: any): void;
export declare function changeGoonLookingForWork(p0: any): void;
export declare function sendMetricGhostingToPlayer(p0: any): void;
export declare function sendMetricVipPoach(p0: any, p1: any, p2: any): void;
export declare function sendMetricPunishBodyguard(p0: any): void;
export declare function playstatsStartTrackingStunts(): void;
export declare function playstatsStopTrackingStunts(): void;
export declare function playstatsMissionEnded(p0: any): void;
export declare function playstatsImpexpMissionEnded(p0: any): void;
export declare function playstatsChangeMcRole(p0: any, p1: any, p2: any, p3: any, role: number, p5: number, p6: any): void;
export declare function playstatsChangeMcOutfit(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function playstatsSwitchMcEmblem(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function playstatsMcRequestBike(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function playstatsMcKilledRivalMcMember(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function playstatsAbandonedMc(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function playstatsEarnedMcPoints(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
export declare function playstatsMcFormationEnds(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
export declare function playstatsMcClubhouseActivity(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void;
export declare function playstatsRivalBehavior(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void;
export declare function playstatsCopyRankIntoNewSlot(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
export declare function playstatsDupeDetected(data?: any | null): [void, any];
export declare function playstatsBanAlert(p0: number): void;
export declare function playstatsGunrunningMissionEnded(data?: any | null): [void, any];
export declare function playstatsGunrunningRnd(p0: any): void;
export declare function playstatsBusinessBattleEnded(p0: any): void;
export declare function playstatsWarehouseMissionEnded(p0: any): void;
export declare function playstatsNightclubMissionEnded(p0: any): void;
export declare function playstatsDjUsage(p0: any, p1: any): void;
export declare function playstatsMinigameUsage(p0: any, p1: any, p2: any): void;
export declare function playstatsStoneHatchetEnded(data?: any | null): [void, any];
export declare function playstatsSmugglerMissionEnded(data?: any | null): [void, any];
export declare function playstatsFmHeistPrepEnded(data?: any | null): [void, any];
export declare function playstatsInstancedHeistEnded(data: any | null, p1: any, p2: any, p3: any): [void, any];
export declare function playstatsDarCheckpoint(data?: any | null): [void, any];
export declare function playstatsEnterSessionPack(data?: any | null): [void, any];
export declare function playstatsDroneUsage(p0: number, p1: number, p2: number): void;
export declare function playstatsSpinWheel(p0: number, p1: number, p2: number, p3: number): void;
export declare function playstatsArenaWarsSpectator(p0: number, p1: number, p2: number, p3: number, p4: number): void;
export declare function playstatsArenaWarsEnded(data?: any | null): [void, any];
export declare function playstatsSwitchPassiveMode(p0: boolean, p1: number, p2: number, p3: number): void;
export declare function playstatsCollectiblePickedUp(p0: number, objectHash: number, p2: any, p3: any, moneyAmount: number, rpAmount: number, chipsAmount: number, p7: any, p8: number, p9: any, p10: any): void;
export declare function playstatsCasinoStoryMissionEnded(p0: any, p1: any): void;
export declare function playstatsCasinoChip(p0: any): void;
export declare function playstatsCasinoRoulette(p0: any): void;
export declare function playstatsCasinoBlackjack(p0: any): void;
export declare function playstatsCasinoThreeCardPoker(p0: any): void;
export declare function playstatsCasinoSlotMachine(p0: any): void;
export declare function playstatsCasinoInsideTrack(p0: any): void;
export declare function playstatsCasinoLuckySeven(p0: any): void;
export declare function playstatsCasinoRouletteLight(p0: any): void;
export declare function playstatsCasinoBlackjackLight(p0: any): void;
export declare function playstatsCasinoThreeCardPokerLight(p0: any): void;
export declare function playstatsCasinoSlotMachineLight(p0: any): void;
export declare function playstatsCasinoInsideTrackLight(p0: any): void;
export declare function playstatsArcadeGame(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
export declare function playstatsArcadeLoveMatch(p0: any, p1: any): void;
export declare function playstatsFreemodeCasinoMissionEnded(data?: any | null): [void, any];
export declare function playstatsHeist3Drone(p0: any): void;
export declare function playstatsHeist3Hack(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
export declare function playstatsNpcPhone(p0?: any | null): [void, any];
export declare function playstatsArcadeCabinet(p0: any): void;
export declare function playstatsHeist3Finale(p0: any): void;
export declare function playstatsHeist3Prep(p0: any): void;
export declare function playstatsMasterControl(p0: any, p1: any, p2: any, p3: any): void;
export declare function playstatsQuitMode(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function playstatsMissionVote(p0: any): void;
export declare function playstatsNjvsVote(p0: any): void;
export declare function playstatsKillYourself(): void;
export declare function playstatsFmMissionEnd(p0: any, p1: any, p2: any, p3: any): void;
export declare function playstatsHeist4Prep(p0: any): void;
export declare function playstatsHeist4Finale(p0: any): void;
export declare function playstatsHeist4Hack(p0: any, p1: any, p2: any, p3: any, p4: any): void;
export declare function playstatsSubWeap(p0: any, p1: any, p2: any, p3: any): void;
export declare function playstatsFastTrvl(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any, p10: any): void;
export declare function playstatsHubEntry(p0: any): void;
export declare function playstatsDjMissionEnded(p0: any): void;
export declare function playstatsRobberyPrep(p0: any): void;
export declare function playstatsRobberyFinale(p0: any): void;
export declare function playstatsExtraEvent(p0: any): void;
export declare function playstatsCarclubPoints(p0: any): void;
export declare function playstatsCarclubChallenge(p0: any, p1: any, p2: any, p3: any): void;
export declare function playstatsCarclubPrize(p0: number, vehicleModel: number): void;
export declare function playstatsAwardNav(p0: any, p1: any, p2: any, p3: any): void;
export declare function playstatsInstMissionEnd(p0: any): void;
export declare function playstatsHubExit(p0: any): void;
export declare function playstatsVehDel(bossId1: number, bossId2: number, bossType: number, vehicleID: number, reason: number): void;
export declare function playstatsInventory(p0: any): void;
export declare function playstatsAcidMissionEnd(p0: any): void;
export declare function playstatsAcidRnd(p0: any): void;
export declare function playstatsIdle(p0: any, p1: any, p2: any): void;
export declare function playstatsPlayerStyle(p0: any): void;
export declare function playstatsRandomEvent(p0: any): void;
export declare function playstatsAlert(data?: any | null): [void, any];
export declare function playstatsAttritionStageEnd(p0: any): void;
export declare function playstatsShowroomNav(p0: any, p1: any, entity: number): void;
export declare function playstatsShowroomOverview(data?: any | null): [void, any];
export declare function loadAllObjectsNow(): void;
export declare function loadScene(x: number, y: number, z: number): void;
export declare function networkUpdateLoadScene(): boolean;
export declare function isNetworkLoadingScene(): boolean;
export declare function setInteriorActive(interiorID: number, toggle: boolean): void;
export declare function requestModel(model: number): void;
export declare function requestMenuPedModel(model: number): void;
export declare function hasModelLoaded(model: number): boolean;
export declare function requestModelsInRoom(interior: number, roomName: string | null): void;
export declare function setModelAsNoLongerNeeded(model: number): void;
export declare function isModelInCdimage(model: number): boolean;
export declare function isModelValid(model: number): boolean;
export declare function isModelAPed(model: number): boolean;
export declare function isModelAVehicle(model: number): boolean;
export declare function requestCollisionAtCoord(x: number, y: number, z: number): void;
export declare function requestCollisionForModel(model: number): void;
export declare function hasCollisionForModelLoaded(model: number): boolean;
export declare function requestAdditionalCollisionAtCoord(x: number, y: number, z: number): void;
export declare function doesAnimDictExist(animDict: string | null): boolean;
export declare function requestAnimDict(animDict: string | null): void;
export declare function hasAnimDictLoaded(animDict: string | null): boolean;
export declare function removeAnimDict(animDict: string | null): void;
export declare function requestAnimSet(animSet: string | null): void;
export declare function hasAnimSetLoaded(animSet: string | null): boolean;
export declare function removeAnimSet(animSet: string | null): void;
export declare function requestClipSet(clipSet: string | null): void;
export declare function hasClipSetLoaded(clipSet: string | null): boolean;
export declare function removeClipSet(clipSet: string | null): void;
export declare function requestIpl(iplName: string | null): void;
export declare function removeIpl(iplName: string | null): void;
export declare function isIplActive(iplName: string | null): boolean;
export declare function setStreaming(toggle: boolean): void;
export declare function loadGlobalWaterFile(waterType: number): void;
export declare function getGlobalWaterFile(): number;
export declare function setGamePausesForStreaming(toggle: boolean): void;
export declare function setReducePedModelBudget(toggle: boolean): void;
export declare function setReduceVehicleModelBudget(toggle: boolean): void;
export declare function setDitchPoliceModels(toggle: boolean): void;
export declare function getNumberOfStreamingRequests(): number;
export declare function requestPtfxAsset(): void;
export declare function hasPtfxAssetLoaded(): boolean;
export declare function removePtfxAsset(): void;
export declare function requestNamedPtfxAsset(fxName: string | null): void;
export declare function hasNamedPtfxAssetLoaded(fxName: string | null): boolean;
export declare function removeNamedPtfxAsset(fxName: string | null): void;
export declare function setVehiclePopulationBudget(p0: number): void;
export declare function setPedPopulationBudget(p0: number): void;
export declare function clearFocus(): void;
export declare function setFocusPosAndVel(x: number, y: number, z: number, offsetX: number, offsetY: number, offsetZ: number): void;
export declare function setFocusEntity(entity: Entity | number): void;
export declare function isEntityFocus(entity: Entity | number): boolean;
export declare function setRestoreFocusEntity(p0: Entity | number): void;
export declare function setMapdatacullboxEnabled(name: string | null, toggle: boolean): void;
export declare function setAllMapdataCulled(p0: any): void;
export declare function streamvolCreateSphere(x: number, y: number, z: number, rad: number, p4: any, p5: any): number;
export declare function streamvolCreateFrustum(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: any, p8: any): number;
export declare function streamvolCreateLine(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: any): number;
export declare function streamvolDelete(unused: any): void;
export declare function streamvolHasLoaded(unused: any): boolean;
export declare function streamvolIsValid(unused: any): boolean;
export declare function isStreamvolActive(): boolean;
export declare function newLoadSceneStart(posX: number, posY: number, posZ: number, offsetX: number, offsetY: number, offsetZ: number, radius: number, p7: number): boolean;
export declare function newLoadSceneStartSphere(x: number, y: number, z: number, radius: number, p4: any): boolean;
export declare function newLoadSceneStop(): void;
export declare function isNewLoadSceneActive(): boolean;
export declare function isNewLoadSceneLoaded(): boolean;
export declare function isSafeToStartPlayerSwitch(): boolean;
export declare function startPlayerSwitch(from: Ped | Player | LocalPlayer | number, to: Ped | Player | LocalPlayer | number, flags: number, switchType: number): void;
export declare function stopPlayerSwitch(): void;
export declare function isPlayerSwitchInProgress(): boolean;
export declare function getPlayerSwitchType(): number;
export declare function getIdealPlayerSwitchType(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;
export declare function getPlayerSwitchState(): number;
export declare function getPlayerShortSwitchState(): number;
export declare function setPlayerShortSwitchStyle(p0: number): void;
export declare function getPlayerSwitchJumpCutIndex(): number;
export declare function setPlayerSwitchOutro(cameraCoordX: number, cameraCoordY: number, cameraCoordZ: number, camRotationX: number, camRotationY: number, camRotationZ: number, camFov: number, camFarClip: number, rotationOrder: number): void;
export declare function setPlayerSwitchEstablishingShot(name: string | null): void;
export declare function allowPlayerSwitchPan(): void;
export declare function allowPlayerSwitchOutro(): void;
export declare function allowPlayerSwitchAscent(): void;
export declare function allowPlayerSwitchDescent(): void;
export declare function isSwitchReadyForDescent(): boolean;
export declare function enableSwitchPauseBeforeDescent(): void;
export declare function disableSwitchOutroFx(): void;
export declare function switchToMultiFirstpart(ped: Ped | Player | LocalPlayer | number, flags: number, switchType: number): void;
export declare function switchToMultiSecondpart(ped: Ped | Player | LocalPlayer | number): void;
export declare function isSwitchToMultiFirstpartFinished(): boolean;
export declare function getPlayerSwitchInterpOutDuration(): number;
export declare function getPlayerSwitchInterpOutCurrentTime(): number;
export declare function isSwitchSkippingDescent(): boolean;
export declare function setSceneStreamingTracksCamPosThisFrame(): void;
export declare function getLodscale(): number;
export declare function overrideLodscaleThisFrame(scaling: number): void;
export declare function remapLodscaleRangeThisFrame(p0: number, p1: number, p2: number, p3: number): void;
export declare function suppressHdMapStreamingThisFrame(): void;
export declare function setRenderHdOnly(toggle: boolean): void;
export declare function forceAllowTimeBasedFadingThisFrame(): void;
export declare function iplGroupSwapStart(iplName1: string | null, iplName2: string | null): void;
export declare function iplGroupSwapCancel(): void;
export declare function iplGroupSwapIsReady(): boolean;
export declare function iplGroupSwapFinish(): void;
export declare function iplGroupSwapIsActive(): boolean;
export declare function prefetchSrl(srl: string | null): void;
export declare function isSrlLoaded(): boolean;
export declare function beginSrl(): void;
export declare function endSrl(): void;
export declare function setSrlTime(p0: number): void;
export declare function setSrlPostCutsceneCamera(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
export declare function setSrlReadaheadTimes(p0: any, p1: any, p2: any, p3: any): void;
export declare function setSrlLongJumpMode(p0: boolean): void;
export declare function setSrlForcePrestream(p0: any): void;
export declare function setHdArea(x: number, y: number, z: number, radius: number): void;
export declare function clearHdArea(): void;
export declare function initCreatorBudget(): void;
export declare function shutdownCreatorBudget(): void;
export declare function addModelToCreatorBudget(modelHash: number): boolean;
export declare function removeModelFromCreatorBudget(modelHash: number): void;
export declare function getUsedCreatorBudget(): number;
export declare function setIslandEnabled(name: string | null, toggle: boolean): void;
export declare function taskPause(ped: Ped | Player | LocalPlayer | number, ms: number): void;
export declare function taskStandStill(ped: Ped | Player | LocalPlayer | number, time: number): void;
export declare function taskJump(ped: Ped | Player | LocalPlayer | number, usePlayerLaunchForce: boolean, doSuperJump: boolean, useFullSuperJumpForce: boolean): void;
export declare function taskCower(ped: Ped | Player | LocalPlayer | number, duration: number): void;
export declare function taskHandsUp(ped: Ped | Player | LocalPlayer | number, duration: number, facingPed: Ped | Player | LocalPlayer | number, timeToFacePed: number, flags: number): void;
export declare function updateTaskHandsUpDuration(ped: Ped | Player | LocalPlayer | number, duration: number): void;
export declare function taskOpenVehicleDoor(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, timeOut: number, seat: number, speed: number): void;
export declare function taskEnterVehicle(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, timeout: number, seat: number, speed: number, flag: number, overrideEntryClipsetName: string | null, p7: any): void;
export declare function taskLeaveVehicle(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, flags: number): void;
export declare function taskGetOffBoat(ped: Ped | Player | LocalPlayer | number, boat: Vehicle | number): void;
export declare function taskSkyDive(ped: Ped | Player | LocalPlayer | number, instant: boolean): void;
export declare function taskParachute(ped: Ped | Player | LocalPlayer | number, giveParachuteItem: boolean, instant: boolean): void;
export declare function taskParachuteToTarget(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number): void;
export declare function setParachuteTaskTarget(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number): void;
export declare function setParachuteTaskThrust(ped: Ped | Player | LocalPlayer | number, thrust: number): void;
export declare function taskRappelFromHeli(ped: Ped | Player | LocalPlayer | number, minHeightAboveGround: number): void;
export declare function taskVehicleDriveToCoord(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, x: number, y: number, z: number, speed: number, p6: any, vehicleModel: number, drivingMode: number, stopRange: number, straightLineDistance: number): void;
export declare function taskVehicleDriveToCoordLongrange(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, x: number, y: number, z: number, speed: number, driveMode: number, stopRange: number): void;
export declare function taskVehicleDriveWander(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, speed: number, drivingStyle: number): void;
export declare function taskFollowToOffsetOfEntity(ped: Ped | Player | LocalPlayer | number, entity: Entity | number, offsetX: number, offsetY: number, offsetZ: number, movementSpeed: number, timeout: number, stoppingRange: number, persistFollowing: boolean): void;
export declare function taskGoStraightToCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, speed: number, timeout: number, targetHeading: number, distanceToSlide: number): void;
export declare function taskGoStraightToCoordRelativeToEntity(ped: Ped | Player | LocalPlayer | number, entity: Entity | number, x: number, y: number, z: number, moveBlendRatio: number, time: number): void;
export declare function taskAchieveHeading(ped: Ped | Player | LocalPlayer | number, heading: number, timeout: number): void;
export declare function taskFlushRoute(): void;
export declare function taskExtendRoute(x: number, y: number, z: number): void;
export declare function taskFollowPointRoute(ped: Ped | Player | LocalPlayer | number, speed: number, mode: number): void;
export declare function taskGoToEntity(entity: Entity | number, target: Entity | number, duration: number, distance: number, moveBlendRatio: number, slowDownDistance: number, flags: number): void;
export declare function taskSmartFleeCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, distance: number, time: number, preferPavements: boolean, quitIfOutOfRange: boolean): void;
export declare function taskSmartFleePed(ped: Ped | Player | LocalPlayer | number, fleeTarget: Ped | Player | LocalPlayer | number, safeDistance: number, fleeTime: number, preferPavements: boolean, updateToNearestHatedPed: boolean): void;
export declare function taskReactAndFleePed(ped: Ped | Player | LocalPlayer | number, fleeTarget: Ped | Player | LocalPlayer | number): void;
export declare function taskShockingEventReact(ped: Ped | Player | LocalPlayer | number, eventHandle: number): void;
export declare function taskWanderInArea(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, radius: number, minimalLength: number, timeBetweenWalks: number): void;
export declare function taskWanderStandard(ped: Ped | Player | LocalPlayer | number, heading: number, flags: number): void;
export declare function taskWanderSpecific(ped: Ped | Player | LocalPlayer | number, conditionalAnimGroupStr: string | null, conditionalAnimStr: string | null, heading: number): void;
export declare function taskVehiclePark(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, x: number, y: number, z: number, heading: number, mode: number, radius: number, keepEngineOn: boolean): void;
export declare function taskStealthKill(killer: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number, stealthKillActionResultHash: number, desiredMoveBlendRatio: number, stealthFlags: number): void;
export declare function taskPlantBomb(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, heading: number): void;
export declare function taskFollowNavMeshToCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, moveBlendRatio: number, time: number, targetRadius: number, flags: number, targetHeading: number): void;
export declare function taskFollowNavMeshToCoordAdvanced(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, moveBlendRatio: number, time: number, targetRadius: number, flags: number, slideToCoordHeading: number, maxSlopeNavigable: number, clampMaxSearchDistance: number, targetHeading: number): void;
export declare function setPedPathCanUseClimbovers(ped: Ped | Player | LocalPlayer | number, Toggle: boolean): void;
export declare function setPedPathCanUseLadders(ped: Ped | Player | LocalPlayer | number, Toggle: boolean): void;
export declare function setPedPathCanDropFromHeight(ped: Ped | Player | LocalPlayer | number, Toggle: boolean): void;
export declare function setPedPathClimbCostModifier(ped: Ped | Player | LocalPlayer | number, modifier: number): void;
export declare function setPedPathMayEnterWater(ped: Ped | Player | LocalPlayer | number, mayEnterWater: boolean): void;
export declare function setPedPathPreferToAvoidWater(ped: Ped | Player | LocalPlayer | number, avoidWater: boolean): void;
export declare function setPedPathAvoidFire(ped: Ped | Player | LocalPlayer | number, avoidFire: boolean): void;
export declare function setGlobalMinBirdFlightHeight(height: number): void;
export declare function getNavmeshRouteDistanceRemaining(ped: Ped | Player | LocalPlayer | number, distanceRemaining?: number | null, isPathReady?: boolean | null): [number, number, boolean];
export declare function getNavmeshRouteResult(ped: Ped | Player | LocalPlayer | number): number;
export declare function isControlledVehicleUnableToGetToRoad(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function taskGoToCoordAnyMeans(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, moveBlendRatio: number, vehicle: Vehicle | number, useLongRangeVehiclePathing: boolean, drivingFlags: number, maxRangeToShootTargets: number): void;
export declare function taskGoToCoordAnyMeansExtraParams(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, moveBlendRatio: number, vehicle: Vehicle | number, useLongRangeVehiclePathing: boolean, drivingFlags: number, maxRangeToShootTargets: number, extraVehToTargetDistToPreferVehicle: number, driveStraightLineDistance: number, extraFlags: number, warpTimerMS: number): void;
export declare function taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, moveBlendRatio: number, vehicle: Vehicle | number, useLongRangeVehiclePathing: boolean, drivingFlags: number, maxRangeToShootTargets: number, extraVehToTargetDistToPreferVehicle: number, driveStraightLineDistance: number, extraFlags: number, cruiseSpeed: number, targetArriveDist: number): void;
export declare function taskPlayAnim(ped: Ped | Player | LocalPlayer | number, animDictionary: string | null, animationName: string | null, blendInSpeed: number, blendOutSpeed: number, duration: number, flag: number, playbackRate: number, lockX: boolean, lockY: boolean, lockZ: boolean): void;
export declare function taskPlayAnimAdvanced(ped: Ped | Player | LocalPlayer | number, animDict: string | null, animName: string | null, posX: number, posY: number, posZ: number, rotX: number, rotY: number, rotZ: number, animEnterSpeed: number, animExitSpeed: number, duration: number, flag: any, animTime: number, rotOrder: number, ikFlags: number): void;
export declare function stopAnimTask(entity: Entity | number, animDictionary: string | null, animationName: string | null, blendDelta: number): void;
export declare function taskScriptedAnimation(ped: Ped | Player | LocalPlayer | number, priorityLowData: number | null, priorityMidData: number | null, priorityHighData: number | null, blendInDelta: number, blendOutDelta: number): [void, number, number, number];
export declare function playEntityScriptedAnim(entity: Entity | number, priorityLowData: number | null, priorityMidData: number | null, priorityHighData: number | null, blendInDelta: number, blendOutDelta: number): [void, number, number, number];
export declare function stopAnimPlayback(entity: Entity | number, priority: number, secondary: boolean): void;
export declare function setAnimWeight(entity: Entity | number, weight: number, priority: number, index: number, secondary: boolean): void;
export declare function setAnimPhase(entity: Entity | number, phase: number, priority: number, secondary: boolean): void;
export declare function setAnimRate(entity: Entity | number, rate: number, priority: number, secondary: boolean): void;
export declare function setAnimLooped(entity: Entity | number, looped: boolean, priority: number, secondary: boolean): void;
export declare function taskPlayPhoneGestureAnimation(ped: Ped | Player | LocalPlayer | number, animDict: string | null, animation: string | null, boneMaskType: string | null, blendInDuration: number, blendOutDuration: number, isLooping: boolean, holdLastFrame: boolean): void;
export declare function taskStopPhoneGestureAnimation(ped: Ped | Player | LocalPlayer | number, blendOutOverride: number): void;
export declare function isPlayingPhoneGestureAnim(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function getPhoneGestureAnimCurrentTime(ped: Ped | Player | LocalPlayer | number): number;
export declare function getPhoneGestureAnimTotalTime(ped: Ped | Player | LocalPlayer | number): number;
export declare function taskVehiclePlayAnim(vehicle: Vehicle | number, animationSet: string | null, animationName: string | null): void;
export declare function taskLookAtCoord(entity: Entity | number, x: number, y: number, z: number, duration: number, flags: number, priority: number): void;
export declare function taskLookAtEntity(ped: Ped | Player | LocalPlayer | number, lookAt: Entity | number, duration: number, flags: number, priority: number): void;
export declare function taskClearLookAt(ped: Ped | Player | LocalPlayer | number): void;
export declare function openSequenceTask(taskSequenceId?: number | null): [void, number];
export declare function closeSequenceTask(taskSequenceId: number): void;
export declare function taskPerformSequence(ped: Ped | Player | LocalPlayer | number, taskSequenceId: number): void;
export declare function taskPerformSequenceLocally(ped: Ped | Player | LocalPlayer | number, taskSequenceId: number): void;
export declare function clearSequenceTask(taskSequenceId?: number | null): [void, number];
export declare function setSequenceToRepeat(taskSequenceId: number, repeat: boolean): void;
export declare function getSequenceProgress(ped: Ped | Player | LocalPlayer | number): number;
export declare function getIsTaskActive(ped: Ped | Player | LocalPlayer | number, taskIndex: number): boolean;
export declare function getScriptTaskStatus(ped: Ped | Player | LocalPlayer | number, taskHash: number): number;
export declare function getActiveVehicleMissionType(vehicle: Vehicle | number): number;
export declare function taskLeaveAnyVehicle(ped: Ped | Player | LocalPlayer | number, delayTime: number, flags: number): void;
export declare function taskAimGunScripted(ped: Ped | Player | LocalPlayer | number, scriptTask: number, disableBlockingClip: boolean, instantBlendToAim: boolean): void;
export declare function taskAimGunScriptedWithTarget(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, gunTaskType: number, disableBlockingClip: boolean, forceAim: boolean): void;
export declare function updateTaskAimGunScriptedTarget(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, disableBlockingClip: boolean): void;
export declare function getClipSetForScriptedGunTask(gunTaskType: number): string | null;
export declare function taskAimGunAtEntity(ped: Ped | Player | LocalPlayer | number, entity: Entity | number, duration: number, instantBlendToAim: boolean): void;
export declare function taskTurnPedToFaceEntity(ped: Ped | Player | LocalPlayer | number, entity: Entity | number, duration: number): void;
export declare function taskAimGunAtCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, time: number, instantBlendToAim: boolean, playAnimIntro: boolean): void;
export declare function taskShootAtCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, duration: number, firingPattern: number): void;
export declare function taskShuffleToNextVehicleSeat(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, useAlternateShuffle: boolean): void;
export declare function clearPedTasks(ped: Ped | Player | LocalPlayer | number): void;
export declare function clearPedSecondaryTask(ped: Ped | Player | LocalPlayer | number): void;
export declare function taskEveryoneLeaveVehicle(vehicle: Vehicle | number): void;
export declare function taskGotoEntityOffset(ped: Ped | Player | LocalPlayer | number, entity: Entity | number, time: number, seekRadius: number, seekAngleDeg: number, moveBlendRatio: number, gotoEntityOffsetFlags: number): void;
export declare function taskGotoEntityOffsetXy(ped: Ped | Player | LocalPlayer | number, entity: Entity | number, duration: number, targetRadius: number, offsetX: number, offsetY: number, moveBlendRatio: number, gotoEntityOffsetFlags: number): void;
export declare function taskTurnPedToFaceCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, duration: number): void;
export declare function taskVehicleTempAction(driver: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, action: number, time: number): void;
export declare function taskVehicleMission(driver: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, vehicleTarget: Vehicle | number, missionType: number, cruiseSpeed: number, drivingStyle: number, targetReached: number, straightLineDistance: number, DriveAgainstTraffic: boolean): void;
export declare function taskVehicleMissionPedTarget(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, pedTarget: Ped | Player | LocalPlayer | number, missionType: number, maxSpeed: number, drivingStyle: number, minDistance: number, straightLineDistance: number, DriveAgainstTraffic: boolean): void;
export declare function taskVehicleMissionCoorsTarget(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, x: number, y: number, z: number, mission: number, cruiseSpeed: number, drivingStyle: number, targetReached: number, straightLineDistance: number, DriveAgainstTraffic: boolean): void;
export declare function taskVehicleEscort(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, targetVehicle: Vehicle | number, mode: number, speed: number, drivingStyle: number, minDistance: number, minHeightAboveTerrain: number, noRoadsDistance: number): void;
export declare function taskVehicleFollow(driver: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, targetEntity: Entity | number, speed: number, drivingStyle: number, minDistance: number): void;
export declare function taskVehicleChase(driver: Ped | Player | LocalPlayer | number, targetEnt: Entity | number): void;
export declare function taskVehicleHeliProtect(pilot: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, entityToFollow: Entity | number, targetSpeed: number, drivingFlags: number, radius: number, altitude: number, heliFlags: number): void;
export declare function setTaskVehicleChaseBehaviorFlag(ped: Ped | Player | LocalPlayer | number, flag: number, set: boolean): void;
export declare function setTaskVehicleChaseIdealPursuitDistance(ped: Ped | Player | LocalPlayer | number, distance: number): void;
export declare function taskHeliChase(pilot: Ped | Player | LocalPlayer | number, entityToFollow: Entity | number, x: number, y: number, z: number): void;
export declare function taskPlaneChase(pilot: Ped | Player | LocalPlayer | number, entityToFollow: Entity | number, x: number, y: number, z: number): void;
export declare function taskPlaneLand(pilot: Ped | Player | LocalPlayer | number, plane: Vehicle | number, runwayStartX: number, runwayStartY: number, runwayStartZ: number, runwayEndX: number, runwayEndY: number, runwayEndZ: number): void;
export declare function clearDefaultPrimaryTask(ped: Ped | Player | LocalPlayer | number): void;
export declare function clearPrimaryVehicleTask(vehicle: Vehicle | number): void;
export declare function clearVehicleCrashTask(vehicle: Vehicle | number): void;
export declare function taskPlaneGotoPreciseVtol(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, x: number, y: number, z: number, flightHeight: number, minHeightAboveTerrain: number, useDesiredOrientation: boolean, desiredOrientation: number, autopilot: boolean): void;
export declare function taskSubmarineGotoAndStop(ped: Ped | Player | LocalPlayer | number, submarine: Vehicle | number, x: number, y: number, z: number, autopilot: boolean): void;
export declare function taskHeliMission(pilot: Ped | Player | LocalPlayer | number, aircraft: Vehicle | number, targetVehicle: Vehicle | number, targetPed: Ped | Player | LocalPlayer | number, destinationX: number, destinationY: number, destinationZ: number, missionFlag: number, maxSpeed: number, radius: number, targetHeading: number, maxHeight: number, minHeight: number, slowDownDistance: number, behaviorFlags: number): void;
export declare function taskHeliEscortHeli(pilot: Ped | Player | LocalPlayer | number, heli1: Vehicle | number, heli2: Vehicle | number, offsetX: number, offsetY: number, offsetZ: number): void;
export declare function taskPlaneMission(pilot: Ped | Player | LocalPlayer | number, aircraft: Vehicle | number, targetVehicle: Vehicle | number, targetPed: Ped | Player | LocalPlayer | number, destinationX: number, destinationY: number, destinationZ: number, missionFlag: number, angularDrag: number, targetReached: number, targetHeading: number, maxZ: number, minZ: number, precise: boolean): void;
export declare function taskPlaneTaxi(pilot: Ped | Player | LocalPlayer | number, aircraft: Vehicle | number, x: number, y: number, z: number, cruiseSpeed: number, targetReached: number): void;
export declare function taskBoatMission(pedDriver: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, targetVehicle: Vehicle | number, targetPed: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, mission: number, maxSpeed: number, drivingStyle: number, targetReached: number, boatFlags: any): void;
export declare function taskDriveBy(driverPed: Ped | Player | LocalPlayer | number, targetPed: Ped | Player | LocalPlayer | number, targetVehicle: Vehicle | number, targetX: number, targetY: number, targetZ: number, distanceToShoot: number, pedAccuracy: number, pushUnderneathDrivingTaskIfDriving: boolean, firingPattern: number): void;
export declare function setDrivebyTaskTarget(shootingPed: Ped | Player | LocalPlayer | number, targetPed: Ped | Player | LocalPlayer | number, targetVehicle: Vehicle | number, x: number, y: number, z: number): void;
export declare function clearDrivebyTaskUnderneathDrivingTask(ped: Ped | Player | LocalPlayer | number): void;
export declare function isDrivebyTaskUnderneathDrivingTask(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function controlMountedWeapon(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setMountedWeaponTarget(shootingPed: Ped | Player | LocalPlayer | number, targetPed: Ped | Player | LocalPlayer | number, targetVehicle: Vehicle | number, x: number, y: number, z: number, taskMode: number, ignoreTargetVehDeadCheck: boolean): void;
export declare function isMountedWeaponTaskUnderneathDrivingTask(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function taskUseMobilePhone(ped: Ped | Player | LocalPlayer | number, usePhone: boolean, desiredPhoneMode: number): void;
export declare function taskUseMobilePhoneTimed(ped: Ped | Player | LocalPlayer | number, duration: number): void;
export declare function taskChatToPed(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number, flags: number, goToLocationX: number, goToLocationY: number, goToLocationZ: number, headingDegs: number, idleTime: number): void;
export declare function taskWarpPedIntoVehicle(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, seat: number): void;
export declare function taskShootAtEntity(entity: Entity | number, target: Entity | number, duration: number, firingPattern: number): void;
export declare function taskClimb(ped: Ped | Player | LocalPlayer | number, usePlayerLaunchForce: boolean): void;
export declare function taskClimbLadder(ped: Ped | Player | LocalPlayer | number, fast: boolean): void;
export declare function taskRappelDownWallUsingClipsetOverride(ped: Ped | Player | LocalPlayer | number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, minZ: number, ropeHandle: number, clipSet: string | null, p10: any, p11: any): void;
export declare function getTaskRappelDownWallState(ped: Ped | Player | LocalPlayer | number): number;
export declare function clearPedTasksImmediately(ped: Ped | Player | LocalPlayer | number): void;
export declare function taskPerformSequenceFromProgress(ped: Ped | Player | LocalPlayer | number, taskIndex: number, progress1: number, progress2: number): void;
export declare function setNextDesiredMoveState(nextMoveState: number): void;
export declare function setPedDesiredMoveBlendRatio(ped: Ped | Player | LocalPlayer | number, newMoveBlendRatio: number): void;
export declare function getPedDesiredMoveBlendRatio(ped: Ped | Player | LocalPlayer | number): number;
export declare function taskGotoEntityAiming(ped: Ped | Player | LocalPlayer | number, target: Entity | number, distanceToStopAt: number, StartAimingDist: number): void;
export declare function taskSetDecisionMaker(ped: Ped | Player | LocalPlayer | number, decisionMakerId: number): void;
export declare function taskSetSphereDefensiveArea(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, radius: number): void;
export declare function taskClearDefensiveArea(ped: Ped | Player | LocalPlayer | number): void;
export declare function taskPedSlideToCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, heading: number, speed: number): void;
export declare function taskPedSlideToCoordHdgRate(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, heading: number, speed: number, headingChangeRate: number): void;
export declare function addCoverPoint(x: number, y: number, z: number, direction: number, usage: number, height: number, arc: number, isPriority: boolean): number;
export declare function removeCoverPoint(coverpoint: number): void;
export declare function doesScriptedCoverPointExistAtCoords(x: number, y: number, z: number): boolean;
export declare function getScriptedCoverPointCoords(coverpoint: number): Vector3;
export declare function addScriptedCoverArea(x: number, y: number, z: number, radius: number): void;
export declare function taskCombatPed(ped: Ped | Player | LocalPlayer | number, targetPed: Ped | Player | LocalPlayer | number, combatFlags: number, threatResponseFlags: number): void;
export declare function taskCombatPedTimed(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number, time: number, flags: number): void;
export declare function taskSeekCoverFromPos(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, duration: number, allowPeekingAndFiring: boolean): void;
export declare function taskSeekCoverFromPed(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number, duration: number, allowPeekingAndFiring: boolean): void;
export declare function taskSeekCoverToCoverPoint(ped: Ped | Player | LocalPlayer | number, coverpoint: number, x: number, y: number, z: number, time: number, allowPeekingAndFiring: boolean): void;
export declare function taskSeekCoverToCoords(ped: Ped | Player | LocalPlayer | number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, timeout: number, shortRoute: boolean): void;
export declare function taskPutPedDirectlyIntoCover(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, time: number, allowPeekingAndFiring: boolean, blendInDuration: number, forceInitialFacingDirection: boolean, forceFaceLeft: boolean, identifier: number, doEntry: boolean): void;
export declare function taskWarpPedDirectlyIntoCover(ped: Ped | Player | LocalPlayer | number, time: number, allowPeekingAndFiring: boolean, forceInitialFacingDirection: boolean, forceFaceLeft: boolean, identifier: number): void;
export declare function taskExitCover(ped: Ped | Player | LocalPlayer | number, exitType: number, x: number, y: number, z: number): void;
export declare function taskPutPedDirectlyIntoMelee(ped: Ped | Player | LocalPlayer | number, meleeTarget: Ped | Player | LocalPlayer | number, blendInDuration: number, timeInMelee: number, strafePhaseSync: number, aiCombatFlags: number): void;
export declare function taskToggleDuck(ped: Ped | Player | LocalPlayer | number, toggleType: number): void;
export declare function taskGuardCurrentPosition(ped: Ped | Player | LocalPlayer | number, maxPatrolProximity: number, defensiveAreaRadius: number, setDefensiveArea: boolean): void;
export declare function taskGuardAssignedDefensiveArea(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, heading: number, maxPatrolProximity: number, timer: number): void;
export declare function taskGuardSphereDefensiveArea(ped: Ped | Player | LocalPlayer | number, defendPositionX: number, defendPositionY: number, defendPositionZ: number, heading: number, maxPatrolProximity: number, time: number, x: number, y: number, z: number, defensiveAreaRadius: number): void;
export declare function taskStandGuard(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, heading: number, scenarioName: string | null): void;
export declare function setDriveTaskCruiseSpeed(driver: Ped | Player | LocalPlayer | number, cruiseSpeed: number): void;
export declare function setDriveTaskMaxCruiseSpeed(ped: Ped | Player | LocalPlayer | number, speed: number): void;
export declare function setDriveTaskDrivingStyle(ped: Ped | Player | LocalPlayer | number, drivingStyle: number): void;
export declare function addCoverBlockingArea(startX: number, startY: number, startZ: number, endX: number, endY: number, endZ: number, blockObjects: boolean, blockVehicles: boolean, blockMap: boolean, blockPlayer: boolean): void;
export declare function removeAllCoverBlockingAreas(): void;
export declare function removeCoverBlockingAreasAtPosition(x: number, y: number, z: number): void;
export declare function removeSpecificCoverBlockingAreas(startX: number, startY: number, startZ: number, endX: number, endY: number, endZ: number, blockObjects: boolean, blockVehicles: boolean, blockMap: boolean, blockPlayer: boolean): void;
export declare function taskStartScenarioInPlace(ped: Ped | Player | LocalPlayer | number, scenarioName: string | null, unkDelay: number, playEnterAnim: boolean): void;
export declare function taskStartScenarioAtPosition(ped: Ped | Player | LocalPlayer | number, scenarioName: string | null, x: number, y: number, z: number, heading: number, duration: number, sittingScenario: boolean, teleport: boolean): void;
export declare function taskUseNearestScenarioToCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, distance: number, duration: number): void;
export declare function taskUseNearestScenarioToCoordWarp(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, radius: number, timeToLeave: number): void;
export declare function taskUseNearestScenarioChainToCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, maxRange: number, timeToLeave: number): void;
export declare function taskUseNearestScenarioChainToCoordWarp(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, radius: number, timeToLeave: number): void;
export declare function doesScenarioExistInArea(x: number, y: number, z: number, radius: number, mustBeFree: boolean): boolean;
export declare function doesScenarioOfTypeExistInArea(x: number, y: number, z: number, scenarioName: string | null, radius: number, mustBeFree: boolean): boolean;
export declare function isScenarioOccupied(x: number, y: number, z: number, maxRange: number, onlyUsersActuallyAtScenario: boolean): boolean;
export declare function pedHasUseScenarioTask(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function playAnimOnRunningScenario(ped: Ped | Player | LocalPlayer | number, animDict: string | null, animName: string | null): void;
export declare function doesScenarioGroupExist(scenarioGroup: string | null): boolean;
export declare function isScenarioGroupEnabled(scenarioGroup: string | null): boolean;
export declare function setScenarioGroupEnabled(scenarioGroup: string | null, enabled: boolean): void;
export declare function resetScenarioGroupsEnabled(): void;
export declare function setExclusiveScenarioGroup(scenarioGroup: string | null): void;
export declare function resetExclusiveScenarioGroup(): void;
export declare function isScenarioTypeEnabled(scenarioType: string | null): boolean;
export declare function setScenarioTypeEnabled(scenarioType: string | null, toggle: boolean): void;
export declare function resetScenarioTypesEnabled(): void;
export declare function isPedActiveInScenario(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedPlayingBaseClipInScenario(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setPedCanPlayAmbientIdles(ped: Ped | Player | LocalPlayer | number, blockIdleClips: boolean, removeIdleClipIfPlaying: boolean): void;
export declare function taskCombatHatedTargetsInArea(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, radius: number, combatFlags: number): void;
export declare function taskCombatHatedTargetsAroundPed(ped: Ped | Player | LocalPlayer | number, radius: number, combatFlags: number): void;
export declare function taskCombatHatedTargetsAroundPedTimed(ped: Ped | Player | LocalPlayer | number, radius: number, time: number, combatFlags: number): void;
export declare function taskThrowProjectile(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, ignoreCollisionEntityIndex: number, createInvincibleProjectile: boolean): void;
export declare function taskSwapWeapon(ped: Ped | Player | LocalPlayer | number, drawWeapon: boolean): void;
export declare function taskReloadWeapon(ped: Ped | Player | LocalPlayer | number, drawWeapon: boolean): void;
export declare function isPedGettingUp(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function taskWrithe(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number, minFireLoops: number, startState: number, forceShootOnGround: boolean, shootFromGroundTimer: number): void;
export declare function isPedInWrithe(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function openPatrolRoute(patrolRoute: string | null): void;
export declare function closePatrolRoute(): void;
export declare function addPatrolRouteNode(nodeId: number, nodeType: string | null, posX: number, posY: number, posZ: number, headingX: number, headingY: number, headingZ: number, duration: number): void;
export declare function addPatrolRouteLink(nodeId1: number, nodeId2: number): void;
export declare function createPatrolRoute(): void;
export declare function deletePatrolRoute(patrolRoute: string | null): void;
export declare function getPatrolTaskInfo(ped: Ped | Player | LocalPlayer | number, timeLeftAtNode?: number | null, nodeId?: number | null): [boolean, number, number];
export declare function taskPatrol(ped: Ped | Player | LocalPlayer | number, patrolRouteName: string | null, alertState: number, canChatToPeds: boolean, useHeadLookAt: boolean): void;
export declare function taskStayInCover(ped: Ped | Player | LocalPlayer | number): void;
export declare function addVehicleSubtaskAttackCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number): void;
export declare function addVehicleSubtaskAttackPed(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number): void;
export declare function taskVehicleShootAtPed(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number, fireTolerance: number): void;
export declare function taskVehicleAimAtPed(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number): void;
export declare function taskVehicleShootAtCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, fireTolerance: number): void;
export declare function taskVehicleAimAtCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number): void;
export declare function taskVehicleGotoNavmesh(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, x: number, y: number, z: number, speed: number, behaviorFlag: number, stoppingRange: number): void;
export declare function taskGoToCoordWhileAimingAtCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, aimAtX: number, aimAtY: number, aimAtZ: number, moveBlendRatio: number, shoot: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, navFlags: number, instantBlendToAim: boolean, firingPattern: number): void;
export declare function taskGoToCoordWhileAimingAtEntity(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, aimAtID: Entity | number, moveBlendRatio: number, shoot: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, navFlags: number, instantBlendToAim: boolean, firingPattern: number, time: number): void;
export declare function taskGoToCoordAndAimAtHatedEntitiesNearCoord(pedHandle: Ped | Player | LocalPlayer | number, goToLocationX: number, goToLocationY: number, goToLocationZ: number, focusLocationX: number, focusLocationY: number, focusLocationZ: number, speed: number, shootAtEnemies: boolean, distanceToStopAt: number, noRoadsDistance: number, useNavMesh: boolean, navFlags: number, taskFlags: number, firingPattern: number): void;
export declare function taskGoToEntityWhileAimingAtCoord(ped: Ped | Player | LocalPlayer | number, entity: Entity | number, aimX: number, aimY: number, aimZ: number, moveBlendRatio: number, shoot: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, instantBlendToAim: boolean, firingPattern: number): void;
export declare function taskGoToEntityWhileAimingAtEntity(ped: Ped | Player | LocalPlayer | number, entityToWalkTo: Entity | number, entityToAimAt: Entity | number, speed: number, shootatEntity: boolean, targetRadius: number, slowDistance: number, useNavMesh: boolean, instantBlendToAim: boolean, firingPattern: number): void;
export declare function setHighFallTask(ped: Ped | Player | LocalPlayer | number, minTime: number, maxTime: number, entryType: number): void;
export declare function requestWaypointRecording(name: string | null): void;
export declare function getIsWaypointRecordingLoaded(name: string | null): boolean;
export declare function removeWaypointRecording(name: string | null): void;
export declare function waypointRecordingGetNumPoints(name: string | null, points?: number | null): [boolean, number];
export declare function waypointRecordingGetCoord(name: string | null, point: number, coord?: Vector3 | null): [boolean, Vector3];
export declare function waypointRecordingGetSpeedAtPoint(name: string | null, point: number): number;
export declare function waypointRecordingGetClosestWaypoint(name: string | null, x: number, y: number, z: number, point?: number | null): [boolean, number];
export declare function taskFollowWaypointRecording(ped: Ped | Player | LocalPlayer | number, name: string | null, p2: number, p3: number, p4: number): void;
export declare function isWaypointPlaybackGoingOnForPed(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function getPedWaypointProgress(ped: Ped | Player | LocalPlayer | number): number;
export declare function getPedWaypointDistance(p0: any): number;
export declare function setPedWaypointRouteOffset(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number): boolean;
export declare function getWaypointDistanceAlongRoute(name: string | null, point: number): number;
export declare function waypointPlaybackGetIsPaused(p0: any): boolean;
export declare function waypointPlaybackPause(p0: any, p1: boolean, p2: boolean): void;
export declare function waypointPlaybackResume(p0: any, p1: boolean, p2: any, p3: any): void;
export declare function waypointPlaybackOverrideSpeed(p0: any, p1: number, p2: boolean): void;
export declare function waypointPlaybackUseDefaultSpeed(p0: any): void;
export declare function useWaypointRecordingAsAssistedMovementRoute(name: string | null, p1: boolean, p2: number, p3: number): void;
export declare function waypointPlaybackStartAimingAtPed(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number, p2: boolean): void;
export declare function waypointPlaybackStartAimingAtCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, p4: boolean): void;
export declare function waypointPlaybackStartShootingAtPed(ped: Ped | Player | LocalPlayer | number, ped2: Ped | Player | LocalPlayer | number, p2: boolean, p3: boolean): void;
export declare function waypointPlaybackStartShootingAtCoord(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number, p4: boolean, firingPattern: number): void;
export declare function waypointPlaybackStopAimingOrShooting(ped: Ped | Player | LocalPlayer | number): void;
export declare function assistedMovementRequestRoute(route: string | null): void;
export declare function assistedMovementRemoveRoute(route: string | null): void;
export declare function assistedMovementIsRouteLoaded(route: string | null): boolean;
export declare function assistedMovementSetRouteProperties(route: string | null, props: number): void;
export declare function assistedMovementOverrideLoadDistanceThisFrame(dist: number): void;
export declare function taskVehicleFollowWaypointRecording(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, WPRecording: string | null, p3: number, p4: number, p5: number, p6: number, p7: number, p8: boolean, p9: number): void;
export declare function isWaypointPlaybackGoingOnForVehicle(vehicle: Vehicle | number): boolean;
export declare function getVehicleWaypointProgress(vehicle: Vehicle | number): number;
export declare function getVehicleWaypointTargetPoint(vehicle: Vehicle | number): number;
export declare function vehicleWaypointPlaybackPause(vehicle: Vehicle | number): void;
export declare function vehicleWaypointPlaybackResume(vehicle: Vehicle | number): void;
export declare function vehicleWaypointPlaybackUseDefaultSpeed(vehicle: Vehicle | number): void;
export declare function vehicleWaypointPlaybackOverrideSpeed(vehicle: Vehicle | number, speed: number): void;
export declare function taskSetBlockingOfNonTemporaryEvents(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function taskForceMotionState(ped: Ped | Player | LocalPlayer | number, state: number, forceRestart: boolean): void;
export declare function taskMoveNetworkByName(ped: Ped | Player | LocalPlayer | number, task: string | null, multiplier: number, allowOverrideCloneUpdate: boolean, animDict: string | null, flags: number): void;
export declare function taskMoveNetworkAdvancedByName(ped: Ped | Player | LocalPlayer | number, network: string | null, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, rotOrder: number, blendDuration: number, allowOverrideCloneUpdate: boolean, animDict: string | null, flags: number): void;
export declare function taskMoveNetworkByNameWithInitParams(ped: Ped | Player | LocalPlayer | number, network: string | null, initialParameters: number | null, blendDuration: number, allowOverrideCloneUpdate: boolean, animDict: string | null, flags: number): [void, number];
export declare function taskMoveNetworkAdvancedByNameWithInitParams(ped: Ped | Player | LocalPlayer | number, network: string | null, initialParameters: number | null, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, rotOrder: number, blendDuration: number, allowOverrideCloneUpdate: boolean, dictionary: string | null, flags: number): [void, number];
export declare function isTaskMoveNetworkActive(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isTaskMoveNetworkReadyForTransition(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function requestTaskMoveNetworkStateTransition(ped: Ped | Player | LocalPlayer | number, name: string | null): boolean;
export declare function setExpectedCloneNextTaskMoveNetworkState(ped: Ped | Player | LocalPlayer | number, state: string | null): boolean;
export declare function getTaskMoveNetworkState(ped: Ped | Player | LocalPlayer | number): string | null;
export declare function setTaskMoveNetworkAnimSet(ped: Ped | Player | LocalPlayer | number, clipSet: number, variableClipSet: number): void;
export declare function setTaskMoveNetworkSignalFloat(ped: Ped | Player | LocalPlayer | number, signalName: string | null, value: number): void;
export declare function setTaskMoveNetworkSignalLocalFloat(ped: Ped | Player | LocalPlayer | number, signalName: string | null, value: number): void;
export declare function setTaskMoveNetworkSignalFloatLerpRate(ped: Ped | Player | LocalPlayer | number, signalName: string | null, value: number): void;
export declare function setTaskMoveNetworkSignalBool(ped: Ped | Player | LocalPlayer | number, signalName: string | null, value: boolean): void;
export declare function getTaskMoveNetworkSignalFloat(ped: Ped | Player | LocalPlayer | number, signalName: string | null): number;
export declare function getTaskMoveNetworkSignalBool(ped: Ped | Player | LocalPlayer | number, signalName: string | null): boolean;
export declare function getTaskMoveNetworkEvent(ped: Ped | Player | LocalPlayer | number, eventName: string | null): boolean;
export declare function setTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed(ped: Ped | Player | LocalPlayer | number, enable: boolean): boolean;
export declare function setScriptTaskEnableCollisionOnNetworkCloneWhenFixed(ped: Ped | Player | LocalPlayer | number, enable: boolean): void;
export declare function isMoveBlendRatioStill(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isMoveBlendRatioWalking(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isMoveBlendRatioRunning(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isMoveBlendRatioSprinting(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedStill(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedWalking(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedRunning(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedSprinting(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedStrafing(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function taskSynchronizedScene(ped: Ped | Player | LocalPlayer | number, scene: number, animDictionary: string | null, animationName: string | null, blendIn: number, blendOut: number, flags: number, ragdollBlockingFlags: number, moverBlendDelta: number, ikFlags: number): void;
export declare function taskAgitatedActionConfrontResponse(ped: Ped | Player | LocalPlayer | number, ped2: Ped | Player | LocalPlayer | number): void;
export declare function taskSweepAimEntity(ped: Ped | Player | LocalPlayer | number, animDict: string | null, lowAnimName: string | null, medAnimName: string | null, hiAnimName: string | null, runtime: number, targetEntity: Entity | number, turnRate: number, blendInDuration: number): void;
export declare function updateTaskSweepAimEntity(ped: Ped | Player | LocalPlayer | number, entity: Entity | number): void;
export declare function taskSweepAimPosition(ped: Ped | Player | LocalPlayer | number, animDict: string | null, lowAnimName: string | null, medAnimName: string | null, hiAnimName: string | null, runtime: number, x: number, y: number, z: number, turnRate: number, blendInDuration: number): void;
export declare function updateTaskSweepAimPosition(ped: Ped | Player | LocalPlayer | number, x: number, y: number, z: number): void;
export declare function taskArrestPed(ped: Ped | Player | LocalPlayer | number, target: Ped | Player | LocalPlayer | number): void;
export declare function isPedRunningArrestTask(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isPedBeingArrested(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function uncuffPed(ped: Ped | Player | LocalPlayer | number): void;
export declare function isPedCuffed(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function createVehicle(modelHash: number, x: number, y: number, z: number, heading: number, isNetwork: boolean, bScriptHostVeh: boolean, p7: boolean): number;
export declare function deleteVehicle(vehicle?: Vehicle | number | null): [void, number];
export declare function setVehicleAllowHomingMissleLockon(vehicle: Vehicle | number, toggle: boolean, p2: boolean): void;
export declare function setVehicleAllowHomingMissleLockonSynced(vehicle: Vehicle | number, canBeLockedOn: boolean, p2: boolean): void;
export declare function setVehicleAllowNoPassengersLockon(veh: Vehicle | number, toggle: boolean): void;
export declare function getVehicleHomingLockonState(vehicle: Vehicle | number): number;
export declare function getVehicleHomingLockedontoState(p0: any): number;
export declare function setVehicleHomingLockedontoState(p0: any, p1: any): void;
export declare function isVehicleModel(vehicle: Vehicle | number, model: number): boolean;
export declare function doesScriptVehicleGeneratorExist(vehicleGenerator: number): boolean;
export declare function createScriptVehicleGenerator(x: number, y: number, z: number, heading: number, p4: number, p5: number, modelHash: number, p7: number, p8: number, p9: number, p10: number, p11: boolean, p12: boolean, p13: boolean, p14: boolean, p15: boolean, p16: number): number;
export declare function deleteScriptVehicleGenerator(vehicleGenerator: number): void;
export declare function setScriptVehicleGenerator(vehicleGenerator: number, enabled: boolean): void;
export declare function setAllVehicleGeneratorsActiveInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, toggle: boolean, p7: boolean): void;
export declare function setAllVehicleGeneratorsActive(): void;
export declare function setAllLowPriorityVehicleGeneratorsActive(active: boolean): void;
export declare function setVehicleGeneratorAreaOfInterest(x: number, y: number, z: number, radius: number): void;
export declare function clearVehicleGeneratorAreaOfInterest(): void;
export declare function setVehicleOnGroundProperly(vehicle: Vehicle | number, p1: number): boolean;
export declare function setVehicleUseCutsceneWheelCompression(p0: Vehicle | number, p1: boolean, p2: boolean, p3: boolean): boolean;
export declare function isVehicleStuckOnRoof(vehicle: Vehicle | number): boolean;
export declare function addVehicleUpsidedownCheck(vehicle: Vehicle | number): void;
export declare function removeVehicleUpsidedownCheck(vehicle: Vehicle | number): void;
export declare function isVehicleStopped(vehicle: Vehicle | number): boolean;
export declare function getVehicleNumberOfPassengers(vehicle: Vehicle | number, includeDriver: boolean, includeDeadOccupants: boolean): number;
export declare function getVehicleMaxNumberOfPassengers(vehicle: Vehicle | number): number;
export declare function getVehicleModelNumberOfSeats(modelHash: number): number;
export declare function isSeatWarpOnly(vehicle: Vehicle | number, seatIndex: number): boolean;
export declare function isTurretSeat(vehicle: Vehicle | number, seatIndex: number): boolean;
export declare function doesVehicleAllowRappel(vehicle: Vehicle | number): boolean;
export declare function setVehicleDensityMultiplierThisFrame(multiplier: number): void;
export declare function setRandomVehicleDensityMultiplierThisFrame(multiplier: number): void;
export declare function setParkedVehicleDensityMultiplierThisFrame(multiplier: number): void;
export declare function setDisableRandomTrainsThisFrame(toggle: boolean): void;
export declare function setAmbientVehicleRangeMultiplierThisFrame(value: number): void;
export declare function setFarDrawVehicles(toggle: boolean): void;
export declare function setNumberOfParkedVehicles(value: number): void;
export declare function setVehicleDoorsLocked(vehicle: Vehicle | number, doorLockStatus: number): void;
export declare function setVehicleIndividualDoorsLocked(vehicle: Vehicle | number, doorId: number, doorLockStatus: number): void;
export declare function setVehicleHasMutedSirens(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleDoorsLockedForPlayer(vehicle: Vehicle | number, player: Player | number, toggle: boolean): void;
export declare function getVehicleDoorsLockedForPlayer(vehicle: Vehicle | number, player: Player | number): boolean;
export declare function setVehicleDoorsLockedForAllPlayers(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleDoorsLockedForNonScriptPlayers(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleDoorsLockedForTeam(vehicle: Vehicle | number, team: number, toggle: boolean): void;
export declare function setVehicleDoorsLockedForAllTeams(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleDontTerminateTaskWhenAchieved(vehicle: Vehicle | number): void;
export declare function setVehicleMaxLaunchEngineRevs(vehicle: Vehicle | number, modifier: number): void;
export declare function getVehicleThrottle(vehicle: Vehicle | number): number;
export declare function explodeVehicle(vehicle: Vehicle | number, isAudible: boolean, isInvisible: boolean): void;
export declare function setVehicleOutOfControl(vehicle: Vehicle | number, killDriver: boolean, explodeOnImpact: boolean): void;
export declare function setVehicleTimedExplosion(vehicle: Vehicle | number, ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function addVehiclePhoneExplosiveDevice(vehicle: Vehicle | number): void;
export declare function clearVehiclePhoneExplosiveDevice(): void;
export declare function hasVehiclePhoneExplosiveDevice(): boolean;
export declare function detonateVehiclePhoneExplosiveDevice(): void;
export declare function haveVehicleRearDoorsBeenBlownOpenByStickybomb(vehicle: Vehicle | number): boolean;
export declare function setTaxiLights(vehicle: Vehicle | number, state: boolean): void;
export declare function isTaxiLightOn(vehicle: Vehicle | number): boolean;
export declare function isVehicleInGarageArea(garageName: string | null, vehicle: Vehicle | number): boolean;
export declare function setVehicleColours(vehicle: Vehicle | number, colorPrimary: number, colorSecondary: number): void;
export declare function setVehicleFullbeam(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleIsRacing(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleCustomPrimaryColour(vehicle: Vehicle | number, r: number, g: number, b: number): void;
export declare function getVehicleCustomPrimaryColour(vehicle: Vehicle | number, r?: number | null, g?: number | null, b?: number | null): [void, number, number, number];
export declare function clearVehicleCustomPrimaryColour(vehicle: Vehicle | number): void;
export declare function getIsVehiclePrimaryColourCustom(vehicle: Vehicle | number): boolean;
export declare function setVehicleCustomSecondaryColour(vehicle: Vehicle | number, r: number, g: number, b: number): void;
export declare function getVehicleCustomSecondaryColour(vehicle: Vehicle | number, r?: number | null, g?: number | null, b?: number | null): [void, number, number, number];
export declare function clearVehicleCustomSecondaryColour(vehicle: Vehicle | number): void;
export declare function getIsVehicleSecondaryColourCustom(vehicle: Vehicle | number): boolean;
export declare function setVehicleEnveffScale(vehicle: Vehicle | number, fade: number): void;
export declare function getVehicleEnveffScale(vehicle: Vehicle | number): number;
export declare function setCanResprayVehicle(vehicle: Vehicle | number, state: boolean): void;
export declare function setGoonBossVehicle(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setOpenRearDoorsOnExplosion(vehicle: Vehicle | number, toggle: boolean): void;
export declare function forceSubmarineSurfaceMode(vehicle: Vehicle | number, toggle: boolean): void;
export declare function forceSubmarineNeurtalBuoyancy(p0: any, p1: any): void;
export declare function setSubmarineCrushDepths(vehicle: Vehicle | number, p1: boolean, depth1: number, depth2: number, depth3: number): void;
export declare function getSubmarineIsUnderDesignDepth(submarine: Vehicle | number): boolean;
export declare function getSubmarineNumberOfAirLeaks(submarine: Vehicle | number): number;
export declare function setBoatIgnoreLandProbes(p0: any, p1: any): void;
export declare function setBoundsAffectWaterProbes(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setBoatAnchor(vehicle: Vehicle | number, toggle: boolean): void;
export declare function canAnchorBoatHere(vehicle: Vehicle | number): boolean;
export declare function canAnchorBoatHereIgnorePlayers(vehicle: Vehicle | number): boolean;
export declare function setBoatRemainsAnchoredWhilePlayerIsDriver(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setForceLowLodAnchorMode(vehicle: Vehicle | number, p1: boolean): void;
export declare function setBoatLowLodAnchorDistance(vehicle: Vehicle | number, value: number): void;
export declare function isBoatAnchored(vehicle: Vehicle | number): boolean;
export declare function setBoatSinksWhenWrecked(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setBoatWrecked(vehicle: Vehicle | number): void;
export declare function setVehicleSiren(vehicle: Vehicle | number, toggle: boolean): void;
export declare function isVehicleSirenOn(vehicle: Vehicle | number): boolean;
export declare function isVehicleSirenAudioOn(vehicle: Vehicle | number): boolean;
export declare function setVehicleStrong(vehicle: Vehicle | number, toggle: boolean): void;
export declare function removeVehicleStuckCheck(vehicle: Vehicle | number): void;
export declare function getVehicleColours(vehicle: Vehicle | number, colorPrimary?: number | null, colorSecondary?: number | null): [void, number, number];
export declare function isVehicleSeatFree(vehicle: Vehicle | number, seatIndex: number, isTaskRunning: boolean): boolean;
export declare function getPedInVehicleSeat(vehicle: Vehicle | number, seatIndex: number, p2: boolean): number;
export declare function getLastPedInVehicleSeat(vehicle: Vehicle | number, seatIndex: number): number;
export declare function getVehicleLightsState(vehicle: Vehicle | number, lightsOn?: boolean | null, highbeamsOn?: boolean | null): [boolean, boolean, boolean];
export declare function isVehicleTyreBurst(vehicle: Vehicle | number, wheelID: number, completely: boolean): boolean;
export declare function setVehicleForwardSpeed(vehicle: Vehicle | number, speed: number): void;
export declare function setVehicleForwardSpeedXy(vehicle: Vehicle | number, speed: number): void;
export declare function bringVehicleToHalt(vehicle: Vehicle | number, distance: number, duration: number, p3: boolean): void;
export declare function setVehicleSteerForBuildings(vehicle: Vehicle | number, p1: any): void;
export declare function setVehicleCausesSwerving(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setIgnorePlanesSmallPitchChange(p0: any, p1: any): void;
export declare function stopBringingVehicleToHalt(vehicle: Vehicle | number): void;
export declare function isVehicleBeingBroughtToHalt(vehicle: Vehicle | number): boolean;
export declare function lowerForkliftForks(forklift: Vehicle | number): void;
export declare function setForkliftForkHeight(vehicle: Vehicle | number, height: number): void;
export declare function isEntityAttachedToHandlerFrame(vehicle: Vehicle | number, entity: Entity | number): boolean;
export declare function isAnyEntityAttachedToHandlerFrame(vehicle: Vehicle | number): boolean;
export declare function findHandlerVehicleContainerIsAttachedTo(entity: Entity | number): number;
export declare function isHandlerFrameLinedUpWithContainer(vehicle: Vehicle | number, entity: Entity | number): boolean;
export declare function attachContainerToHandlerFrameWhenLinedUp(vehicle: Vehicle | number, entity: Entity | number): void;
export declare function detachContainerFromHandlerFrame(vehicle: Vehicle | number): void;
export declare function setVehicleDisableHeightMapAvoidance(vehicle: Vehicle | number, p1: boolean): void;
export declare function setBoatDisableAvoidance(vehicle: Vehicle | number, p1: boolean): void;
export declare function isHeliLandingAreaBlocked(vehicle: Vehicle | number): boolean;
export declare function setShortSlowdownForLanding(vehicle: Vehicle | number): void;
export declare function setHeliTurbulenceScalar(vehicle: Vehicle | number, p1: number): void;
export declare function setCarBootOpen(vehicle: Vehicle | number): void;
export declare function setVehicleTyreBurst(vehicle: Vehicle | number, index: number, onRim: boolean, p3: number): void;
export declare function setVehicleDoorsShut(vehicle: Vehicle | number, closeInstantly: boolean): void;
export declare function setVehicleTyresCanBurst(vehicle: Vehicle | number, toggle: boolean): void;
export declare function getVehicleTyresCanBurst(vehicle: Vehicle | number): boolean;
export declare function setVehicleWheelsCanBreak(vehicle: Vehicle | number, enabled: boolean): void;
export declare function setVehicleDoorOpen(vehicle: Vehicle | number, doorId: number, loose: boolean, openInstantly: boolean): void;
export declare function setVehicleDoorAutoLock(vehicle: Vehicle | number, doorId: number, toggle: boolean): void;
export declare function setFleeingVehiclesUseSwitchedOffNodes(p0: any): void;
export declare function removeVehicleWindow(vehicle: Vehicle | number, windowIndex: number): void;
export declare function rollDownWindows(vehicle: Vehicle | number): void;
export declare function rollDownWindow(vehicle: Vehicle | number, windowIndex: number): void;
export declare function rollUpWindow(vehicle: Vehicle | number, windowIndex: number): void;
export declare function smashVehicleWindow(vehicle: Vehicle | number, windowIndex: number): void;
export declare function fixVehicleWindow(vehicle: Vehicle | number, windowIndex: number): void;
export declare function popOutVehicleWindscreen(vehicle: Vehicle | number): void;
export declare function popOffVehicleRoofWithImpulse(vehicle: Vehicle | number, x: number, y: number, z: number): void;
export declare function setVehicleLights(vehicle: Vehicle | number, state: number): void;
export declare function setVehicleUsePlayerLightSettings(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleHeadlightShadows(vehicle: Vehicle | number, p1: number): void;
export declare function setVehicleAlarm(vehicle: Vehicle | number, state: boolean): void;
export declare function startVehicleAlarm(vehicle: Vehicle | number): void;
export declare function isVehicleAlarmActivated(vehicle: Vehicle | number): boolean;
export declare function setVehicleInteriorlight(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleForceInteriorlight(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleLightMultiplier(vehicle: Vehicle | number, multiplier: number): void;
export declare function attachVehicleToTrailer(vehicle: Vehicle | number, trailer: Vehicle | number, radius: number): void;
export declare function attachVehicleOnToTrailer(vehicle: Vehicle | number, trailer: Vehicle | number, offsetX: number, offsetY: number, offsetZ: number, coordsX: number, coordsY: number, coordsZ: number, rotationX: number, rotationY: number, rotationZ: number, disableCollisions: number): void;
export declare function stabiliseEntityAttachedToHeli(vehicle: Vehicle | number, entity: Entity | number, p2: number): void;
export declare function detachVehicleFromTrailer(vehicle: Vehicle | number): void;
export declare function isVehicleAttachedToTrailer(vehicle: Vehicle | number): boolean;
export declare function setTrailerInverseMassScale(vehicle: Vehicle | number, p1: number): void;
export declare function setTrailerLegsRaised(vehicle: Vehicle | number): void;
export declare function setTrailerLegsLowered(vehicle: Vehicle | number): void;
export declare function setVehicleTyreFixed(vehicle: Vehicle | number, tyreIndex: number): void;
export declare function setVehicleNumberPlateText(vehicle: Vehicle | number, plateText: string | null): void;
export declare function getVehicleNumberPlateText(vehicle: Vehicle | number): string | null;
export declare function getNumberOfVehicleNumberPlates(): number;
export declare function setVehicleNumberPlateTextIndex(vehicle: Vehicle | number, plateIndex: number): void;
export declare function getVehicleNumberPlateTextIndex(vehicle: Vehicle | number): number;
export declare function setRandomTrains(toggle: boolean): void;
export declare function createMissionTrain(variation: number, x: number, y: number, z: number, direction: boolean, p5: any, p6: any): number;
export declare function switchTrainTrack(trackId: number, state: boolean): void;
export declare function setTrainTrackSpawnFrequency(trackIndex: number, frequency: number): void;
export declare function allowTrainToBeRemovedByPopulation(p0: any): void;
export declare function deleteAllTrains(): void;
export declare function setTrainSpeed(train: Vehicle | number, speed: number): void;
export declare function setTrainCruiseSpeed(train: Vehicle | number, speed: number): void;
export declare function setRandomBoats(toggle: boolean): void;
export declare function setRandomBoatsMp(toggle: boolean): void;
export declare function setGarbageTrucks(toggle: boolean): void;
export declare function doesVehicleHaveStuckVehicleCheck(vehicle: Vehicle | number): boolean;
export declare function getVehicleRecordingId(recording: number, script: string | null): number;
export declare function requestVehicleRecording(recording: number, script: string | null): void;
export declare function hasVehicleRecordingBeenLoaded(recording: number, script: string | null): boolean;
export declare function removeVehicleRecording(recording: number, script: string | null): void;
export declare function getPositionOfVehicleRecordingIdAtTime(id: number, time: number): Vector3;
export declare function getPositionOfVehicleRecordingAtTime(recording: number, time: number, script: string | null): Vector3;
export declare function getRotationOfVehicleRecordingIdAtTime(id: number, time: number): Vector3;
export declare function getRotationOfVehicleRecordingAtTime(recording: number, time: number, script: string | null): Vector3;
export declare function getTotalDurationOfVehicleRecordingId(id: number): number;
export declare function getTotalDurationOfVehicleRecording(recording: number, script: string | null): number;
export declare function getPositionInRecording(vehicle: Vehicle | number): number;
export declare function getTimePositionInRecording(vehicle: Vehicle | number): number;
export declare function startPlaybackRecordedVehicle(vehicle: Vehicle | number, recording: number, script: string | null, p3: boolean): void;
export declare function startPlaybackRecordedVehicleWithFlags(vehicle: Vehicle | number, recording: number, script: string | null, flags: number, time: number, drivingStyle: number): void;
export declare function forcePlaybackRecordedVehicleUpdate(vehicle: Vehicle | number, p1: boolean): void;
export declare function stopPlaybackRecordedVehicle(vehicle: Vehicle | number): void;
export declare function pausePlaybackRecordedVehicle(vehicle: Vehicle | number): void;
export declare function unpausePlaybackRecordedVehicle(vehicle: Vehicle | number): void;
export declare function isPlaybackGoingOnForVehicle(vehicle: Vehicle | number): boolean;
export declare function isPlaybackUsingAiGoingOnForVehicle(vehicle: Vehicle | number): boolean;
export declare function getCurrentPlaybackForVehicle(vehicle: Vehicle | number): number;
export declare function skipToEndAndStopPlaybackRecordedVehicle(vehicle: Vehicle | number): void;
export declare function setPlaybackSpeed(vehicle: Vehicle | number, speed: number): void;
export declare function startPlaybackRecordedVehicleUsingAi(vehicle: Vehicle | number, recording: number, script: string | null, speed: number, drivingStyle: number): void;
export declare function skipTimeInPlaybackRecordedVehicle(vehicle: Vehicle | number, time: number): void;
export declare function setPlaybackToUseAi(vehicle: Vehicle | number, drivingStyle: number): void;
export declare function setPlaybackToUseAiTryToRevertBackLater(vehicle: Vehicle | number, time: number, drivingStyle: number, p3: boolean): void;
export declare function setAdditionalRotationForRecordedVehiclePlayback(vehicle: Vehicle | number, x: number, y: number, z: number, p4: any): void;
export declare function setPositionOffsetForRecordedVehiclePlayback(vehicle: Vehicle | number, x: number, y: number, z: number): void;
export declare function setGlobalPositionOffsetForRecordedVehiclePlayback(vehicle: Vehicle | number, x: number, y: number, z: number): void;
export declare function setShouldLerpFromAiToFullRecording(vehicle: Vehicle | number, p1: boolean): void;
export declare function explodeVehicleInCutscene(vehicle: Vehicle | number, p1: boolean): void;
export declare function addVehicleStuckCheckWithWarp(p0: any, p1: number, p2: any, p3: boolean, p4: boolean, p5: boolean, p6: any): void;
export declare function setVehicleModelIsSuppressed(model: number, suppressed: boolean): void;
export declare function getRandomVehicleInSphere(x: number, y: number, z: number, radius: number, modelHash: number, flags: number): number;
export declare function getRandomVehicleFrontBumperInSphere(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
export declare function getRandomVehicleBackBumperInSphere(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
export declare function getClosestVehicle(x: number, y: number, z: number, radius: number, modelHash: number, flags: number): number;
export declare function getTrainCarriage(train: Vehicle | number, trailerNumber: number): number;
export declare function isMissionTrain(train: Vehicle | number): boolean;
export declare function deleteMissionTrain(train?: Vehicle | number | null): [void, number];
export declare function setMissionTrainAsNoLongerNeeded(train: Vehicle | number | null, p1: boolean): [void, number];
export declare function setMissionTrainCoords(train: Vehicle | number, x: number, y: number, z: number): void;
export declare function isThisModelABoat(model: number): boolean;
export declare function isThisModelAJetski(model: number): boolean;
export declare function isThisModelAPlane(model: number): boolean;
export declare function isThisModelAHeli(model: number): boolean;
export declare function isThisModelACar(model: number): boolean;
export declare function isThisModelATrain(model: number): boolean;
export declare function isThisModelABike(model: number): boolean;
export declare function isThisModelABicycle(model: number): boolean;
export declare function isThisModelAQuadbike(model: number): boolean;
export declare function isThisModelAnAmphibiousCar(model: number): boolean;
export declare function isThisModelAnAmphibiousQuadbike(model: number): boolean;
export declare function setHeliBladesFullSpeed(vehicle: Vehicle | number): void;
export declare function setHeliBladesSpeed(vehicle: Vehicle | number, speed: number): void;
export declare function forceSubThrottleForTime(vehicle: Vehicle | number, p1: number, p2: number): void;
export declare function setVehicleCanBeTargetted(vehicle: Vehicle | number, state: boolean): void;
export declare function setDontAllowPlayerToEnterVehicleIfLockedForPlayer(vehicle: Vehicle | number, p1: boolean): void;
export declare function setVehicleCanBeVisiblyDamaged(vehicle: Vehicle | number, state: boolean): void;
export declare function setVehicleHasUnbreakableLights(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleRespectsLocksWhenHasDriver(vehicle: Vehicle | number, p1: boolean): void;
export declare function setVehicleCanEjectPassengersIfLocked(p0: any, p1: any): void;
export declare function getVehicleDirtLevel(vehicle: Vehicle | number): number;
export declare function setVehicleDirtLevel(vehicle: Vehicle | number, dirtLevel: number): void;
export declare function getDoesVehicleHaveDamageDecals(vehicle: Vehicle | number): boolean;
export declare function isVehicleDoorFullyOpen(vehicle: Vehicle | number, doorId: number): boolean;
export declare function setVehicleEngineOn(vehicle: Vehicle | number, value: boolean, instantly: boolean, disableAutoStart: boolean): void;
export declare function setVehicleUndriveable(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleProvidesCover(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleDoorControl(vehicle: Vehicle | number, doorId: number, speed: number, angle: number): void;
export declare function setVehicleDoorLatched(vehicle: Vehicle | number, doorId: number, p2: boolean, p3: boolean, p4: boolean): void;
export declare function getVehicleDoorAngleRatio(vehicle: Vehicle | number, doorId: number): number;
export declare function getPedUsingVehicleDoor(vehicle: Vehicle | number, doord: number): number;
export declare function setVehicleDoorShut(vehicle: Vehicle | number, doorId: number, closeInstantly: boolean): void;
export declare function setVehicleDoorBroken(vehicle: Vehicle | number, doorId: number, deleteDoor: boolean): void;
export declare function setVehicleCanBreak(vehicle: Vehicle | number, toggle: boolean): void;
export declare function doesVehicleHaveRoof(vehicle: Vehicle | number): boolean;
export declare function setVehicleRemoveAggressiveCarjackMission(p0: any): void;
export declare function setVehicleAvoidPlayerVehicleRiotVanMission(p0: any): void;
export declare function setCarjackMissionRemovalParameters(p0: any, p1: any): void;
export declare function isBigVehicle(vehicle: Vehicle | number): boolean;
export declare function getNumberOfVehicleColours(vehicle: Vehicle | number): number;
export declare function setVehicleColourCombination(vehicle: Vehicle | number, colorCombination: number): void;
export declare function getVehicleColourCombination(vehicle: Vehicle | number): number;
export declare function setVehicleXenonLightColorIndex(vehicle: Vehicle | number, colorIndex: number): void;
export declare function getVehicleXenonLightColorIndex(vehicle: Vehicle | number): number;
export declare function setVehicleIsConsideredByPlayer(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleWillForceOtherVehiclesToStop(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleActAsIfHasSirenOn(vehicle: Vehicle | number, p1: boolean): void;
export declare function setVehicleUseMoreRestrictiveSpawnChecks(vehicle: Vehicle | number, p1: boolean): void;
export declare function setVehicleMayBeUsedByGotoPointAnyMeans(vehicle: Vehicle | number, p1: boolean): void;
export declare function getRandomVehicleModelInMemory(p0: boolean, modelHash?: number | null, successIndicator?: number | null): [void, number, number];
export declare function getVehicleDoorLockStatus(vehicle: Vehicle | number): number;
export declare function getVehicleIndividualDoorLockStatus(vehicle: Vehicle | number, doorId: number): number;
export declare function isVehicleDoorDamaged(veh: Vehicle | number, doorID: number): boolean;
export declare function setDoorAllowedToBeBrokenOff(vehicle: Vehicle | number, doorId: number, isBreakable: boolean): void;
export declare function isVehicleBumperBouncing(vehicle: Vehicle | number, frontBumper: boolean): boolean;
export declare function isVehicleBumperBrokenOff(vehicle: Vehicle | number, frontBumper: boolean): boolean;
export declare function isCopVehicleInArea3d(x1: number, x2: number, y1: number, y2: number, z1: number, z2: number): boolean;
export declare function isVehicleOnAllWheels(vehicle: Vehicle | number): boolean;
export declare function getVehicleModelValue(vehicleModel: number): number;
export declare function getVehicleLayoutHash(vehicle: Vehicle | number): number;
export declare function getInVehicleClipsetHashForSeat(vehicle: Vehicle | number, p1: number): number;
export declare function setRenderTrainAsDerailed(train: Vehicle | number, toggle: boolean): void;
export declare function setVehicleExtraColours(vehicle: Vehicle | number, pearlescentColor: number, wheelColor: number): void;
export declare function getVehicleExtraColours(vehicle: Vehicle | number, pearlescentColor?: number | null, wheelColor?: number | null): [void, number, number];
export declare function setVehicleExtraColour5(vehicle: Vehicle | number, color: number): void;
export declare function getVehicleExtraColour5(vehicle: Vehicle | number, color?: number | null): [void, number];
export declare function setVehicleExtraColour6(vehicle: Vehicle | number, color: number): void;
export declare function getVehicleExtraColour6(vehicle: Vehicle | number, color?: number | null): [void, number];
export declare function stopAllGarageActivity(): void;
export declare function setVehicleFixed(vehicle: Vehicle | number): void;
export declare function setVehicleDeformationFixed(vehicle: Vehicle | number): void;
export declare function setVehicleCanEngineMissfire(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleCanLeakOil(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleCanLeakPetrol(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setDisableVehiclePetrolTankFires(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setDisableVehiclePetrolTankDamage(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setDisableVehicleEngineFires(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleLimitSpeedWhenPlayerInactive(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleStopInstantlyWhenPlayerInactive(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setDisablePretendOccupants(vehicle: Vehicle | number, toggle: boolean): void;
export declare function removeVehiclesFromGeneratorsInArea(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, p6: any): void;
export declare function setVehicleSteerBias(vehicle: Vehicle | number, value: number): void;
export declare function isVehicleExtraTurnedOn(vehicle: Vehicle | number, extraId: number): boolean;
export declare function setVehicleExtra(vehicle: Vehicle | number, extraId: number, disable: boolean): void;
export declare function doesExtraExist(vehicle: Vehicle | number, extraId: number): boolean;
export declare function isExtraBrokenOff(vehicle: Vehicle | number, extraId: number): boolean;
export declare function setConvertibleRoof(vehicle: Vehicle | number, p1: boolean): void;
export declare function lowerConvertibleRoof(vehicle: Vehicle | number, instantlyLower: boolean): void;
export declare function raiseConvertibleRoof(vehicle: Vehicle | number, instantlyRaise: boolean): void;
export declare function getConvertibleRoofState(vehicle: Vehicle | number): number;
export declare function isVehicleAConvertible(vehicle: Vehicle | number, p1: boolean): boolean;
export declare function transformToSubmarine(vehicle: Vehicle | number, noAnimation: boolean): boolean;
export declare function transformToCar(vehicle: Vehicle | number, noAnimation: boolean): void;
export declare function isVehicleInSubmarineMode(vehicle: Vehicle | number): boolean;
export declare function isVehicleStoppedAtTrafficLights(vehicle: Vehicle | number): boolean;
export declare function setVehicleDamage(vehicle: Vehicle | number, xOffset: number, yOffset: number, zOffset: number, damage: number, radius: number, focusOnModel: boolean): void;
export declare function setVehicleOccupantsTakeExplosiveDamage(vehicle: Vehicle | number, toggle: boolean): void;
export declare function getVehicleEngineHealth(vehicle: Vehicle | number): number;
export declare function setVehicleEngineHealth(vehicle: Vehicle | number, health: number): void;
export declare function setPlaneEngineHealth(vehicle: Vehicle | number, health: number): void;
export declare function getVehiclePetrolTankHealth(vehicle: Vehicle | number): number;
export declare function setVehiclePetrolTankHealth(vehicle: Vehicle | number, health: number): void;
export declare function isVehicleStuckTimerUp(vehicle: Vehicle | number, p1: number, ms: number): boolean;
export declare function resetVehicleStuckTimer(vehicle: Vehicle | number, nullAttributes: number): void;
export declare function isVehicleDriveable(vehicle: Vehicle | number, isOnFireCheck: boolean): boolean;
export declare function setVehicleHasBeenOwnedByPlayer(vehicle: Vehicle | number, owned: boolean): void;
export declare function setVehicleNeedsToBeHotwired(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleBlipThrottleRandomly(vehicle: Vehicle | number, p1: boolean): void;
export declare function setPoliceFocusWillTrackVehicle(vehicle: Vehicle | number, toggle: boolean): void;
export declare function startVehicleHorn(vehicle: Vehicle | number, duration: number, mode: number, forever: boolean): void;
export declare function setVehicleInCarModShop(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleHasStrongAxles(vehicle: Vehicle | number, toggle: boolean): void;
export declare function getDisplayNameFromVehicleModel(modelHash: number): string | null;
export declare function getMakeNameFromVehicleModel(modelHash: number): string | null;
export declare function getVehicleDeformationAtPos(vehicle: Vehicle | number, offsetX: number, offsetY: number, offsetZ: number): Vector3;
export declare function setVehicleLivery(vehicle: Vehicle | number, livery: number): void;
export declare function getVehicleLivery(vehicle: Vehicle | number): number;
export declare function getVehicleLiveryCount(vehicle: Vehicle | number): number;
export declare function setVehicleLivery2(vehicle: Vehicle | number, livery: number): void;
export declare function getVehicleLivery2(vehicle: Vehicle | number): number;
export declare function getVehicleLivery2Count(vehicle: Vehicle | number): number;
export declare function isVehicleWindowIntact(vehicle: Vehicle | number, windowIndex: number): boolean;
export declare function areAllVehicleWindowsIntact(vehicle: Vehicle | number): boolean;
export declare function areAnyVehicleSeatsFree(vehicle: Vehicle | number): boolean;
export declare function resetVehicleWheels(vehicle: Vehicle | number, toggle: boolean): void;
export declare function isHeliPartBroken(vehicle: Vehicle | number, p1: boolean, p2: boolean, p3: boolean): boolean;
export declare function getHeliMainRotorHealth(vehicle: Vehicle | number): number;
export declare function getHeliTailRotorHealth(vehicle: Vehicle | number): number;
export declare function getHeliTailBoomHealth(vehicle: Vehicle | number): number;
export declare function setHeliMainRotorHealth(vehicle: Vehicle | number, health: number): void;
export declare function setHeliTailRotorHealth(vehicle: Vehicle | number, health: number): void;
export declare function setHeliTailBoomCanBreakOff(vehicle: Vehicle | number, toggle: boolean): boolean;
export declare function setVehicleNameDebug(vehicle: Vehicle | number, name: string | null): void;
export declare function setVehicleExplodesOnHighExplosionDamage(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleExplodesOnExplosionDamageAtZeroBodyHealth(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setAllowVehicleExplodesOnContact(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleDisableTowing(vehicle: Vehicle | number, toggle: boolean): void;
export declare function getVehicleHasLandingGear(vehicle: Vehicle | number): boolean;
export declare function controlLandingGear(vehicle: Vehicle | number, state: number): void;
export declare function getLandingGearState(vehicle: Vehicle | number): number;
export declare function isAnyVehicleNearPoint(x: number, y: number, z: number, radius: number): boolean;
export declare function requestVehicleHighDetailModel(vehicle: Vehicle | number): void;
export declare function getVehicleModelNumDriveGears(vehicleModel: number): number;
export declare function getVehicleMaxDriveGearCount(vehicle: Vehicle | number): number;
export declare function getVehicleCurrentDriveGear(vehicle: Vehicle | number): number;
export declare function getVehicleCurrentRevRatio(vehicle: Vehicle | number): number;
export declare function removeVehicleHighDetailModel(vehicle: Vehicle | number): void;
export declare function isVehicleHighDetail(vehicle: Vehicle | number): boolean;
export declare function requestVehicleAsset(vehicleHash: number, vehicleAsset: number): void;
export declare function hasVehicleAssetLoaded(vehicleAsset: number): boolean;
export declare function removeVehicleAsset(vehicleAsset: number): void;
export declare function setVehicleTowTruckArmPosition(vehicle: Vehicle | number, position: number): void;
export declare function setAttachedVehicleToTowTruckArm(towTruck: Vehicle | number, vehicle: Vehicle | number): void;
export declare function attachVehicleToTowTruck(towTruck: Vehicle | number, vehicle: Vehicle | number, rear: boolean, hookOffsetX: number, hookOffsetY: number, hookOffsetZ: number): void;
export declare function detachVehicleFromTowTruck(towTruck: Vehicle | number, vehicle: Vehicle | number): void;
export declare function detachVehicleFromAnyTowTruck(vehicle: Vehicle | number): boolean;
export declare function isVehicleAttachedToTowTruck(towTruck: Vehicle | number, vehicle: Vehicle | number): boolean;
export declare function getEntityAttachedToTowTruck(towTruck: Vehicle | number): number;
export declare function setVehicleAutomaticallyAttaches(vehicle: Vehicle | number, p1: boolean, p2: any): number;
export declare function setVehicleBulldozerArmPosition(vehicle: Vehicle | number, position: number, p2: boolean): void;
export declare function setVehicleTankTurretPosition(vehicle: Vehicle | number, position: number, p2: boolean): void;
export declare function setVehicleTurretTarget(vehicle: Vehicle | number, p1: boolean, x: number, y: number, z: number, p5: boolean): void;
export declare function setVehicleTankStationary(vehicle: Vehicle | number, p1: boolean): void;
export declare function setVehicleTurretSpeedThisFrame(vehicle: Vehicle | number, speed: number): void;
export declare function disableVehicleTurretMovementThisFrame(vehicle: Vehicle | number): void;
export declare function setVehicleFlightNozzlePosition(vehicle: Vehicle | number, angleRatio: number): void;
export declare function setVehicleFlightNozzlePositionImmediate(vehicle: Vehicle | number, angle: number): void;
export declare function getVehicleFlightNozzlePosition(plane: Vehicle | number): number;
export declare function setDisableVerticalFlightModeTransition(vehicle: Vehicle | number, toggle: boolean): void;
export declare function generateVehicleCreationPosFromPaths(outVec: Vector3 | null, p1: any, outVec1: Vector3 | null, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): [boolean, Vector3, Vector3];
export declare function setVehicleBurnout(vehicle: Vehicle | number, toggle: boolean): void;
export declare function isVehicleInBurnout(vehicle: Vehicle | number): boolean;
export declare function setVehicleReduceGrip(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleReduceGripLevel(vehicle: Vehicle | number, val: number): void;
export declare function setVehicleIndicatorLights(vehicle: Vehicle | number, turnSignal: number, toggle: boolean): void;
export declare function setVehicleBrakeLights(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleTailLights(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleHandbrake(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleBrake(vehicle: Vehicle | number, toggle: boolean): void;
export declare function instantlyFillVehiclePopulation(): void;
export declare function hasInstantFillVehiclePopulationFinished(): boolean;
export declare function networkEnableEmptyCrowdingVehiclesRemoval(toggle: boolean): void;
export declare function networkCapEmptyCrowdingVehiclesRemoval(p0: number): void;
export declare function getVehicleTrailerVehicle(vehicle: Vehicle | number, trailer?: Vehicle | number | null): [boolean, number];
export declare function getVehicleTrailerParentVehicle(trailer: Vehicle | number): number;
export declare function setVehicleUsesLargeRearRamp(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleRudderBroken(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setConvertibleRoofLatchState(vehicle: Vehicle | number, state: boolean): void;
export declare function getVehicleEstimatedMaxSpeed(vehicle: Vehicle | number): number;
export declare function getVehicleMaxBraking(vehicle: Vehicle | number): number;
export declare function getVehicleMaxTraction(vehicle: Vehicle | number): number;
export declare function getVehicleAcceleration(vehicle: Vehicle | number): number;
export declare function getVehicleModelEstimatedMaxSpeed(modelHash: number): number;
export declare function getVehicleModelMaxBraking(modelHash: number): number;
export declare function getVehicleModelMaxBrakingMaxMods(modelHash: number): number;
export declare function getVehicleModelMaxTraction(modelHash: number): number;
export declare function getVehicleModelAcceleration(modelHash: number): number;
export declare function getVehicleModelAccelerationMaxMods(modelHash: number): number;
export declare function getFlyingVehicleModelAgility(modelHash: number): number;
export declare function getBoatVehicleModelAgility(modelHash: number): number;
export declare function getVehicleClassEstimatedMaxSpeed(vehicleClass: number): number;
export declare function getVehicleClassMaxTraction(vehicleClass: number): number;
export declare function getVehicleClassMaxAgility(vehicleClass: number): number;
export declare function getVehicleClassMaxAcceleration(vehicleClass: number): number;
export declare function getVehicleClassMaxBraking(vehicleClass: number): number;
export declare function addRoadNodeSpeedZone(x: number, y: number, z: number, radius: number, speed: number, p5: boolean): number;
export declare function removeRoadNodeSpeedZone(speedzone: number): boolean;
export declare function openBombBayDoors(vehicle: Vehicle | number): void;
export declare function closeBombBayDoors(vehicle: Vehicle | number): void;
export declare function getAreBombBayDoorsOpen(aircraft: Vehicle | number): boolean;
export declare function isVehicleSearchlightOn(vehicle: Vehicle | number): boolean;
export declare function setVehicleSearchlight(heli: Vehicle | number, toggle: boolean, canBeUsedByAI: boolean): void;
export declare function doesVehicleHaveSearchlight(vehicle: Vehicle | number): boolean;
export declare function isEntryPointForSeatClear(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, seatIndex: number, side: boolean, onEnter: boolean): boolean;
export declare function getEntryPointPosition(vehicle: Vehicle | number, doorId: number): Vector3;
export declare function canShuffleSeat(vehicle: Vehicle | number, seatIndex: number): boolean;
export declare function getNumModKits(vehicle: Vehicle | number): number;
export declare function setVehicleModKit(vehicle: Vehicle | number, modKit: number): void;
export declare function getVehicleModKit(vehicle: Vehicle | number): number;
export declare function getVehicleModKitType(vehicle: Vehicle | number): number;
export declare function getVehicleWheelType(vehicle: Vehicle | number): number;
export declare function setVehicleWheelType(vehicle: Vehicle | number, WheelType: number): void;
export declare function getNumModColors(paintType: number, p1: boolean): number;
export declare function setVehicleModColor1(vehicle: Vehicle | number, paintType: number, color: number, pearlescentColor: number): void;
export declare function setVehicleModColor2(vehicle: Vehicle | number, paintType: number, color: number): void;
export declare function getVehicleModColor1(vehicle: Vehicle | number, paintType?: number | null, color?: number | null, pearlescentColor?: number | null): [void, number, number, number];
export declare function getVehicleModColor2(vehicle: Vehicle | number, paintType?: number | null, color?: number | null): [void, number, number];
export declare function getVehicleModColor1Name(vehicle: Vehicle | number, p1: boolean): string | null;
export declare function getVehicleModColor2Name(vehicle: Vehicle | number): string | null;
export declare function haveVehicleModsStreamedIn(vehicle: Vehicle | number): boolean;
export declare function isVehicleModGen9Exclusive(vehicle: Vehicle | number, modType: number, modIndex: number): boolean;
export declare function setVehicleMod(vehicle: Vehicle | number, modType: number, modIndex: number, customTires: boolean): void;
export declare function getVehicleMod(vehicle: Vehicle | number, modType: number): number;
export declare function getVehicleModVariation(vehicle: Vehicle | number, modType: number): number;
export declare function getNumVehicleMods(vehicle: Vehicle | number, modType: number): number;
export declare function removeVehicleMod(vehicle: Vehicle | number, modType: number): void;
export declare function toggleVehicleMod(vehicle: Vehicle | number, modType: number, toggle: boolean): void;
export declare function isToggleModOn(vehicle: Vehicle | number, modType: number): boolean;
export declare function getModTextLabel(vehicle: Vehicle | number, modType: number, modValue: number): string | null;
export declare function getModSlotName(vehicle: Vehicle | number, modType: number): string | null;
export declare function getLiveryName(vehicle: Vehicle | number, liveryIndex: number): string | null;
export declare function getVehicleModModifierValue(vehicle: Vehicle | number, modType: number, modIndex: number): number;
export declare function getVehicleModIdentifierHash(vehicle: Vehicle | number, modType: number, modIndex: number): number;
export declare function preloadVehicleMod(vehicle: Vehicle | number, modType: number, modIndex: number): void;
export declare function hasPreloadModsFinished(vehicle: Vehicle | number): boolean;
export declare function releasePreloadMods(vehicle: Vehicle | number): void;
export declare function setVehicleTyreSmokeColor(vehicle: Vehicle | number, r: number, g: number, b: number): void;
export declare function getVehicleTyreSmokeColor(vehicle: Vehicle | number, r?: number | null, g?: number | null, b?: number | null): [void, number, number, number];
export declare function setVehicleWindowTint(vehicle: Vehicle | number, tint: number): void;
export declare function getVehicleWindowTint(vehicle: Vehicle | number): number;
export declare function getNumVehicleWindowTints(): number;
export declare function getVehicleColor(vehicle: Vehicle | number, r?: number | null, g?: number | null, b?: number | null): [void, number, number, number];
export declare function getVehicleColoursWhichCanBeSet(vehicle: Vehicle | number): number;
export declare function getVehicleCauseOfDestruction(vehicle: Vehicle | number): number;
export declare function overridePlaneDamageThrehsold(vehicle: Vehicle | number, health: number): void;
export declare function setTransmissionReducedGearRatio(vehicle: Vehicle | number, toggle: boolean): void;
export declare function getVehicleDesiredDriveGear(vehicle: Vehicle | number): number;
export declare function getIsLeftVehicleHeadlightDamaged(vehicle: Vehicle | number): boolean;
export declare function getIsRightVehicleHeadlightDamaged(vehicle: Vehicle | number): boolean;
export declare function getBothVehicleHeadlightsDamaged(vehicle: Vehicle | number): boolean;
export declare function modifyVehicleTopSpeed(vehicle: Vehicle | number, value: number): void;
export declare function setVehicleMaxSpeed(vehicle: Vehicle | number, speed: number): void;
export declare function setVehicleStaysFrozenWhenCleanedUp(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleActAsIfHighSpeedForFragSmashing(vehicle: Vehicle | number, p1: boolean): void;
export declare function setPedsCanFallOffThisVehicleFromLargeFallDamage(vehicle: Vehicle | number, toggle: boolean, p2: number): void;
export declare function addVehicleCombatAngledAvoidanceArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): number;
export declare function removeVehicleCombatAvoidanceArea(p0: number): void;
export declare function isAnyPedRappellingFromHeli(vehicle: Vehicle | number): boolean;
export declare function setVehicleCheatPowerIncrease(vehicle: Vehicle | number, value: number): void;
export declare function setVehicleInfluencesWantedLevel(p0: any, p1: boolean): void;
export declare function setVehicleIsWanted(vehicle: Vehicle | number, state: boolean): void;
export declare function swingBoatBoomToRatio(vehicle: Vehicle | number, ratio: number): void;
export declare function swingBoatBoomFreely(vehicle: Vehicle | number, toggle: boolean): void;
export declare function allowBoatBoomToAnimate(vehicle: Vehicle | number, toggle: boolean): void;
export declare function getBoatBoomPositionRatio(vehicle: Vehicle | number): number;
export declare function disablePlaneAileron(vehicle: Vehicle | number, p1: boolean, p2: boolean): void;
export declare function getIsVehicleEngineRunning(vehicle: Vehicle | number): boolean;
export declare function setVehicleUseAlternateHandling(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setBikeOnStand(vehicle: Vehicle | number, x: number, y: number): void;
export declare function setVehicleNotStealableAmbiently(vehicle: Vehicle | number, p1: boolean): void;
export declare function lockDoorsWhenNoLongerNeeded(vehicle: Vehicle | number): void;
export declare function setLastDrivenVehicle(vehicle: Vehicle | number): void;
export declare function getLastDrivenVehicle(): number;
export declare function clearLastDrivenVehicle(): void;
export declare function setVehicleHasBeenDrivenFlag(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setTaskVehicleGotoPlaneMinHeightAboveTerrain(plane: Vehicle | number, height: number): void;
export declare function setVehicleLodMultiplier(vehicle: Vehicle | number, multiplier: number): void;
export declare function setVehicleCanSaveInGarage(vehicle: Vehicle | number, toggle: boolean): void;
export declare function getVehicleNumOfBrokenOffParts(vehicle: Vehicle | number): number;
export declare function getVehicleNumOfBrokenLoosenParts(vehicle: Vehicle | number): number;
export declare function setForceVehicleEngineDamageByBullet(p0: any, p1: boolean): void;
export declare function setVehicleGeneratesEngineShockingEvents(vehicle: Vehicle | number, toggle: boolean): void;
export declare function copyVehicleDamages(sourceVehicle: Vehicle | number, targetVehicle: Vehicle | number): void;
export declare function disableVehicleExplosionBreakOffParts(): void;
export declare function setLightsCutoffDistanceTweak(distance: number): void;
export declare function setVehicleShootAtTarget(driver: Ped | Player | LocalPlayer | number, entity: Entity | number, xTarget: number, yTarget: number, zTarget: number): void;
export declare function getVehicleLockOnTarget(vehicle: Vehicle | number, entity?: Entity | number | null): [boolean, number];
export declare function setForceHdVehicle(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleCustomPathNodeStreamingRadius(vehicle: Vehicle | number, p1: number): void;
export declare function getVehiclePlateType(vehicle: Vehicle | number): number;
export declare function trackVehicleVisibility(vehicle: Vehicle | number): void;
export declare function isVehicleVisible(vehicle: Vehicle | number): boolean;
export declare function setVehicleGravity(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setEnableVehicleSlipstreaming(toggle: boolean): void;
export declare function setVehicleSlipstreamingShouldTimeOut(toggle: boolean): void;
export declare function getVehicleCurrentTimeInSlipStream(vehicle: Vehicle | number): number;
export declare function isVehicleProducingSlipStream(vehicle: Vehicle | number): boolean;
export declare function setVehicleInactiveDuringPlayback(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleActiveDuringPlayback(vehicle: Vehicle | number, toggle: boolean): void;
export declare function isVehicleSprayable(vehicle: Vehicle | number): boolean;
export declare function setVehicleEngineCanDegrade(vehicle: Vehicle | number, toggle: boolean): void;
export declare function disableVehcileDynamicAmbientScales(vehicle: Vehicle | number, p1: number, p2: number): void;
export declare function enableVehicleDynamicAmbientScales(vehicle: Vehicle | number): void;
export declare function isPlaneLandingGearIntact(plane: Vehicle | number): boolean;
export declare function arePlanePropellersIntact(plane: Vehicle | number): boolean;
export declare function setPlanePropellerHealth(plane: Vehicle | number, health: number): boolean;
export declare function setVehicleCanDeformWheels(vehicle: Vehicle | number, toggle: boolean): void;
export declare function isVehicleStolen(vehicle: Vehicle | number): boolean;
export declare function setVehicleIsStolen(vehicle: Vehicle | number, isStolen: boolean): void;
export declare function setPlaneTurbulenceMultiplier(vehicle: Vehicle | number, multiplier: number): void;
export declare function areWingsOfPlaneIntact(plane: Vehicle | number): boolean;
export declare function allowAmbientVehiclesToAvoidAdverseConditions(vehicle: Vehicle | number): void;
export declare function detachVehicleFromCargobob(vehicle: Vehicle | number, cargobob: Vehicle | number): void;
export declare function detachVehicleFromAnyCargobob(vehicle: Vehicle | number): boolean;
export declare function detachEntityFromCargobob(cargobob: Vehicle | number, entity: Entity | number): boolean;
export declare function isVehicleAttachedToCargobob(cargobob: Vehicle | number, vehicleAttached: Vehicle | number): boolean;
export declare function getVehicleAttachedToCargobob(cargobob: Vehicle | number): number;
export declare function getEntityAttachedToCargobob(p0: any): number;
export declare function attachVehicleToCargobob(cargobob: Vehicle | number, vehicle: Vehicle | number, p2: number, x: number, y: number, z: number): void;
export declare function attachEntityToCargobob(p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
export declare function setCargobobForceDontDetachVehicle(cargobob: Vehicle | number, toggle: boolean): void;
export declare function setCargobobExcludeFromPickupEntity(p0: any, p1: any): void;
export declare function canCargobobPickUpEntity(p0: any, p1: any): boolean;
export declare function getAttachedPickUpHookPosition(cargobob: Vehicle | number): Vector3;
export declare function doesCargobobHavePickUpRope(cargobob: Vehicle | number): boolean;
export declare function createPickUpRopeForCargobob(cargobob: Vehicle | number, state: number): void;
export declare function removePickUpRopeForCargobob(cargobob: Vehicle | number): void;
export declare function setPickupRopeLengthForCargobob(cargobob: Vehicle | number, length1: number, length2: number, p3: boolean): void;
export declare function setPickupRopeLengthWithoutCreatingRopeForCargobob(p0: any, p1: any, p2: any): void;
export declare function setCargobobPickupRopeDampingMultiplier(p0: any, p1: any): void;
export declare function setCargobobPickupRopeType(p0: any, p1: any): void;
export declare function doesCargobobHavePickupMagnet(cargobob: Vehicle | number): boolean;
export declare function setCargobobPickupMagnetActive(cargobob: Vehicle | number, isActive: boolean): void;
export declare function setCargobobPickupMagnetStrength(cargobob: Vehicle | number, strength: number): void;
export declare function setCargobobPickupMagnetFalloff(cargobob: Vehicle | number, p1: number): void;
export declare function setCargobobPickupMagnetReducedStrength(cargobob: Vehicle | number, p1: number): void;
export declare function setCargobobPickupMagnetReducedFalloff(cargobob: Vehicle | number, p1: number): void;
export declare function setCargobobPickupMagnetPullStrength(cargobob: Vehicle | number, p1: number): void;
export declare function setCargobobPickupMagnetPullRopeLength(vehicle: Vehicle | number, p1: number): void;
export declare function setCargobobPickupMagnetSetTargetedMode(vehicle: Vehicle | number, cargobob: Vehicle | number): void;
export declare function setCargobobPickupMagnetSetAmbientMode(vehicle: Vehicle | number, p1: boolean, p2: boolean): void;
export declare function setCargobobPickupMagnetEnsurePickupEntityUpright(vehicle: Vehicle | number, p1: boolean): void;
export declare function doesVehicleHaveWeapons(vehicle: Vehicle | number): boolean;
export declare function setVehicleWillTellOthersToHurry(vehicle: Vehicle | number, p1: boolean): void;
export declare function disableVehicleWeapon(disabled: boolean, weaponHash: number, vehicle: Vehicle | number, owner: Ped | Player | LocalPlayer | number): void;
export declare function isVehicleWeaponDisabled(weaponHash: number, vehicle: Vehicle | number, owner: Ped | Player | LocalPlayer | number): boolean;
export declare function setVehicleUsedForPilotSchool(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleActiveForPedNavigation(vehicle: Vehicle | number, toggle: boolean): void;
export declare function getVehicleClass(vehicle: Vehicle | number): number;
export declare function getVehicleClassFromName(modelHash: number): number;
export declare function setPlayersLastVehicle(vehicle: Vehicle | number): void;
export declare function setVehicleCanBeUsedByFleeingPeds(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setAircraftPilotSkillNoiseScalar(vehicle: Vehicle | number, p1: number): void;
export declare function setVehicleDropsMoneyWhenBlownUp(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleKeepEngineOnWhenAbandoned(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleImpatienceTimer(vehicle: Vehicle | number, p1: any): void;
export declare function setVehicleHandlingOverride(vehicle: Vehicle | number, hash: number): void;
export declare function setVehicleExtendedRemovalRange(vehicle: Vehicle | number, range: number): void;
export declare function setVehicleSteeringBiasScalar(p0: any, p1: number): void;
export declare function setHeliControlLaggingRateScalar(helicopter: Vehicle | number, multiplier: number): void;
export declare function setVehicleFrictionOverride(vehicle: Vehicle | number, friction: number): void;
export declare function setVehicleWheelsCanBreakOffWhenBlowUp(vehicle: Vehicle | number, toggle: boolean): void;
export declare function arePlaneControlPanelsIntact(vehicle: Vehicle | number, p1: boolean): boolean;
export declare function setVehicleCeilingHeight(vehicle: Vehicle | number, height: number): void;
export declare function setVehicleNoExplosionDamageFromDriver(vehicle: Vehicle | number, toggle: boolean): void;
export declare function clearVehicleRouteHistory(vehicle: Vehicle | number): void;
export declare function doesVehicleExistWithDecorator(decorator: string | null): number;
export declare function setVehicleAiCanUseExclusiveSeats(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleExclusiveDriver(vehicle: Vehicle | number, ped: Ped | Player | LocalPlayer | number, index: number): void;
export declare function isPedExclusiveDriverOfVehicle(ped: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, outIndex?: number | null): [boolean, number];
export declare function disableIndividualPlanePropeller(vehicle: Vehicle | number, propeller: number): void;
export declare function setVehicleForceAfterburner(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setDontProcessVehicleGlass(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setDisableWantedConesResponse(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setUseDesiredZCruiseSpeedForLanding(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setArriveDistanceOverrideForVehiclePersuitAttack(vehicle: Vehicle | number, p1: number): void;
export declare function setVehicleReadyForCleanup(p0: any): void;
export declare function setDistantCarsEnabled(toggle: boolean): void;
export declare function setVehicleNeonColour(vehicle: Vehicle | number, r: number, g: number, b: number): void;
export declare function setVehicleNeonIndexColour(vehicle: Vehicle | number, index: number): void;
export declare function getVehicleNeonColour(vehicle: Vehicle | number, r?: number | null, g?: number | null, b?: number | null): [void, number, number, number];
export declare function setVehicleNeonEnabled(vehicle: Vehicle | number, index: number, toggle: boolean): void;
export declare function getVehicleNeonEnabled(vehicle: Vehicle | number, index: number): boolean;
export declare function setAmbientVehicleNeonEnabled(p0: boolean): void;
export declare function suppressNeonsOnVehicle(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setDisableSuperdummy(vehicle: Vehicle | number, p1: boolean): void;
export declare function requestVehicleDial(vehicle: Vehicle | number): void;
export declare function getVehicleBodyHealth(vehicle: Vehicle | number): number;
export declare function setVehicleBodyHealth(vehicle: Vehicle | number, value: number): void;
export declare function getVehicleSize(vehicle: Vehicle | number, out1?: Vector3 | null, out2?: Vector3 | null): [void, Vector3, Vector3];
export declare function getFakeSuspensionLoweringAmount(vehicle: Vehicle | number): number;
export declare function setCarHighSpeedBumpSeverityMultiplier(multiplier: number): void;
export declare function getNumberOfVehicleDoors(vehicle: Vehicle | number): number;
export declare function setHydraulicsControl(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setCanAdjustGroundClearance(vehicle: Vehicle | number, p1: boolean): void;
export declare function getVehicleHealthPercentage(vehicle: Vehicle | number, maxEngineHealth: number, maxPetrolTankHealth: number, maxBodyHealth: number, maxMainRotorHealth: number, maxTailRotorHealth: number, maxUnkHealth: number): number;
export declare function getVehicleIsMercenary(vehicle: Vehicle | number): boolean;
export declare function setVehicleBrokenPartsDontAffectAiHandling(vehicle: Vehicle | number, p1: boolean): void;
export declare function setVehicleKersAllowed(vehicle: Vehicle | number, toggle: boolean): void;
export declare function getVehicleHasKers(vehicle: Vehicle | number): boolean;
export declare function setPlaneResistToExplosion(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setHeliResistToExplosion(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setDisableBmxExtraTrickForces(p0: any): void;
export declare function setHydraulicSuspensionRaiseFactor(vehicle: Vehicle | number, wheelId: number, value: number): void;
export declare function getHydraulicSuspensionRaiseFactor(vehicle: Vehicle | number, wheelId: number): number;
export declare function setCanUseHydraulics(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setHydraulicVehicleState(vehicle: Vehicle | number, state: number): void;
export declare function setHydraulicWheelState(vehicle: Vehicle | number, wheelId: number, state: number, value: number, p4: any): void;
export declare function hasVehiclePetroltankSetOnFireByEntity(p0: any, p1: any): boolean;
export declare function clearVehiclePetroltankFireCulprit(vehicle: Vehicle | number): void;
export declare function setVehicleBobbleheadVelocity(x: number, y: number, p2: number): void;
export declare function getVehicleIsDummy(p0: any): boolean;
export declare function setVehicleDamageScale(vehicle: Vehicle | number, p1: number): boolean;
export declare function setVehicleWeaponDamageScale(vehicle: Vehicle | number, multiplier: number): boolean;
export declare function setDisableDamageWithPickedUpEntity(p0: any, p1: any): boolean;
export declare function setVehicleUsesMpPlayerDamageMultiplier(p0: any, p1: any): void;
export declare function setBikeEasyToLand(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setInvertVehicleControls(vehicle: Vehicle | number, state: boolean): void;
export declare function setSpeedBoostEffectDisabled(disabled: boolean): void;
export declare function setSlowDownEffectDisabled(disabled: boolean): void;
export declare function setFormationLeader(vehicle: Vehicle | number, x: number, y: number, z: number, p4: number): void;
export declare function resetFormationLeader(): void;
export declare function getIsBoatCapsized(vehicle: Vehicle | number): boolean;
export declare function setAllowRammingSoopOrRamp(p0: any, p1: any): void;
export declare function setScriptRampImpulseScale(vehicle: Vehicle | number, impulseScale: number): void;
export declare function getIsDoorValid(vehicle: Vehicle | number, doorId: number): boolean;
export declare function setScriptRocketBoostRechargeTime(vehicle: Vehicle | number, seconds: number): void;
export declare function getHasRocketBoost(vehicle: Vehicle | number): boolean;
export declare function isRocketBoostActive(vehicle: Vehicle | number): boolean;
export declare function setRocketBoostActive(vehicle: Vehicle | number, active: boolean): void;
export declare function getHasRetractableWheels(vehicle: Vehicle | number): boolean;
export declare function getIsWheelsRetracted(vehicle: Vehicle | number): boolean;
export declare function setWheelsExtendedInstantly(vehicle: Vehicle | number): void;
export declare function setWheelsRetractedInstantly(vehicle: Vehicle | number): void;
export declare function getCarHasJump(vehicle: Vehicle | number): boolean;
export declare function setUseHigherCarJump(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setClearFreezeWaitingOnCollisionOncePlayerEnters(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleWeaponRestrictedAmmo(vehicle: Vehicle | number, weaponIndex: number, capacity: number): void;
export declare function getVehicleWeaponRestrictedAmmo(vehicle: Vehicle | number, weaponIndex: number): number;
export declare function getVehicleHasParachute(vehicle: Vehicle | number): boolean;
export declare function getVehicleCanDeployParachute(vehicle: Vehicle | number): boolean;
export declare function vehicleStartParachuting(vehicle: Vehicle | number, active: boolean): void;
export declare function isVehicleParachuteDeployed(vehicle: Vehicle | number): boolean;
export declare function vehicleSetRampAndRammingCarsTakeDamage(vehicle: Vehicle | number, toggle: boolean): void;
export declare function vehicleSetEnableRampCarSideImpulse(p0: any, p1: any): void;
export declare function vehicleSetEnableNormaliseRampCarVerticalVeloctiy(p0: any, p1: any): void;
export declare function vehicleSetJetWashForceEnabled(p0: any): void;
export declare function setVehicleWeaponCanTargetObjects(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleUseBoostButtonForWheelRetract(toggle: boolean): void;
export declare function setVehicleUseHornButtonForNitrous(toggle: boolean): void;
export declare function vehicleSetParachuteModelOverride(vehicle: Vehicle | number, modelHash: number): void;
export declare function vehicleSetParachuteModelTintIndex(vehicle: Vehicle | number, textureVariation: number): void;
export declare function vehicleSetOverrideExtenableSideRatio(p0: any, p1: any): number;
export declare function vehicleSetExtenableSideTargetRatio(p0: any, p1: any): number;
export declare function vehicleSetOverrideSideRatio(p0: any, p1: any): number;
export declare function getAllVehicles(vehsStruct?: any | null): [number, any];
export declare function setCargobobExtaPickupRange(p0: any, p1: any): void;
export declare function setOverrideVehicleDoorTorque(p0: any, p1: any, p2: any): void;
export declare function setWheelieEnabled(vehicle: Vehicle | number, enabled: boolean): void;
export declare function setDisableHeliExplodeFromBodyDamage(p0: any, p1: any): void;
export declare function setDisableExplodeFromBodyDamageOnCollision(vehicle: Vehicle | number, value: number): void;
export declare function setTrailerAttachmentEnabled(p0: any, p1: any): void;
export declare function setRocketBoostFill(vehicle: Vehicle | number, percentage: number): void;
export declare function setGliderActive(vehicle: Vehicle | number, state: boolean): void;
export declare function setShouldResetTurretInScriptedCameras(vehicle: Vehicle | number, shouldReset: boolean): void;
export declare function setVehicleDisableCollisionUponCreation(vehicle: Vehicle | number, disable: boolean): void;
export declare function setGroundEffectReducesDrag(toggle: boolean): void;
export declare function setDisableMapCollision(vehicle: Vehicle | number): void;
export declare function setDisablePedStandOnTop(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleDamageScales(vehicle: Vehicle | number, p1: any, p2: any, p3: any, p4: any): void;
export declare function setPlaneSectionDamageScale(vehicle: Vehicle | number, p1: any, p2: any): void;
export declare function setHeliCanPickupEntityThatHasPickUpDisabled(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleBombAmmo(vehicle: Vehicle | number, bombCount: number): void;
export declare function getVehicleBombAmmo(vehicle: Vehicle | number): number;
export declare function setVehicleCountermeasureAmmo(vehicle: Vehicle | number, counterMeasureCount: number): void;
export declare function getVehicleCountermeasureAmmo(vehicle: Vehicle | number): number;
export declare function setHeliCombatOffset(vehicle: Vehicle | number, x: number, y: number, z: number): void;
export declare function getCanVehicleBePlacedHere(vehicle: Vehicle | number, x: number, y: number, z: number, rotX: number, rotY: number, rotZ: number, p7: number, p8: any): boolean;
export declare function setDisableAutomaticCrashTask(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setSpecialFlightModeRatio(vehicle: Vehicle | number, ratio: number): void;
export declare function setSpecialFlightModeTargetRatio(vehicle: Vehicle | number, targetRatio: number): void;
export declare function setSpecialFlightModeAllowed(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setDisableHoverModeFlight(vehicle: Vehicle | number, toggle: boolean): void;
export declare function getOutriggersDeployed(vehicle: Vehicle | number): boolean;
export declare function findSpawnCoordinatesForHeli(ped: Ped | Player | LocalPlayer | number): Vector3;
export declare function setDeployFoldingWings(vehicle: Vehicle | number, deploy: boolean, p2: boolean): void;
export declare function areFoldingWingsDeployed(vehicle: Vehicle | number): boolean;
export declare function setDeployMissileBays(vehicle: Vehicle | number, deploy: boolean): void;
export declare function areMissileBaysDeployed(vehicle: Vehicle | number): boolean;
export declare function setDipStraightDownWhenCrashingPlane(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setTurretHidden(vehicle: Vehicle | number, index: number, toggle: boolean): void;
export declare function setHoverModeWingRatio(vehicle: Vehicle | number, ratio: number): void;
export declare function setDisableTurretMovement(vehicle: Vehicle | number, turretId: number): void;
export declare function setForceFixLinkMatrices(vehicle: Vehicle | number): void;
export declare function setTransformRateForAnimation(vehicle: Vehicle | number, transformRate: number): void;
export declare function setTransformToSubmarineUsesAlternateInput(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setVehicleCombatMode(toggle: boolean): void;
export declare function setVehicleDetonationMode(toggle: boolean): void;
export declare function setVehicleShuntOnStick(toggle: boolean): void;
export declare function getIsVehicleShunting(vehicle: Vehicle | number): boolean;
export declare function getHasVehicleBeenHitByShunt(vehicle: Vehicle | number): boolean;
export declare function getLastShuntVehicle(vehicle: Vehicle | number): number;
export declare function setDisableVehicleExplosionsDamage(toggle: boolean): void;
export declare function setOverrideNitrousLevel(vehicle: Vehicle | number, toggle: boolean, level: number, power: number, rechargeTime: number, disableSound: boolean): void;
export declare function setNitrousIsActive(vehicle: Vehicle | number, enabled: boolean): void;
export declare function setOverrideTractionLossMultiplier(vehicle: Vehicle | number, modifier: number): void;
export declare function setDriftSlipAngleLimits(vehicle: Vehicle | number, durationScalar: number, amplitudeScalar: number, slipAngleLimit: number): void;
export declare function setMinimumTimeBetweenGearShifts(vehicle: Vehicle | number, time: number): void;
export declare function fullyChargeNitrous(vehicle: Vehicle | number): void;
export declare function getRemainingNitrousDuration(vehicle: Vehicle | number): number;
export declare function isNitrousActive(vehicle: Vehicle | number): boolean;
export declare function clearNitrous(vehicle: Vehicle | number): void;
export declare function setIncreaseWheelCrushDamage(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setDisableWeaponBladeForces(toggle: boolean): void;
export declare function setUseDoubleClickForCarJump(toggle: boolean): void;
export declare function getDoesVehicleHaveTombstone(vehicle: Vehicle | number): boolean;
export declare function hideTombstone(vehicle: Vehicle | number, toggle: boolean): void;
export declare function applyEmpEffect(vehicle: Vehicle | number): void;
export declare function getIsVehicleDisabledByEmp(vehicle: Vehicle | number): boolean;
export declare function setDisableRetractingWeaponBlades(toggle: boolean): void;
export declare function getTyreHealth(vehicle: Vehicle | number, wheelIndex: number): number;
export declare function setTyreHealth(vehicle: Vehicle | number, wheelIndex: number, health: number): void;
export declare function getTyreWearRate(vehicle: Vehicle | number, wheelIndex: number): number;
export declare function setTyreWearRate(vehicle: Vehicle | number, wheelIndex: number, multiplier: number): void;
export declare function setTyreWearRateScale(vehicle: Vehicle | number, wheelIndex: number, multiplier: number): void;
export declare function setTyreMaximumGripDifferenceDueToWearRate(vehicle: Vehicle | number, wheelIndex: number, multiplier: number): void;
export declare function setAircraftIgnoreHightmapOptimisation(vehicle: Vehicle | number, p1: number): void;
export declare function setReducedSuspensionForce(vehicle: Vehicle | number, enable: boolean): void;
export declare function setDriftTyres(vehicle: Vehicle | number, toggle: boolean): void;
export declare function getDriftTyresSet(vehicle: Vehicle | number): boolean;
export declare function networkUseHighPrecisionTrainBlending(vehicle: Vehicle | number, toggle: boolean): void;
export declare function setCheckForEnoughRoomForPed(vehicle: Vehicle | number, p1: boolean): void;
export declare function setAllowCollisionWhenInVehicle(vehicle: Vehicle | number, toggle: boolean): void;
export declare function isVehicleGen9ExclusiveModel(vehicleModel: number): boolean;
export declare function getVehicleMaxExhaustBoneCount(): number;
export declare function getVehicleExhaustBone(vehicle: Vehicle | number, index: number, boneIndex?: number | null, axisX?: boolean | null): [boolean, number, boolean];
export declare function getWaterHeight(x: number, y: number, z: number, height?: number | null): [boolean, number];
export declare function getWaterHeightNoWaves(x: number, y: number, z: number, height?: number | null): [boolean, number];
export declare function testProbeAgainstWater(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, result?: Vector3 | null): [boolean, Vector3];
export declare function testProbeAgainstAllWater(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, flags: number, waterHeight?: number | null): [number, number];
export declare function testVerticalProbeAgainstAllWater(x: number, y: number, z: number, flags: number, waterHeight?: number | null): [number, number];
export declare function modifyWater(x: number, y: number, radius: number, height: number): void;
export declare function addExtraCalmingQuad(xLow: number, yLow: number, xHigh: number, yHigh: number, height: number): number;
export declare function removeExtraCalmingQuad(calmingQuad: number): void;
export declare function setDeepOceanScaler(intensity: number): void;
export declare function getDeepOceanScaler(): number;
export declare function setCalmedWaveHeightScaler(height: number): void;
export declare function resetDeepOceanScaler(): void;
export declare function enableLaserSightRendering(toggle: boolean): void;
export declare function getWeaponComponentTypeModel(componentHash: number): number;
export declare function getWeapontypeModel(weaponHash: number): number;
export declare function getWeapontypeSlot(weaponHash: number): number;
export declare function getWeapontypeGroup(weaponHash: number): number;
export declare function getWeaponComponentVariantExtraCount(componentHash: number): number;
export declare function getWeaponComponentVariantExtraModel(componentHash: number, extraComponentIndex: number): number;
export declare function setCurrentPedWeapon(ped: Ped | Player | LocalPlayer | number, weaponHash: number, bForceInHand: boolean): void;
export declare function getCurrentPedWeapon(ped: Ped | Player | LocalPlayer | number, weaponHash: number | null, p2: boolean): [boolean, number];
export declare function getCurrentPedWeaponEntityIndex(ped: Ped | Player | LocalPlayer | number, p1: any): number;
export declare function getBestPedWeapon(ped: Ped | Player | LocalPlayer | number, p1: boolean): number;
export declare function setCurrentPedVehicleWeapon(ped: Ped | Player | LocalPlayer | number, weaponHash: number): boolean;
export declare function getCurrentPedVehicleWeapon(ped: Ped | Player | LocalPlayer | number, weaponHash?: number | null): [boolean, number];
export declare function setPedCycleVehicleWeaponsOnly(ped: Ped | Player | LocalPlayer | number): void;
export declare function isPedArmed(ped: Ped | Player | LocalPlayer | number, typeFlags: number): boolean;
export declare function isWeaponValid(weaponHash: number): boolean;
export declare function hasPedGotWeapon(ped: Ped | Player | LocalPlayer | number, weaponHash: number, p2: boolean): boolean;
export declare function isPedWeaponReadyToShoot(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function getPedWeapontypeInSlot(ped: Ped | Player | LocalPlayer | number, weaponSlot: number): number;
export declare function getAmmoInPedWeapon(ped: Ped | Player | LocalPlayer | number, weaponhash: number): number;
export declare function addAmmoToPed(ped: Ped | Player | LocalPlayer | number, weaponHash: number, ammo: number): void;
export declare function setPedAmmo(ped: Ped | Player | LocalPlayer | number, weaponHash: number, ammo: number, p3: boolean): void;
export declare function setPedInfiniteAmmo(ped: Ped | Player | LocalPlayer | number, toggle: boolean, weaponHash: number): void;
export declare function setPedInfiniteAmmoClip(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedStunGunFiniteAmmo(p0: any, p1: any): void;
export declare function giveWeaponToPed(ped: Ped | Player | LocalPlayer | number, weaponHash: number, ammoCount: number, isHidden: boolean, bForceInHand: boolean): void;
export declare function giveDelayedWeaponToPed(ped: Ped | Player | LocalPlayer | number, weaponHash: number, ammoCount: number, bForceInHand: boolean): void;
export declare function removeAllPedWeapons(ped: Ped | Player | LocalPlayer | number, p1: boolean): void;
export declare function removeWeaponFromPed(ped: Ped | Player | LocalPlayer | number, weaponHash: number): void;
export declare function hidePedWeaponForScriptedCutscene(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setPedCurrentWeaponVisible(ped: Ped | Player | LocalPlayer | number, visible: boolean, deselectWeapon: boolean, p3: boolean, p4: boolean): void;
export declare function setPedDropsWeaponsWhenDead(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function hasPedBeenDamagedByWeapon(ped: Ped | Player | LocalPlayer | number, weaponHash: number, weaponType: number): boolean;
export declare function clearPedLastWeaponDamage(ped: Ped | Player | LocalPlayer | number): void;
export declare function hasEntityBeenDamagedByWeapon(entity: Entity | number, weaponHash: number, weaponType: number): boolean;
export declare function clearEntityLastWeaponDamage(entity: Entity | number): void;
export declare function setPedDropsWeapon(ped: Ped | Player | LocalPlayer | number): void;
export declare function setPedDropsInventoryWeapon(ped: Ped | Player | LocalPlayer | number, weaponHash: number, xOffset: number, yOffset: number, zOffset: number, ammoCount: number): void;
export declare function getMaxAmmoInClip(ped: Ped | Player | LocalPlayer | number, weaponHash: number, p2: boolean): number;
export declare function getAmmoInClip(ped: Ped | Player | LocalPlayer | number, weaponHash: number, ammo?: number | null): [boolean, number];
export declare function setAmmoInClip(ped: Ped | Player | LocalPlayer | number, weaponHash: number, ammo: number): boolean;
export declare function getMaxAmmo(ped: Ped | Player | LocalPlayer | number, weaponHash: number, ammo?: number | null): [boolean, number];
export declare function getMaxAmmoByType(ped: Ped | Player | LocalPlayer | number, ammoTypeHash: number, ammo?: number | null): [boolean, number];
export declare function addPedAmmoByType(ped: Ped | Player | LocalPlayer | number, ammoTypeHash: number, ammo: number): void;
export declare function setPedAmmoByType(ped: Ped | Player | LocalPlayer | number, ammoTypeHash: number, ammo: number): void;
export declare function getPedAmmoByType(ped: Ped | Player | LocalPlayer | number, ammoTypeHash: number): number;
export declare function setPedAmmoToDrop(ped: Ped | Player | LocalPlayer | number, p1: number): void;
export declare function setPickupAmmoAmountScaler(p0: number): void;
export declare function getPedAmmoTypeFromWeapon(ped: Ped | Player | LocalPlayer | number, weaponHash: number): number;
export declare function getPedOriginalAmmoTypeFromWeapon(ped: Ped | Player | LocalPlayer | number, weaponHash: number): number;
export declare function getPedLastWeaponImpactCoord(ped: Ped | Player | LocalPlayer | number, coords?: Vector3 | null): [boolean, Vector3];
export declare function setPedGadget(ped: Ped | Player | LocalPlayer | number, gadgetHash: number, p2: boolean): void;
export declare function getIsPedGadgetEquipped(ped: Ped | Player | LocalPlayer | number, gadgetHash: number): boolean;
export declare function getSelectedPedWeapon(ped: Ped | Player | LocalPlayer | number): number;
export declare function explodeProjectiles(ped: Ped | Player | LocalPlayer | number, weaponHash: number, p2: boolean): void;
export declare function removeAllProjectilesOfType(weaponHash: number, explode: boolean): void;
export declare function getLockonDistanceOfCurrentPedWeapon(ped: Ped | Player | LocalPlayer | number): number;
export declare function getMaxRangeOfCurrentPedWeapon(ped: Ped | Player | LocalPlayer | number): number;
export declare function hasVehicleGotProjectileAttached(driver: Ped | Player | LocalPlayer | number, vehicle: Vehicle | number, weaponHash: number, p3: any): boolean;
export declare function giveWeaponComponentToPed(ped: Ped | Player | LocalPlayer | number, weaponHash: number, componentHash: number): void;
export declare function removeWeaponComponentFromPed(ped: Ped | Player | LocalPlayer | number, weaponHash: number, componentHash: number): void;
export declare function hasPedGotWeaponComponent(ped: Ped | Player | LocalPlayer | number, weaponHash: number, componentHash: number): boolean;
export declare function isPedWeaponComponentActive(ped: Ped | Player | LocalPlayer | number, weaponHash: number, componentHash: number): boolean;
export declare function refillAmmoInstantly(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function makePedReload(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function requestWeaponAsset(weaponHash: number, p1: number, p2: number): void;
export declare function hasWeaponAssetLoaded(weaponHash: number): boolean;
export declare function removeWeaponAsset(weaponHash: number): void;
export declare function createWeaponObject(weaponHash: number, ammoCount: number, x: number, y: number, z: number, showWorldModel: boolean, scale: number, p7: any, p8: any, p9: any): number;
export declare function giveWeaponComponentToWeaponObject(weaponObject: number, componentHash: number): void;
export declare function removeWeaponComponentFromWeaponObject(object: number, componentHash: number): void;
export declare function hasWeaponGotWeaponComponent(weapon: number, componentHash: number): boolean;
export declare function giveWeaponObjectToPed(weaponObject: number, ped: Ped | Player | LocalPlayer | number): void;
export declare function doesWeaponTakeWeaponComponent(weaponHash: number, componentHash: number): boolean;
export declare function getWeaponObjectFromPed(ped: Ped | Player | LocalPlayer | number, p1: boolean): number;
export declare function giveLoadoutToPed(ped: Ped | Player | LocalPlayer | number, loadoutHash: number): void;
export declare function setPedWeaponTintIndex(ped: Ped | Player | LocalPlayer | number, weaponHash: number, tintIndex: number): void;
export declare function getPedWeaponTintIndex(ped: Ped | Player | LocalPlayer | number, weaponHash: number): number;
export declare function setWeaponObjectTintIndex(weapon: number, tintIndex: number): void;
export declare function getWeaponObjectTintIndex(weapon: number): number;
export declare function getWeaponTintCount(weaponHash: number): number;
export declare function setPedWeaponComponentTintIndex(ped: Ped | Player | LocalPlayer | number, weaponHash: number, camoComponentHash: number, colorIndex: number): void;
export declare function getPedWeaponComponentTintIndex(ped: Ped | Player | LocalPlayer | number, weaponHash: number, camoComponentHash: number): number;
export declare function setWeaponObjectComponentTintIndex(weaponObject: number, camoComponentHash: number, colorIndex: number): void;
export declare function getWeaponObjectComponentTintIndex(weaponObject: number, camoComponentHash: number): number;
export declare function getPedWeaponCamoIndex(ped: Ped | Player | LocalPlayer | number, weaponHash: number): number;
export declare function setWeaponObjectCamoIndex(weaponObject: number, p1: number): void;
export declare function getWeaponHudStats(weaponHash: number, outData?: any | null): [boolean, any];
export declare function getWeaponComponentHudStats(componentHash: number, outData?: any | null): [boolean, any];
export declare function getWeaponDamage(weaponHash: number, componentHash: number): number;
export declare function getWeaponClipSize(weaponHash: number): number;
export declare function getWeaponTimeBetweenShots(weaponHash: number): number;
export declare function setPedChanceOfFiringBlanks(ped: Ped | Player | LocalPlayer | number, xBias: number, yBias: number): void;
export declare function setPedShootOrdnanceWeapon(ped: Ped | Player | LocalPlayer | number, p1: number): number;
export declare function requestWeaponHighDetailModel(weaponObject: Entity | number): void;
export declare function setWeaponPedDamageModifier(weapon: number, damageModifier: number): void;
export declare function setWeaponDamageModifier(weaponHash: number, damageMultiplier: number): void;
export declare function setWeaponAoeModifier(weaponHash: number, multiplier: number): void;
export declare function setWeaponEffectDurationModifier(p0: number, p1: number): void;
export declare function isPedCurrentWeaponSilenced(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function isFlashLightOn(ped: Ped | Player | LocalPlayer | number): boolean;
export declare function setFlashLightFadeDistance(distance: number): boolean;
export declare function setFlashLightActiveHistory(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function setWeaponAnimationOverride(ped: Ped | Player | LocalPlayer | number, animStyle: number): void;
export declare function getWeaponDamageType(weaponHash: number): number;
export declare function setEqippedWeaponStartSpinningAtFullSpeed(ped: Ped | Player | LocalPlayer | number): void;
export declare function canUseWeaponOnParachute(weaponHash: number): boolean;
export declare function createAirDefenceSphere(x: number, y: number, z: number, radius: number, p4: number, p5: number, p6: number, weaponHash: number): number;
export declare function createAirDefenceAngledArea(p0: number, p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, radius: number, weaponHash: number): number;
export declare function removeAirDefenceSphere(zoneId: number): boolean;
export declare function removeAllAirDefenceSpheres(): void;
export declare function setPlayerTargettableForAirDefenceSphere(player: Player | number, zoneId: number, enable: boolean): void;
export declare function isAirDefenceSphereInArea(x: number, y: number, z: number, radius: number, outZoneId?: number | null): [boolean, number];
export declare function fireAirDefenceSphereWeaponAtPosition(zoneId: number, x: number, y: number, z: number): void;
export declare function doesAirDefenceSphereExist(zoneId: number): boolean;
export declare function setCanPedSelectInventoryWeapon(ped: Ped | Player | LocalPlayer | number, weaponHash: number, toggle: boolean): void;
export declare function setCanPedSelectAllWeapons(ped: Ped | Player | LocalPlayer | number, toggle: boolean): void;
export declare function getZoneAtCoords(x: number, y: number, z: number): number;
export declare function getZoneFromNameId(zoneName: string | null): number;
export declare function getZonePopschedule(zoneId: number): number;
export declare function getNameOfZone(x: number, y: number, z: number): string | null;
export declare function setZoneEnabled(zoneId: number, toggle: boolean): void;
export declare function getZoneScumminess(zoneId: number): number;
export declare function overridePopscheduleVehicleModel(scheduleId: number, vehicleHash: number): void;
export declare function clearPopscheduleOverrideVehicleModel(scheduleId: number): void;
export declare function getHashOfMapAreaAtCoords(x: number, y: number, z: number): number;
declare const _default: {
    canUseWeaponOnParachute: typeof canUseWeaponOnParachute;
    clearPopscheduleOverrideVehicleModel: typeof clearPopscheduleOverrideVehicleModel;
    createAirDefenceAngledArea: typeof createAirDefenceAngledArea;
    createAirDefenceSphere: typeof createAirDefenceSphere;
    fireAirDefenceSphereWeaponAtPosition: typeof fireAirDefenceSphereWeaponAtPosition;
    getHashOfMapAreaAtCoords: typeof getHashOfMapAreaAtCoords;
    getNameOfZone: typeof getNameOfZone;
    getZoneAtCoords: typeof getZoneAtCoords;
    getZoneFromNameId: typeof getZoneFromNameId;
    getZonePopschedule: typeof getZonePopschedule;
    getZoneScumminess: typeof getZoneScumminess;
    isAirDefenceSphereInArea: typeof isAirDefenceSphereInArea;
    removeAllAirDefenceSpheres: typeof removeAllAirDefenceSpheres;
    removeAirDefenceSphere: typeof removeAirDefenceSphere;
    requestWeaponHighDetailModel: typeof requestWeaponHighDetailModel;
    setCanPedSelectAllWeapons: typeof setCanPedSelectAllWeapons;
    setCanPedSelectInventoryWeapon: typeof setCanPedSelectInventoryWeapon;
    setEqippedWeaponStartSpinningAtFullSpeed: typeof setEqippedWeaponStartSpinningAtFullSpeed;
    setFlashLightActiveHistory: typeof setFlashLightActiveHistory;
    setFlashLightFadeDistance: typeof setFlashLightFadeDistance;
    setPedChanceOfFiringBlanks: typeof setPedChanceOfFiringBlanks;
    setPedShootOrdnanceWeapon: typeof setPedShootOrdnanceWeapon;
    setPlayerTargettableForAirDefenceSphere: typeof setPlayerTargettableForAirDefenceSphere;
    setWeaponAoeModifier: typeof setWeaponAoeModifier;
    setWeaponAnimationOverride: typeof setWeaponAnimationOverride;
};
export default _default;
